// MAX TB Test Protocol File, generated by MAX TB Version H-2013.03-SP1
// Tue Nov 26 12:11:52 2019
// Module under test: apbuart
// Generated from original STIL file : "apbuart.stil"
// STIL file version: "1.0"
// Enhanced Runtime Version: use <sim_exec> +tmax_help for available runtime options
// Simulation mode: default parallel simulation

`define TDATA_FILE "/home/dmitriy/Work/git/demidrol.pw/grlib-asic-2018.3a/grlib/designs/mipt-hcmos8d/dft/result/apbuart_test.dat"
`timescale 1ns/1ns

// OPCODE DEFINITION
`define EndPat 0
`define IncPat 1
`define SetPat 2
`define WFTStmt 3
`define ConditionStmt 4
`define VectorStmt 5
`define FixedStmt 6
`define test_setupStmt 7
`define load_unloadStmt 8
`define multiclock_captureStmt 9

// SIGS DEFINITION
`define rst 0
`define clk 1
`define testen 2
`define testrst 3
`define testin 4
`define apbi_pSEL_0_ 5
`define apbi_pSEL_1_ 6
`define apbi_pSEL_2_ 7
`define apbi_pSEL_3_ 8
`define apbi_pSEL_4_ 9
`define apbi_pSEL_5_ 10
`define apbi_pSEL_6_ 11
`define apbi_pSEL_7_ 12
`define apbi_pSEL_8_ 13
`define apbi_pSEL_9_ 14
`define apbi_pSEL_10_ 15
`define apbi_pSEL_11_ 16
`define apbi_pSEL_12_ 17
`define apbi_pSEL_13_ 18
`define apbi_pSEL_14_ 19
`define apbi_pSEL_15_ 20
`define apbi_pENABLE 21
`define apbi_pADDR_31_ 22
`define apbi_pADDR_30_ 23
`define apbi_pADDR_29_ 24
`define apbi_pADDR_28_ 25
`define apbi_pADDR_27_ 26
`define apbi_pADDR_26_ 27
`define apbi_pADDR_25_ 28
`define apbi_pADDR_24_ 29
`define apbi_pADDR_23_ 30
`define apbi_pADDR_22_ 31
`define apbi_pADDR_21_ 32
`define apbi_pADDR_20_ 33
`define apbi_pADDR_19_ 34
`define apbi_pADDR_18_ 35
`define apbi_pADDR_17_ 36
`define apbi_pADDR_16_ 37
`define apbi_pADDR_15_ 38
`define apbi_pADDR_14_ 39
`define apbi_pADDR_13_ 40
`define apbi_pADDR_12_ 41
`define apbi_pADDR_11_ 42
`define apbi_pADDR_10_ 43
`define apbi_pADDR_9_ 44
`define apbi_pADDR_8_ 45
`define apbi_pADDR_7_ 46
`define apbi_pADDR_6_ 47
`define apbi_pADDR_5_ 48
`define apbi_pADDR_4_ 49
`define apbi_pADDR_3_ 50
`define apbi_pADDR_2_ 51
`define apbi_pADDR_1_ 52
`define apbi_pADDR_0_ 53
`define apbi_pWRITE 54
`define apbi_pWDATA_31_ 55
`define apbi_pWDATA_30_ 56
`define apbi_pWDATA_29_ 57
`define apbi_pWDATA_28_ 58
`define apbi_pWDATA_27_ 59
`define apbi_pWDATA_26_ 60
`define apbi_pWDATA_25_ 61
`define apbi_pWDATA_24_ 62
`define apbi_pWDATA_23_ 63
`define apbi_pWDATA_22_ 64
`define apbi_pWDATA_21_ 65
`define apbi_pWDATA_20_ 66
`define apbi_pWDATA_19_ 67
`define apbi_pWDATA_18_ 68
`define apbi_pWDATA_17_ 69
`define apbi_pWDATA_16_ 70
`define apbi_pWDATA_15_ 71
`define apbi_pWDATA_14_ 72
`define apbi_pWDATA_13_ 73
`define apbi_pWDATA_12_ 74
`define apbi_pWDATA_11_ 75
`define apbi_pWDATA_10_ 76
`define apbi_pWDATA_9_ 77
`define apbi_pWDATA_8_ 78
`define apbi_pWDATA_7_ 79
`define apbi_pWDATA_6_ 80
`define apbi_pWDATA_5_ 81
`define apbi_pWDATA_4_ 82
`define apbi_pWDATA_3_ 83
`define apbi_pWDATA_2_ 84
`define apbi_pWDATA_1_ 85
`define apbi_pWDATA_0_ 86
`define apbi_pIRQ_31_ 87
`define apbi_pIRQ_30_ 88
`define apbi_pIRQ_29_ 89
`define apbi_pIRQ_28_ 90
`define apbi_pIRQ_27_ 91
`define apbi_pIRQ_26_ 92
`define apbi_pIRQ_25_ 93
`define apbi_pIRQ_24_ 94
`define apbi_pIRQ_23_ 95
`define apbi_pIRQ_22_ 96
`define apbi_pIRQ_21_ 97
`define apbi_pIRQ_20_ 98
`define apbi_pIRQ_19_ 99
`define apbi_pIRQ_18_ 100
`define apbi_pIRQ_17_ 101
`define apbi_pIRQ_16_ 102
`define apbi_pIRQ_15_ 103
`define apbi_pIRQ_14_ 104
`define apbi_pIRQ_13_ 105
`define apbi_pIRQ_12_ 106
`define apbi_pIRQ_11_ 107
`define apbi_pIRQ_10_ 108
`define apbi_pIRQ_9_ 109
`define apbi_pIRQ_8_ 110
`define apbi_pIRQ_7_ 111
`define apbi_pIRQ_6_ 112
`define apbi_pIRQ_5_ 113
`define apbi_pIRQ_4_ 114
`define apbi_pIRQ_3_ 115
`define apbi_pIRQ_2_ 116
`define apbi_pIRQ_1_ 117
`define apbi_pIRQ_0_ 118
`define apbi_tESTEN 119
`define apbi_tESTRST 120
`define apbi_sCANEN 121
`define apbi_tESTOEN 122
`define apbi_tESTIN_3_ 123
`define apbi_tESTIN_2_ 124
`define apbi_tESTIN_1_ 125
`define apbi_tESTIN_0_ 126
`define uarti_rXD 127
`define uarti_cTSN 128
`define uarti_eXTCLK 129
`define \apbo[131]  130
`define \apbo[130]  131
`define \apbo[129]  132
`define \apbo[128]  133
`define \apbo[127]  134
`define \apbo[126]  135
`define \apbo[125]  136
`define \apbo[124]  137
`define \apbo[123]  138
`define \apbo[122]  139
`define \apbo[121]  140
`define \apbo[120]  141
`define \apbo[119]  142
`define \apbo[118]  143
`define \apbo[117]  144
`define \apbo[116]  145
`define \apbo[115]  146
`define \apbo[114]  147
`define \apbo[113]  148
`define \apbo[112]  149
`define \apbo[111]  150
`define \apbo[110]  151
`define \apbo[109]  152
`define \apbo[108]  153
`define \apbo[107]  154
`define \apbo[106]  155
`define \apbo[105]  156
`define \apbo[104]  157
`define \apbo[103]  158
`define \apbo[102]  159
`define \apbo[101]  160
`define \apbo[100]  161
`define \apbo[99]  162
`define \apbo[98]  163
`define \apbo[97]  164
`define \apbo[96]  165
`define \apbo[95]  166
`define \apbo[94]  167
`define \apbo[93]  168
`define \apbo[92]  169
`define \apbo[91]  170
`define \apbo[90]  171
`define \apbo[89]  172
`define \apbo[88]  173
`define \apbo[87]  174
`define \apbo[86]  175
`define \apbo[85]  176
`define \apbo[84]  177
`define \apbo[83]  178
`define \apbo[82]  179
`define \apbo[81]  180
`define \apbo[80]  181
`define \apbo[79]  182
`define \apbo[78]  183
`define \apbo[77]  184
`define \apbo[76]  185
`define \apbo[75]  186
`define \apbo[74]  187
`define \apbo[73]  188
`define \apbo[72]  189
`define \apbo[71]  190
`define \apbo[70]  191
`define \apbo[69]  192
`define \apbo[68]  193
`define \apbo[67]  194
`define \apbo[66]  195
`define \apbo[65]  196
`define \apbo[64]  197
`define \apbo[63]  198
`define \apbo[62]  199
`define \apbo[61]  200
`define \apbo[60]  201
`define \apbo[59]  202
`define \apbo[58]  203
`define \apbo[57]  204
`define \apbo[56]  205
`define \apbo[55]  206
`define \apbo[54]  207
`define \apbo[53]  208
`define \apbo[52]  209
`define \apbo[51]  210
`define \apbo[50]  211
`define \apbo[49]  212
`define \apbo[48]  213
`define \apbo[47]  214
`define \apbo[46]  215
`define \apbo[45]  216
`define \apbo[44]  217
`define \apbo[43]  218
`define \apbo[42]  219
`define \apbo[41]  220
`define \apbo[40]  221
`define \apbo[39]  222
`define \apbo[38]  223
`define \apbo[37]  224
`define \apbo[36]  225
`define \apbo[35]  226
`define \apbo[34]  227
`define \apbo[33]  228
`define \apbo[32]  229
`define \apbo[31]  230
`define \apbo[30]  231
`define \apbo[29]  232
`define \apbo[28]  233
`define \apbo[27]  234
`define \apbo[26]  235
`define \apbo[25]  236
`define \apbo[24]  237
`define \apbo[23]  238
`define \apbo[22]  239
`define \apbo[21]  240
`define \apbo[20]  241
`define \apbo[19]  242
`define \apbo[18]  243
`define \apbo[17]  244
`define \apbo[16]  245
`define \apbo[15]  246
`define \apbo[14]  247
`define \apbo[13]  248
`define \apbo[12]  249
`define \apbo[11]  250
`define \apbo[10]  251
`define \apbo[9]  252
`define \apbo[8]  253
`define \apbo[7]  254
`define \apbo[6]  255
`define \apbo[5]  256
`define \apbo[4]  257
`define \apbo[3]  258
`define \apbo[2]  259
`define \apbo[1]  260
`define \apbo[0]  261
`define testout 262
`define uarto_rTSN 263
`define uarto_tXD 264
`define uarto_sCALER_31_ 265
`define uarto_sCALER_30_ 266
`define uarto_sCALER_29_ 267
`define uarto_sCALER_28_ 268
`define uarto_sCALER_27_ 269
`define uarto_sCALER_26_ 270
`define uarto_sCALER_25_ 271
`define uarto_sCALER_24_ 272
`define uarto_sCALER_23_ 273
`define uarto_sCALER_22_ 274
`define uarto_sCALER_21_ 275
`define uarto_sCALER_20_ 276
`define uarto_sCALER_19_ 277
`define uarto_sCALER_18_ 278
`define uarto_sCALER_17_ 279
`define uarto_sCALER_16_ 280
`define uarto_sCALER_15_ 281
`define uarto_sCALER_14_ 282
`define uarto_sCALER_13_ 283
`define uarto_sCALER_12_ 284
`define uarto_sCALER_11_ 285
`define uarto_sCALER_10_ 286
`define uarto_sCALER_9_ 287
`define uarto_sCALER_8_ 288
`define uarto_sCALER_7_ 289
`define uarto_sCALER_6_ 290
`define uarto_sCALER_5_ 291
`define uarto_sCALER_4_ 292
`define uarto_sCALER_3_ 293
`define uarto_sCALER_2_ 294
`define uarto_sCALER_1_ 295
`define uarto_sCALER_0_ 296
`define uarto_tXEN 297
`define uarto_fLOW 298
`define uarto_rXEN 299
`define _pi 300
`define all_inputs 301
`define _po 302
`define _si 303
`define all_outputs 304
`define _clk 305
`define _so 306

// WFTS DEFINITION
`define _multiclock_capture_WFT_ 0
`define _default_WFT_ 1
`define MAX_PART 0

`define MAXTB_HEADER " MAX TB Version H-2013.03-SP1\n Test Protocol File generated from original file \"apbuart.stil\"\n STIL file version: 1.0"
`define MAXTB_H_S "#############################################################################"


module /* maxtb */ apbuart_test ();
   parameter NSTMTS = 10; // number of all stmts
   parameter DFSHIFTS = 0; // (default) number of serial shifts in parallel scan mode
   parameter NAMELENGTH = 200; // max length of names reported in fails
   parameter FILELENGTH = 1024; // max length for file names 
   parameter MAXCHLEN = 116, NCHAINS = 1; // MAXCHLEN for serial
   parameter NINPUTS = 130, NOUTPUTS = 170, CUM_WIDTH=903;
   parameter NSIS = 1, NSOUTS = 1;
   parameter WFT_IDS = 2, SIG_IDS = 307, SIG_IDS_W = 9, MAX_WIDTH = 170, MAX_SIGW = 1;
   parameter PARSERINC = 116; 
   parameter SYNC_LATENCY = 3; 
   parameter PRTIME = 0.000000; 
   integer xtb_sim_mode; // simulation modes: xtb_sim_mode=0 -> serial, xtb_sim_mode=1 -> parallel (default);
   integer nbfails, abit, cbit;
   integer prev_error; // flag for tracking displayed error banner
   integer loads;        // number of load_unloads for current pattern
   integer prev_pat;     // previous pattern number;
   integer rep_pat; // report pattern progress every Nth pattern
   integer verbose;      // message verbosity level
   integer test_setup_runs; // counts the number of executed test_setups
   integer test_setup_only_once; // flag to trigger only one execution of test_setup
   integer data_i, n, cur_pat, start_pat, end_pat, last_pat, total_pats, csci, fsci, cur_stmt;
   integer v_count, v_count_per_pat;  // track the cycle count and cycle/pattern count (helpful for the simulator GUI)
   integer SSHIFTS;
   integer diagf, diagm;
   integer sertmg;
   integer the_wft_id, wft_id_s;
   integer ser_pats;
   integer first_pat;
   event start_part, end_part;
   `define NBRTOPS 6
   integer csim_op;
   reg [32*8:1] RT_OPS [0:`NBRTOPS];
   integer      rt_ops [0:`NBRTOPS-1];
   integer      tdfm;
   reg [0:(8*FILELENGTH)-1] TDATA_FILE;

   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] ALLINSIGS, ALLOUTSIGS;
   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] TMPINSIGS_V,TMPINSIGS_T,TMPINSIGS_V_S,TMPINSIGS_T_S;
   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] TMPOUTSIGS_V,TMPOUTSIGS_T,TMPOUTSIGS_V_S,TMPOUTSIGS_T_S;
   reg [NINPUTS+NOUTPUTS-1:0] ALLINSIGIDS, ALLOUTSIGIDS, ALLINSIGIDS_S, ALLOUTSIGIDS_S;
   reg [NSTMTS-1:0] opcode, popcode;
   event force_scells;
   event strobe_scells;
   event release_scells;
   reg [348:0] memel, memall [1:1060];
   reg [0:(8*NAMELENGTH)-1] CH_NAMES [0:NCHAINS-1];
   reg [0:(8*NAMELENGTH)-1] CH_PINS [0:NCHAINS-1];
   reg [0:MAXCHLEN-1] LOD, LOAD[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] UNL, UNLOAD[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] UNLM, UNLMSK[0:NCHAINS-1], SHBEGM[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] SERIALM;
   reg [0:MAXCHLEN-1] CH_INPINV[0:NCHAINS-1], CH_OUTINV[0:NCHAINS-1];
   wire [0:NCHAINS-1] SCANOUT;
   reg [0:MAXCHLEN-1] CHOUT, CHAINOUT[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] CHAINOUT0;
   reg [0:MAXCHLEN-1] LOD0;
   reg [8:0] the_sids [0:SIG_IDS-1];
   reg [MAX_WIDTH-1:0] the_sigs [0:SIG_IDS-1];
   reg strobe_en;
   reg [SIG_IDS-1:0] sid_args ;
   reg [2*CUM_WIDTH-1:0] sval_args;
   reg [8*NAMELENGTH-1:0]  SignalIDName [0:306];
   reg [2:0]  SignalIDType [0:306];
   reg [7:0]  SignalIDWidth [0:306];
   reg [(8*NAMELENGTH-1):0]  WFTIDName [0:1];
   reg [0:(8*NAMELENGTH-1)] StmtNames [0:NSTMTS];
   reg [0:(8*FILELENGTH)-1] diag_file;

   reg rst ;
   reg clk ;
   reg testen ;
   reg testrst ;
   reg testin ;
   reg apbi_pSEL_0_ ;
   reg apbi_pSEL_1_ ;
   reg apbi_pSEL_2_ ;
   reg apbi_pSEL_3_ ;
   reg apbi_pSEL_4_ ;
   reg apbi_pSEL_5_ ;
   reg apbi_pSEL_6_ ;
   reg apbi_pSEL_7_ ;
   reg apbi_pSEL_8_ ;
   reg apbi_pSEL_9_ ;
   reg apbi_pSEL_10_ ;
   reg apbi_pSEL_11_ ;
   reg apbi_pSEL_12_ ;
   reg apbi_pSEL_13_ ;
   reg apbi_pSEL_14_ ;
   reg apbi_pSEL_15_ ;
   reg apbi_pENABLE ;
   reg apbi_pADDR_31_ ;
   reg apbi_pADDR_30_ ;
   reg apbi_pADDR_29_ ;
   reg apbi_pADDR_28_ ;
   reg apbi_pADDR_27_ ;
   reg apbi_pADDR_26_ ;
   reg apbi_pADDR_25_ ;
   reg apbi_pADDR_24_ ;
   reg apbi_pADDR_23_ ;
   reg apbi_pADDR_22_ ;
   reg apbi_pADDR_21_ ;
   reg apbi_pADDR_20_ ;
   reg apbi_pADDR_19_ ;
   reg apbi_pADDR_18_ ;
   reg apbi_pADDR_17_ ;
   reg apbi_pADDR_16_ ;
   reg apbi_pADDR_15_ ;
   reg apbi_pADDR_14_ ;
   reg apbi_pADDR_13_ ;
   reg apbi_pADDR_12_ ;
   reg apbi_pADDR_11_ ;
   reg apbi_pADDR_10_ ;
   reg apbi_pADDR_9_ ;
   reg apbi_pADDR_8_ ;
   reg apbi_pADDR_7_ ;
   reg apbi_pADDR_6_ ;
   reg apbi_pADDR_5_ ;
   reg apbi_pADDR_4_ ;
   reg apbi_pADDR_3_ ;
   reg apbi_pADDR_2_ ;
   reg apbi_pADDR_1_ ;
   reg apbi_pADDR_0_ ;
   reg apbi_pWRITE ;
   reg apbi_pWDATA_31_ ;
   reg apbi_pWDATA_30_ ;
   reg apbi_pWDATA_29_ ;
   reg apbi_pWDATA_28_ ;
   reg apbi_pWDATA_27_ ;
   reg apbi_pWDATA_26_ ;
   reg apbi_pWDATA_25_ ;
   reg apbi_pWDATA_24_ ;
   reg apbi_pWDATA_23_ ;
   reg apbi_pWDATA_22_ ;
   reg apbi_pWDATA_21_ ;
   reg apbi_pWDATA_20_ ;
   reg apbi_pWDATA_19_ ;
   reg apbi_pWDATA_18_ ;
   reg apbi_pWDATA_17_ ;
   reg apbi_pWDATA_16_ ;
   reg apbi_pWDATA_15_ ;
   reg apbi_pWDATA_14_ ;
   reg apbi_pWDATA_13_ ;
   reg apbi_pWDATA_12_ ;
   reg apbi_pWDATA_11_ ;
   reg apbi_pWDATA_10_ ;
   reg apbi_pWDATA_9_ ;
   reg apbi_pWDATA_8_ ;
   reg apbi_pWDATA_7_ ;
   reg apbi_pWDATA_6_ ;
   reg apbi_pWDATA_5_ ;
   reg apbi_pWDATA_4_ ;
   reg apbi_pWDATA_3_ ;
   reg apbi_pWDATA_2_ ;
   reg apbi_pWDATA_1_ ;
   reg apbi_pWDATA_0_ ;
   reg apbi_pIRQ_31_ ;
   reg apbi_pIRQ_30_ ;
   reg apbi_pIRQ_29_ ;
   reg apbi_pIRQ_28_ ;
   reg apbi_pIRQ_27_ ;
   reg apbi_pIRQ_26_ ;
   reg apbi_pIRQ_25_ ;
   reg apbi_pIRQ_24_ ;
   reg apbi_pIRQ_23_ ;
   reg apbi_pIRQ_22_ ;
   reg apbi_pIRQ_21_ ;
   reg apbi_pIRQ_20_ ;
   reg apbi_pIRQ_19_ ;
   reg apbi_pIRQ_18_ ;
   reg apbi_pIRQ_17_ ;
   reg apbi_pIRQ_16_ ;
   reg apbi_pIRQ_15_ ;
   reg apbi_pIRQ_14_ ;
   reg apbi_pIRQ_13_ ;
   reg apbi_pIRQ_12_ ;
   reg apbi_pIRQ_11_ ;
   reg apbi_pIRQ_10_ ;
   reg apbi_pIRQ_9_ ;
   reg apbi_pIRQ_8_ ;
   reg apbi_pIRQ_7_ ;
   reg apbi_pIRQ_6_ ;
   reg apbi_pIRQ_5_ ;
   reg apbi_pIRQ_4_ ;
   reg apbi_pIRQ_3_ ;
   reg apbi_pIRQ_2_ ;
   reg apbi_pIRQ_1_ ;
   reg apbi_pIRQ_0_ ;
   reg apbi_tESTEN ;
   reg apbi_tESTRST ;
   reg apbi_sCANEN ;
   reg apbi_tESTOEN ;
   reg apbi_tESTIN_3_ ;
   reg apbi_tESTIN_2_ ;
   reg apbi_tESTIN_1_ ;
   reg apbi_tESTIN_0_ ;
   reg uarti_rXD ;
   reg uarti_cTSN ;
   reg uarti_eXTCLK ;
   wire \apbo[131]  ;
   wire \apbo[130]  ;
   wire \apbo[129]  ;
   wire \apbo[128]  ;
   wire \apbo[127]  ;
   wire \apbo[126]  ;
   wire \apbo[125]  ;
   wire \apbo[124]  ;
   wire \apbo[123]  ;
   wire \apbo[122]  ;
   wire \apbo[121]  ;
   wire \apbo[120]  ;
   wire \apbo[119]  ;
   wire \apbo[118]  ;
   wire \apbo[117]  ;
   wire \apbo[116]  ;
   wire \apbo[115]  ;
   wire \apbo[114]  ;
   wire \apbo[113]  ;
   wire \apbo[112]  ;
   wire \apbo[111]  ;
   wire \apbo[110]  ;
   wire \apbo[109]  ;
   wire \apbo[108]  ;
   wire \apbo[107]  ;
   wire \apbo[106]  ;
   wire \apbo[105]  ;
   wire \apbo[104]  ;
   wire \apbo[103]  ;
   wire \apbo[102]  ;
   wire \apbo[101]  ;
   wire \apbo[100]  ;
   wire \apbo[99]  ;
   wire \apbo[98]  ;
   wire \apbo[97]  ;
   wire \apbo[96]  ;
   wire \apbo[95]  ;
   wire \apbo[94]  ;
   wire \apbo[93]  ;
   wire \apbo[92]  ;
   wire \apbo[91]  ;
   wire \apbo[90]  ;
   wire \apbo[89]  ;
   wire \apbo[88]  ;
   wire \apbo[87]  ;
   wire \apbo[86]  ;
   wire \apbo[85]  ;
   wire \apbo[84]  ;
   wire \apbo[83]  ;
   wire \apbo[82]  ;
   wire \apbo[81]  ;
   wire \apbo[80]  ;
   wire \apbo[79]  ;
   wire \apbo[78]  ;
   wire \apbo[77]  ;
   wire \apbo[76]  ;
   wire \apbo[75]  ;
   wire \apbo[74]  ;
   wire \apbo[73]  ;
   wire \apbo[72]  ;
   wire \apbo[71]  ;
   wire \apbo[70]  ;
   wire \apbo[69]  ;
   wire \apbo[68]  ;
   wire \apbo[67]  ;
   wire \apbo[66]  ;
   wire \apbo[65]  ;
   wire \apbo[64]  ;
   wire \apbo[63]  ;
   wire \apbo[62]  ;
   wire \apbo[61]  ;
   wire \apbo[60]  ;
   wire \apbo[59]  ;
   wire \apbo[58]  ;
   wire \apbo[57]  ;
   wire \apbo[56]  ;
   wire \apbo[55]  ;
   wire \apbo[54]  ;
   wire \apbo[53]  ;
   wire \apbo[52]  ;
   wire \apbo[51]  ;
   wire \apbo[50]  ;
   wire \apbo[49]  ;
   wire \apbo[48]  ;
   wire \apbo[47]  ;
   wire \apbo[46]  ;
   wire \apbo[45]  ;
   wire \apbo[44]  ;
   wire \apbo[43]  ;
   wire \apbo[42]  ;
   wire \apbo[41]  ;
   wire \apbo[40]  ;
   wire \apbo[39]  ;
   wire \apbo[38]  ;
   wire \apbo[37]  ;
   wire \apbo[36]  ;
   wire \apbo[35]  ;
   wire \apbo[34]  ;
   wire \apbo[33]  ;
   wire \apbo[32]  ;
   wire \apbo[31]  ;
   wire \apbo[30]  ;
   wire \apbo[29]  ;
   wire \apbo[28]  ;
   wire \apbo[27]  ;
   wire \apbo[26]  ;
   wire \apbo[25]  ;
   wire \apbo[24]  ;
   wire \apbo[23]  ;
   wire \apbo[22]  ;
   wire \apbo[21]  ;
   wire \apbo[20]  ;
   wire \apbo[19]  ;
   wire \apbo[18]  ;
   wire \apbo[17]  ;
   wire \apbo[16]  ;
   wire \apbo[15]  ;
   wire \apbo[14]  ;
   wire \apbo[13]  ;
   wire \apbo[12]  ;
   wire \apbo[11]  ;
   wire \apbo[10]  ;
   wire \apbo[9]  ;
   wire \apbo[8]  ;
   wire \apbo[7]  ;
   wire \apbo[6]  ;
   wire \apbo[5]  ;
   wire \apbo[4]  ;
   wire \apbo[3]  ;
   wire \apbo[2]  ;
   wire \apbo[1]  ;
   wire \apbo[0]  ;
   wire testout ;
   wire uarto_rTSN ;
   wire uarto_tXD ;
   wire uarto_sCALER_31_ ;
   wire uarto_sCALER_30_ ;
   wire uarto_sCALER_29_ ;
   wire uarto_sCALER_28_ ;
   wire uarto_sCALER_27_ ;
   wire uarto_sCALER_26_ ;
   wire uarto_sCALER_25_ ;
   wire uarto_sCALER_24_ ;
   wire uarto_sCALER_23_ ;
   wire uarto_sCALER_22_ ;
   wire uarto_sCALER_21_ ;
   wire uarto_sCALER_20_ ;
   wire uarto_sCALER_19_ ;
   wire uarto_sCALER_18_ ;
   wire uarto_sCALER_17_ ;
   wire uarto_sCALER_16_ ;
   wire uarto_sCALER_15_ ;
   wire uarto_sCALER_14_ ;
   wire uarto_sCALER_13_ ;
   wire uarto_sCALER_12_ ;
   wire uarto_sCALER_11_ ;
   wire uarto_sCALER_10_ ;
   wire uarto_sCALER_9_ ;
   wire uarto_sCALER_8_ ;
   wire uarto_sCALER_7_ ;
   wire uarto_sCALER_6_ ;
   wire uarto_sCALER_5_ ;
   wire uarto_sCALER_4_ ;
   wire uarto_sCALER_3_ ;
   wire uarto_sCALER_2_ ;
   wire uarto_sCALER_1_ ;
   wire uarto_sCALER_0_ ;
   wire uarto_tXEN ;
   wire uarto_fLOW ;
   wire uarto_rXEN ;

   wire [0:(8*NAMELENGTH-1)] cur_StmtName;
   assign cur_StmtName = StmtNames[cur_stmt] ;


   apbuart dut( 
     .rst ( rst ),
     .clk ( clk ),
     .testen ( testen ),
     .testrst ( testrst ),
     .testin ( testin ),
     .apbi_pSEL_0_ ( apbi_pSEL_0_ ),
     .apbi_pSEL_1_ ( apbi_pSEL_1_ ),
     .apbi_pSEL_2_ ( apbi_pSEL_2_ ),
     .apbi_pSEL_3_ ( apbi_pSEL_3_ ),
     .apbi_pSEL_4_ ( apbi_pSEL_4_ ),
     .apbi_pSEL_5_ ( apbi_pSEL_5_ ),
     .apbi_pSEL_6_ ( apbi_pSEL_6_ ),
     .apbi_pSEL_7_ ( apbi_pSEL_7_ ),
     .apbi_pSEL_8_ ( apbi_pSEL_8_ ),
     .apbi_pSEL_9_ ( apbi_pSEL_9_ ),
     .apbi_pSEL_10_ ( apbi_pSEL_10_ ),
     .apbi_pSEL_11_ ( apbi_pSEL_11_ ),
     .apbi_pSEL_12_ ( apbi_pSEL_12_ ),
     .apbi_pSEL_13_ ( apbi_pSEL_13_ ),
     .apbi_pSEL_14_ ( apbi_pSEL_14_ ),
     .apbi_pSEL_15_ ( apbi_pSEL_15_ ),
     .apbi_pENABLE ( apbi_pENABLE ),
     .apbi_pADDR_31_ ( apbi_pADDR_31_ ),
     .apbi_pADDR_30_ ( apbi_pADDR_30_ ),
     .apbi_pADDR_29_ ( apbi_pADDR_29_ ),
     .apbi_pADDR_28_ ( apbi_pADDR_28_ ),
     .apbi_pADDR_27_ ( apbi_pADDR_27_ ),
     .apbi_pADDR_26_ ( apbi_pADDR_26_ ),
     .apbi_pADDR_25_ ( apbi_pADDR_25_ ),
     .apbi_pADDR_24_ ( apbi_pADDR_24_ ),
     .apbi_pADDR_23_ ( apbi_pADDR_23_ ),
     .apbi_pADDR_22_ ( apbi_pADDR_22_ ),
     .apbi_pADDR_21_ ( apbi_pADDR_21_ ),
     .apbi_pADDR_20_ ( apbi_pADDR_20_ ),
     .apbi_pADDR_19_ ( apbi_pADDR_19_ ),
     .apbi_pADDR_18_ ( apbi_pADDR_18_ ),
     .apbi_pADDR_17_ ( apbi_pADDR_17_ ),
     .apbi_pADDR_16_ ( apbi_pADDR_16_ ),
     .apbi_pADDR_15_ ( apbi_pADDR_15_ ),
     .apbi_pADDR_14_ ( apbi_pADDR_14_ ),
     .apbi_pADDR_13_ ( apbi_pADDR_13_ ),
     .apbi_pADDR_12_ ( apbi_pADDR_12_ ),
     .apbi_pADDR_11_ ( apbi_pADDR_11_ ),
     .apbi_pADDR_10_ ( apbi_pADDR_10_ ),
     .apbi_pADDR_9_ ( apbi_pADDR_9_ ),
     .apbi_pADDR_8_ ( apbi_pADDR_8_ ),
     .apbi_pADDR_7_ ( apbi_pADDR_7_ ),
     .apbi_pADDR_6_ ( apbi_pADDR_6_ ),
     .apbi_pADDR_5_ ( apbi_pADDR_5_ ),
     .apbi_pADDR_4_ ( apbi_pADDR_4_ ),
     .apbi_pADDR_3_ ( apbi_pADDR_3_ ),
     .apbi_pADDR_2_ ( apbi_pADDR_2_ ),
     .apbi_pADDR_1_ ( apbi_pADDR_1_ ),
     .apbi_pADDR_0_ ( apbi_pADDR_0_ ),
     .apbi_pWRITE ( apbi_pWRITE ),
     .apbi_pWDATA_31_ ( apbi_pWDATA_31_ ),
     .apbi_pWDATA_30_ ( apbi_pWDATA_30_ ),
     .apbi_pWDATA_29_ ( apbi_pWDATA_29_ ),
     .apbi_pWDATA_28_ ( apbi_pWDATA_28_ ),
     .apbi_pWDATA_27_ ( apbi_pWDATA_27_ ),
     .apbi_pWDATA_26_ ( apbi_pWDATA_26_ ),
     .apbi_pWDATA_25_ ( apbi_pWDATA_25_ ),
     .apbi_pWDATA_24_ ( apbi_pWDATA_24_ ),
     .apbi_pWDATA_23_ ( apbi_pWDATA_23_ ),
     .apbi_pWDATA_22_ ( apbi_pWDATA_22_ ),
     .apbi_pWDATA_21_ ( apbi_pWDATA_21_ ),
     .apbi_pWDATA_20_ ( apbi_pWDATA_20_ ),
     .apbi_pWDATA_19_ ( apbi_pWDATA_19_ ),
     .apbi_pWDATA_18_ ( apbi_pWDATA_18_ ),
     .apbi_pWDATA_17_ ( apbi_pWDATA_17_ ),
     .apbi_pWDATA_16_ ( apbi_pWDATA_16_ ),
     .apbi_pWDATA_15_ ( apbi_pWDATA_15_ ),
     .apbi_pWDATA_14_ ( apbi_pWDATA_14_ ),
     .apbi_pWDATA_13_ ( apbi_pWDATA_13_ ),
     .apbi_pWDATA_12_ ( apbi_pWDATA_12_ ),
     .apbi_pWDATA_11_ ( apbi_pWDATA_11_ ),
     .apbi_pWDATA_10_ ( apbi_pWDATA_10_ ),
     .apbi_pWDATA_9_ ( apbi_pWDATA_9_ ),
     .apbi_pWDATA_8_ ( apbi_pWDATA_8_ ),
     .apbi_pWDATA_7_ ( apbi_pWDATA_7_ ),
     .apbi_pWDATA_6_ ( apbi_pWDATA_6_ ),
     .apbi_pWDATA_5_ ( apbi_pWDATA_5_ ),
     .apbi_pWDATA_4_ ( apbi_pWDATA_4_ ),
     .apbi_pWDATA_3_ ( apbi_pWDATA_3_ ),
     .apbi_pWDATA_2_ ( apbi_pWDATA_2_ ),
     .apbi_pWDATA_1_ ( apbi_pWDATA_1_ ),
     .apbi_pWDATA_0_ ( apbi_pWDATA_0_ ),
     .apbi_pIRQ_31_ ( apbi_pIRQ_31_ ),
     .apbi_pIRQ_30_ ( apbi_pIRQ_30_ ),
     .apbi_pIRQ_29_ ( apbi_pIRQ_29_ ),
     .apbi_pIRQ_28_ ( apbi_pIRQ_28_ ),
     .apbi_pIRQ_27_ ( apbi_pIRQ_27_ ),
     .apbi_pIRQ_26_ ( apbi_pIRQ_26_ ),
     .apbi_pIRQ_25_ ( apbi_pIRQ_25_ ),
     .apbi_pIRQ_24_ ( apbi_pIRQ_24_ ),
     .apbi_pIRQ_23_ ( apbi_pIRQ_23_ ),
     .apbi_pIRQ_22_ ( apbi_pIRQ_22_ ),
     .apbi_pIRQ_21_ ( apbi_pIRQ_21_ ),
     .apbi_pIRQ_20_ ( apbi_pIRQ_20_ ),
     .apbi_pIRQ_19_ ( apbi_pIRQ_19_ ),
     .apbi_pIRQ_18_ ( apbi_pIRQ_18_ ),
     .apbi_pIRQ_17_ ( apbi_pIRQ_17_ ),
     .apbi_pIRQ_16_ ( apbi_pIRQ_16_ ),
     .apbi_pIRQ_15_ ( apbi_pIRQ_15_ ),
     .apbi_pIRQ_14_ ( apbi_pIRQ_14_ ),
     .apbi_pIRQ_13_ ( apbi_pIRQ_13_ ),
     .apbi_pIRQ_12_ ( apbi_pIRQ_12_ ),
     .apbi_pIRQ_11_ ( apbi_pIRQ_11_ ),
     .apbi_pIRQ_10_ ( apbi_pIRQ_10_ ),
     .apbi_pIRQ_9_ ( apbi_pIRQ_9_ ),
     .apbi_pIRQ_8_ ( apbi_pIRQ_8_ ),
     .apbi_pIRQ_7_ ( apbi_pIRQ_7_ ),
     .apbi_pIRQ_6_ ( apbi_pIRQ_6_ ),
     .apbi_pIRQ_5_ ( apbi_pIRQ_5_ ),
     .apbi_pIRQ_4_ ( apbi_pIRQ_4_ ),
     .apbi_pIRQ_3_ ( apbi_pIRQ_3_ ),
     .apbi_pIRQ_2_ ( apbi_pIRQ_2_ ),
     .apbi_pIRQ_1_ ( apbi_pIRQ_1_ ),
     .apbi_pIRQ_0_ ( apbi_pIRQ_0_ ),
     .apbi_tESTEN ( apbi_tESTEN ),
     .apbi_tESTRST ( apbi_tESTRST ),
     .apbi_sCANEN ( apbi_sCANEN ),
     .apbi_tESTOEN ( apbi_tESTOEN ),
     .apbi_tESTIN_3_ ( apbi_tESTIN_3_ ),
     .apbi_tESTIN_2_ ( apbi_tESTIN_2_ ),
     .apbi_tESTIN_1_ ( apbi_tESTIN_1_ ),
     .apbi_tESTIN_0_ ( apbi_tESTIN_0_ ),
     .uarti_rXD ( uarti_rXD ),
     .uarti_cTSN ( uarti_cTSN ),
     .uarti_eXTCLK ( uarti_eXTCLK ),
     .apbo ( { \apbo[131] ,
        \apbo[130] ,
        \apbo[129] ,
        \apbo[128] ,
        \apbo[127] ,
        \apbo[126] ,
        \apbo[125] ,
        \apbo[124] ,
        \apbo[123] ,
        \apbo[122] ,
        \apbo[121] ,
        \apbo[120] ,
        \apbo[119] ,
        \apbo[118] ,
        \apbo[117] ,
        \apbo[116] ,
        \apbo[115] ,
        \apbo[114] ,
        \apbo[113] ,
        \apbo[112] ,
        \apbo[111] ,
        \apbo[110] ,
        \apbo[109] ,
        \apbo[108] ,
        \apbo[107] ,
        \apbo[106] ,
        \apbo[105] ,
        \apbo[104] ,
        \apbo[103] ,
        \apbo[102] ,
        \apbo[101] ,
        \apbo[100] ,
        \apbo[99] ,
        \apbo[98] ,
        \apbo[97] ,
        \apbo[96] ,
        \apbo[95] ,
        \apbo[94] ,
        \apbo[93] ,
        \apbo[92] ,
        \apbo[91] ,
        \apbo[90] ,
        \apbo[89] ,
        \apbo[88] ,
        \apbo[87] ,
        \apbo[86] ,
        \apbo[85] ,
        \apbo[84] ,
        \apbo[83] ,
        \apbo[82] ,
        \apbo[81] ,
        \apbo[80] ,
        \apbo[79] ,
        \apbo[78] ,
        \apbo[77] ,
        \apbo[76] ,
        \apbo[75] ,
        \apbo[74] ,
        \apbo[73] ,
        \apbo[72] ,
        \apbo[71] ,
        \apbo[70] ,
        \apbo[69] ,
        \apbo[68] ,
        \apbo[67] ,
        \apbo[66] ,
        \apbo[65] ,
        \apbo[64] ,
        \apbo[63] ,
        \apbo[62] ,
        \apbo[61] ,
        \apbo[60] ,
        \apbo[59] ,
        \apbo[58] ,
        \apbo[57] ,
        \apbo[56] ,
        \apbo[55] ,
        \apbo[54] ,
        \apbo[53] ,
        \apbo[52] ,
        \apbo[51] ,
        \apbo[50] ,
        \apbo[49] ,
        \apbo[48] ,
        \apbo[47] ,
        \apbo[46] ,
        \apbo[45] ,
        \apbo[44] ,
        \apbo[43] ,
        \apbo[42] ,
        \apbo[41] ,
        \apbo[40] ,
        \apbo[39] ,
        \apbo[38] ,
        \apbo[37] ,
        \apbo[36] ,
        \apbo[35] ,
        \apbo[34] ,
        \apbo[33] ,
        \apbo[32] ,
        \apbo[31] ,
        \apbo[30] ,
        \apbo[29] ,
        \apbo[28] ,
        \apbo[27] ,
        \apbo[26] ,
        \apbo[25] ,
        \apbo[24] ,
        \apbo[23] ,
        \apbo[22] ,
        \apbo[21] ,
        \apbo[20] ,
        \apbo[19] ,
        \apbo[18] ,
        \apbo[17] ,
        \apbo[16] ,
        \apbo[15] ,
        \apbo[14] ,
        \apbo[13] ,
        \apbo[12] ,
        \apbo[11] ,
        \apbo[10] ,
        \apbo[9] ,
        \apbo[8] ,
        \apbo[7] ,
        \apbo[6] ,
        \apbo[5] ,
        \apbo[4] ,
        \apbo[3] ,
        \apbo[2] ,
        \apbo[1] ,
        \apbo[0] } ),
     .testout ( testout ),
     .uarto_rTSN ( uarto_rTSN ),
     .uarto_tXD ( uarto_tXD ),
     .uarto_sCALER_31_ ( uarto_sCALER_31_ ),
     .uarto_sCALER_30_ ( uarto_sCALER_30_ ),
     .uarto_sCALER_29_ ( uarto_sCALER_29_ ),
     .uarto_sCALER_28_ ( uarto_sCALER_28_ ),
     .uarto_sCALER_27_ ( uarto_sCALER_27_ ),
     .uarto_sCALER_26_ ( uarto_sCALER_26_ ),
     .uarto_sCALER_25_ ( uarto_sCALER_25_ ),
     .uarto_sCALER_24_ ( uarto_sCALER_24_ ),
     .uarto_sCALER_23_ ( uarto_sCALER_23_ ),
     .uarto_sCALER_22_ ( uarto_sCALER_22_ ),
     .uarto_sCALER_21_ ( uarto_sCALER_21_ ),
     .uarto_sCALER_20_ ( uarto_sCALER_20_ ),
     .uarto_sCALER_19_ ( uarto_sCALER_19_ ),
     .uarto_sCALER_18_ ( uarto_sCALER_18_ ),
     .uarto_sCALER_17_ ( uarto_sCALER_17_ ),
     .uarto_sCALER_16_ ( uarto_sCALER_16_ ),
     .uarto_sCALER_15_ ( uarto_sCALER_15_ ),
     .uarto_sCALER_14_ ( uarto_sCALER_14_ ),
     .uarto_sCALER_13_ ( uarto_sCALER_13_ ),
     .uarto_sCALER_12_ ( uarto_sCALER_12_ ),
     .uarto_sCALER_11_ ( uarto_sCALER_11_ ),
     .uarto_sCALER_10_ ( uarto_sCALER_10_ ),
     .uarto_sCALER_9_ ( uarto_sCALER_9_ ),
     .uarto_sCALER_8_ ( uarto_sCALER_8_ ),
     .uarto_sCALER_7_ ( uarto_sCALER_7_ ),
     .uarto_sCALER_6_ ( uarto_sCALER_6_ ),
     .uarto_sCALER_5_ ( uarto_sCALER_5_ ),
     .uarto_sCALER_4_ ( uarto_sCALER_4_ ),
     .uarto_sCALER_3_ ( uarto_sCALER_3_ ),
     .uarto_sCALER_2_ ( uarto_sCALER_2_ ),
     .uarto_sCALER_1_ ( uarto_sCALER_1_ ),
     .uarto_sCALER_0_ ( uarto_sCALER_0_ ),
     .uarto_tXEN ( uarto_tXEN ),
     .uarto_fLOW ( uarto_fLOW ),
     .uarto_rXEN ( uarto_rXEN )
  );


   task save_context;
     begin
       wft_id_s = the_wft_id;
       TMPINSIGS_V_S = TMPINSIGS_V;
       TMPOUTSIGS_V_S = TMPOUTSIGS_V;
       TMPINSIGS_T_S = TMPINSIGS_T;
       TMPOUTSIGS_T_S = TMPOUTSIGS_T;
       ALLOUTSIGIDS_S = ALLOUTSIGIDS;
       ALLINSIGIDS_S = ALLINSIGIDS;
     end
   endtask 

   task restore_context;
     begin
       the_wft_id = wft_id_s;
       TMPINSIGS_V = TMPINSIGS_V_S;
       TMPOUTSIGS_V = TMPOUTSIGS_V_S;
       TMPINSIGS_T = TMPINSIGS_T_S;
       TMPOUTSIGS_T = TMPOUTSIGS_T_S;
       ALLOUTSIGIDS = ALLOUTSIGIDS_S;
       ALLINSIGIDS = ALLINSIGIDS_S;
     end
   endtask 

   task resolve_signal;
     input reg [8:0] sid;
   begin
     if (SignalIDType[sid] != 3) the_sids[0] = sid;
     else begin
       case (sid)
         'd300: begin // _pi
                 the_sids[129] = 53; the_sids[128] = 43; the_sids[127] = 42; the_sids[126] = 41; the_sids[125] = 40; the_sids[124] = 39; the_sids[123] = 38; the_sids[122] = 37; the_sids[121] = 36; the_sids[120] = 35; the_sids[119] = 34; the_sids[118] = 52; the_sids[117] = 33; the_sids[116] = 32; the_sids[115] = 31; the_sids[114] = 30; the_sids[113] = 29; the_sids[112] = 28; the_sids[111] = 27; the_sids[110] = 26; the_sids[109] = 25; the_sids[108] = 24; the_sids[107] = 51; the_sids[106] = 23; the_sids[105] = 22; the_sids[104] = 50; the_sids[103] = 49; the_sids[102] = 48; the_sids[101] = 47; the_sids[100] = 46; the_sids[99] = 45; the_sids[98] = 44; the_sids[97] = 21; the_sids[96] = 118; the_sids[95] = 108; the_sids[94] = 107; the_sids[93] = 106; the_sids[92] = 105; the_sids[91] = 104; the_sids[90] = 103; the_sids[89] = 102; the_sids[88] = 101; the_sids[87] = 100; the_sids[86] = 99; the_sids[85] = 117; the_sids[84] = 98; the_sids[83] = 97; the_sids[82] = 96; the_sids[81] = 95; the_sids[80] = 94; the_sids[79] = 93; the_sids[78] = 92; the_sids[77] = 91; the_sids[76] = 90; the_sids[75] = 89; the_sids[74] = 116; the_sids[73] = 88; the_sids[72] = 87; the_sids[71] = 115; the_sids[70] = 114; the_sids[69] = 113; the_sids[68] = 112; the_sids[67] = 111; the_sids[66] = 110; the_sids[65] = 109; the_sids[64] = 5; the_sids[63] = 15; the_sids[62] = 16; the_sids[61] = 17; the_sids[60] = 18; the_sids[59] = 19; the_sids[58] = 20; the_sids[57] = 6; the_sids[56] = 7; the_sids[55] = 8; the_sids[54] = 9; the_sids[53] = 10; the_sids[52] = 11; the_sids[51] = 12; the_sids[50] = 13; the_sids[49] = 14; the_sids[48] = 86; the_sids[47] = 76; the_sids[46] = 75; the_sids[45] = 74; the_sids[44] = 73; the_sids[43] = 72; the_sids[42] = 71; the_sids[41] = 70; the_sids[40] = 69; the_sids[39] = 68; the_sids[38] = 67; the_sids[37] = 85; the_sids[36] = 66; the_sids[35] = 65; the_sids[34] = 64; the_sids[33] = 63; the_sids[32] = 62; the_sids[31] = 61; the_sids[30] = 60; the_sids[29] = 59; the_sids[28] = 58; the_sids[27] = 57; the_sids[26] = 84; the_sids[25] = 56; the_sids[24] = 55; the_sids[23] = 83; the_sids[22] = 82; the_sids[21] = 81; the_sids[20] = 80; the_sids[19] = 79; the_sids[18] = 78; the_sids[17] = 77; the_sids[16] = 54; the_sids[15] = 121; the_sids[14] = 119; the_sids[13] = 126; the_sids[12] = 125; the_sids[11] = 124; the_sids[10] = 123; the_sids[9] = 122; the_sids[8] = 120; the_sids[7] = 1; the_sids[6] = 0; the_sids[5] = 2; the_sids[4] = 4; the_sids[3] = 3; the_sids[2] = 128; the_sids[1] = 129;
                 the_sids[0] = 127;
               end
         'd301: begin // all_inputs
                 the_sids[129] = 53; the_sids[128] = 43; the_sids[127] = 42; the_sids[126] = 41; the_sids[125] = 40; the_sids[124] = 39; the_sids[123] = 38; the_sids[122] = 37; the_sids[121] = 36; the_sids[120] = 35; the_sids[119] = 34; the_sids[118] = 52; the_sids[117] = 33; the_sids[116] = 32; the_sids[115] = 31; the_sids[114] = 30; the_sids[113] = 29; the_sids[112] = 28; the_sids[111] = 27; the_sids[110] = 26; the_sids[109] = 25; the_sids[108] = 24; the_sids[107] = 51; the_sids[106] = 23; the_sids[105] = 22; the_sids[104] = 50; the_sids[103] = 49; the_sids[102] = 48; the_sids[101] = 47; the_sids[100] = 46; the_sids[99] = 45; the_sids[98] = 44; the_sids[97] = 21; the_sids[96] = 118; the_sids[95] = 108; the_sids[94] = 107; the_sids[93] = 106; the_sids[92] = 105; the_sids[91] = 104; the_sids[90] = 103; the_sids[89] = 102; the_sids[88] = 101; the_sids[87] = 100; the_sids[86] = 99; the_sids[85] = 117; the_sids[84] = 98; the_sids[83] = 97; the_sids[82] = 96; the_sids[81] = 95; the_sids[80] = 94; the_sids[79] = 93; the_sids[78] = 92; the_sids[77] = 91; the_sids[76] = 90; the_sids[75] = 89; the_sids[74] = 116; the_sids[73] = 88; the_sids[72] = 87; the_sids[71] = 115; the_sids[70] = 114; the_sids[69] = 113; the_sids[68] = 112; the_sids[67] = 111; the_sids[66] = 110; the_sids[65] = 109; the_sids[64] = 5; the_sids[63] = 15; the_sids[62] = 16; the_sids[61] = 17; the_sids[60] = 18; the_sids[59] = 19; the_sids[58] = 20; the_sids[57] = 6; the_sids[56] = 7; the_sids[55] = 8; the_sids[54] = 9; the_sids[53] = 10; the_sids[52] = 11; the_sids[51] = 12; the_sids[50] = 13; the_sids[49] = 14; the_sids[48] = 86; the_sids[47] = 76; the_sids[46] = 75; the_sids[45] = 74; the_sids[44] = 73; the_sids[43] = 72; the_sids[42] = 71; the_sids[41] = 70; the_sids[40] = 69; the_sids[39] = 68; the_sids[38] = 67; the_sids[37] = 85; the_sids[36] = 66; the_sids[35] = 65; the_sids[34] = 64; the_sids[33] = 63; the_sids[32] = 62; the_sids[31] = 61; the_sids[30] = 60; the_sids[29] = 59; the_sids[28] = 58; the_sids[27] = 57; the_sids[26] = 84; the_sids[25] = 56; the_sids[24] = 55; the_sids[23] = 83; the_sids[22] = 82; the_sids[21] = 81; the_sids[20] = 80; the_sids[19] = 79; the_sids[18] = 78; the_sids[17] = 77; the_sids[16] = 54; the_sids[15] = 121; the_sids[14] = 119; the_sids[13] = 126; the_sids[12] = 125; the_sids[11] = 124; the_sids[10] = 123; the_sids[9] = 122; the_sids[8] = 120; the_sids[7] = 1; the_sids[6] = 0; the_sids[5] = 2; the_sids[4] = 4; the_sids[3] = 3; the_sids[2] = 128; the_sids[1] = 129;
                 the_sids[0] = 127;
               end
         'd302: begin // _po
                 the_sids[169] = 225; the_sids[168] = 215; the_sids[167] = 214; the_sids[166] = 213; the_sids[165] = 212; the_sids[164] = 211; the_sids[163] = 210; the_sids[162] = 209; the_sids[161] = 208; the_sids[160] = 207; the_sids[159] = 206; the_sids[158] = 224; the_sids[157] = 205; the_sids[156] = 204; the_sids[155] = 203; the_sids[154] = 202; the_sids[153] = 201; the_sids[152] = 200; the_sids[151] = 199; the_sids[150] = 198; the_sids[149] = 197; the_sids[148] = 196; the_sids[147] = 223; the_sids[146] = 195; the_sids[145] = 194; the_sids[144] = 222; the_sids[143] = 221; the_sids[142] = 220; the_sids[141] = 219; the_sids[140] = 218; the_sids[139] = 217; the_sids[138] = 216; the_sids[137] = 257; the_sids[136] = 247; the_sids[135] = 246; the_sids[134] = 245; the_sids[133] = 244; the_sids[132] = 243; the_sids[131] = 242; the_sids[130] = 241; the_sids[129] = 240; the_sids[128] = 239; the_sids[127] = 238; the_sids[126] = 256; the_sids[125] = 237; the_sids[124] = 236; the_sids[123] = 235; the_sids[122] = 234; the_sids[121] = 233; the_sids[120] = 232; the_sids[119] = 231; the_sids[118] = 230; the_sids[117] = 229; the_sids[116] = 228; the_sids[115] = 255; the_sids[114] = 227; the_sids[113] = 226; the_sids[112] = 254; the_sids[111] = 253; the_sids[110] = 252; the_sids[109] = 251; the_sids[108] = 250; the_sids[107] = 249; the_sids[106] = 248; the_sids[105] = 261; the_sids[104] = 260; the_sids[103] = 259; the_sids[102] = 258; the_sids[101] = 193; the_sids[100] = 183; the_sids[99] = 182; the_sids[98] = 181; the_sids[97] = 180; the_sids[96] = 179; the_sids[95] = 178; the_sids[94] = 177; the_sids[93] = 176; the_sids[92] = 175; the_sids[91] = 174; the_sids[90] = 192; the_sids[89] = 173; the_sids[88] = 172; the_sids[87] = 171; the_sids[86] = 170; the_sids[85] = 169; the_sids[84] = 168; the_sids[83] = 167; the_sids[82] = 166; the_sids[81] = 165; the_sids[80] = 164; the_sids[79] = 191; the_sids[78] = 163; the_sids[77] = 162; the_sids[76] = 190; the_sids[75] = 189; the_sids[74] = 188; the_sids[73] = 187; the_sids[72] = 186; the_sids[71] = 185; the_sids[70] = 184; the_sids[69] = 161; the_sids[68] = 151; the_sids[67] = 150; the_sids[66] = 149; the_sids[65] = 148; the_sids[64] = 147; the_sids[63] = 146; the_sids[62] = 145; the_sids[61] = 144; the_sids[60] = 143; the_sids[59] = 142; the_sids[58] = 160; the_sids[57] = 141; the_sids[56] = 140; the_sids[55] = 139; the_sids[54] = 138; the_sids[53] = 137; the_sids[52] = 136; the_sids[51] = 135; the_sids[50] = 134; the_sids[49] = 133; the_sids[48] = 132; the_sids[47] = 159; the_sids[46] = 131; the_sids[45] = 130; the_sids[44] = 158; the_sids[43] = 157; the_sids[42] = 156; the_sids[41] = 155; the_sids[40] = 154; the_sids[39] = 153; the_sids[38] = 152; the_sids[37] = 262; the_sids[36] = 298; the_sids[35] = 263; the_sids[34] = 299; the_sids[33] = 296; the_sids[32] = 286; the_sids[31] = 285; the_sids[30] = 284; the_sids[29] = 283; the_sids[28] = 282; the_sids[27] = 281; the_sids[26] = 280; the_sids[25] = 279; the_sids[24] = 278; the_sids[23] = 277; the_sids[22] = 295; the_sids[21] = 276; the_sids[20] = 275; the_sids[19] = 274; the_sids[18] = 273; the_sids[17] = 272; the_sids[16] = 271; the_sids[15] = 270; the_sids[14] = 269; the_sids[13] = 268; the_sids[12] = 267; the_sids[11] = 294; the_sids[10] = 266; the_sids[9] = 265; the_sids[8] = 293; the_sids[7] = 292; the_sids[6] = 291; the_sids[5] = 290; the_sids[4] = 289; the_sids[3] = 288; the_sids[2] = 287; the_sids[1] = 264;
                 the_sids[0] = 297;
               end
         'd303: begin // _si
                
                 the_sids[0] = 4;
               end
         'd304: begin // all_outputs
                 the_sids[169] = 225; the_sids[168] = 215; the_sids[167] = 214; the_sids[166] = 213; the_sids[165] = 212; the_sids[164] = 211; the_sids[163] = 210; the_sids[162] = 209; the_sids[161] = 208; the_sids[160] = 207; the_sids[159] = 206; the_sids[158] = 224; the_sids[157] = 205; the_sids[156] = 204; the_sids[155] = 203; the_sids[154] = 202; the_sids[153] = 201; the_sids[152] = 200; the_sids[151] = 199; the_sids[150] = 198; the_sids[149] = 197; the_sids[148] = 196; the_sids[147] = 223; the_sids[146] = 195; the_sids[145] = 194; the_sids[144] = 222; the_sids[143] = 221; the_sids[142] = 220; the_sids[141] = 219; the_sids[140] = 218; the_sids[139] = 217; the_sids[138] = 216; the_sids[137] = 257; the_sids[136] = 247; the_sids[135] = 246; the_sids[134] = 245; the_sids[133] = 244; the_sids[132] = 243; the_sids[131] = 242; the_sids[130] = 241; the_sids[129] = 240; the_sids[128] = 239; the_sids[127] = 238; the_sids[126] = 256; the_sids[125] = 237; the_sids[124] = 236; the_sids[123] = 235; the_sids[122] = 234; the_sids[121] = 233; the_sids[120] = 232; the_sids[119] = 231; the_sids[118] = 230; the_sids[117] = 229; the_sids[116] = 228; the_sids[115] = 255; the_sids[114] = 227; the_sids[113] = 226; the_sids[112] = 254; the_sids[111] = 253; the_sids[110] = 252; the_sids[109] = 251; the_sids[108] = 250; the_sids[107] = 249; the_sids[106] = 248; the_sids[105] = 261; the_sids[104] = 260; the_sids[103] = 259; the_sids[102] = 258; the_sids[101] = 193; the_sids[100] = 183; the_sids[99] = 182; the_sids[98] = 181; the_sids[97] = 180; the_sids[96] = 179; the_sids[95] = 178; the_sids[94] = 177; the_sids[93] = 176; the_sids[92] = 175; the_sids[91] = 174; the_sids[90] = 192; the_sids[89] = 173; the_sids[88] = 172; the_sids[87] = 171; the_sids[86] = 170; the_sids[85] = 169; the_sids[84] = 168; the_sids[83] = 167; the_sids[82] = 166; the_sids[81] = 165; the_sids[80] = 164; the_sids[79] = 191; the_sids[78] = 163; the_sids[77] = 162; the_sids[76] = 190; the_sids[75] = 189; the_sids[74] = 188; the_sids[73] = 187; the_sids[72] = 186; the_sids[71] = 185; the_sids[70] = 184; the_sids[69] = 161; the_sids[68] = 151; the_sids[67] = 150; the_sids[66] = 149; the_sids[65] = 148; the_sids[64] = 147; the_sids[63] = 146; the_sids[62] = 145; the_sids[61] = 144; the_sids[60] = 143; the_sids[59] = 142; the_sids[58] = 160; the_sids[57] = 141; the_sids[56] = 140; the_sids[55] = 139; the_sids[54] = 138; the_sids[53] = 137; the_sids[52] = 136; the_sids[51] = 135; the_sids[50] = 134; the_sids[49] = 133; the_sids[48] = 132; the_sids[47] = 159; the_sids[46] = 131; the_sids[45] = 130; the_sids[44] = 158; the_sids[43] = 157; the_sids[42] = 156; the_sids[41] = 155; the_sids[40] = 154; the_sids[39] = 153; the_sids[38] = 152; the_sids[37] = 262; the_sids[36] = 298; the_sids[35] = 263; the_sids[34] = 299; the_sids[33] = 296; the_sids[32] = 286; the_sids[31] = 285; the_sids[30] = 284; the_sids[29] = 283; the_sids[28] = 282; the_sids[27] = 281; the_sids[26] = 280; the_sids[25] = 279; the_sids[24] = 278; the_sids[23] = 277; the_sids[22] = 295; the_sids[21] = 276; the_sids[20] = 275; the_sids[19] = 274; the_sids[18] = 273; the_sids[17] = 272; the_sids[16] = 271; the_sids[15] = 270; the_sids[14] = 269; the_sids[13] = 268; the_sids[12] = 267; the_sids[11] = 294; the_sids[10] = 266; the_sids[9] = 265; the_sids[8] = 293; the_sids[7] = 292; the_sids[6] = 291; the_sids[5] = 290; the_sids[4] = 289; the_sids[3] = 288; the_sids[2] = 287; the_sids[1] = 264;
                 the_sids[0] = 297;
               end
         'd305: begin // _clk
                
                 the_sids[0] = 1;
               end
         'd306: begin // _so
                
                 the_sids[0] = 262;
               end
          default: begin $display("\nXTB Error: unrecognized signal id %d (valid range is 0..%d). Exiting...",sid, SIG_IDS); $finish; end
       endcase
     end
   end
   endtask

   task get_stb_sig;
     input reg [8:0] sid ;
     output reg [MAX_WIDTH-1:0] strsig;
   begin
     case (sid)
       'd130:	strsig[0:0] = 	\apbo[131]  ;
       'd131:	strsig[0:0] = 	\apbo[130]  ;
       'd132:	strsig[0:0] = 	\apbo[129]  ;
       'd133:	strsig[0:0] = 	\apbo[128]  ;
       'd134:	strsig[0:0] = 	\apbo[127]  ;
       'd135:	strsig[0:0] = 	\apbo[126]  ;
       'd136:	strsig[0:0] = 	\apbo[125]  ;
       'd137:	strsig[0:0] = 	\apbo[124]  ;
       'd138:	strsig[0:0] = 	\apbo[123]  ;
       'd139:	strsig[0:0] = 	\apbo[122]  ;
       'd140:	strsig[0:0] = 	\apbo[121]  ;
       'd141:	strsig[0:0] = 	\apbo[120]  ;
       'd142:	strsig[0:0] = 	\apbo[119]  ;
       'd143:	strsig[0:0] = 	\apbo[118]  ;
       'd144:	strsig[0:0] = 	\apbo[117]  ;
       'd145:	strsig[0:0] = 	\apbo[116]  ;
       'd146:	strsig[0:0] = 	\apbo[115]  ;
       'd147:	strsig[0:0] = 	\apbo[114]  ;
       'd148:	strsig[0:0] = 	\apbo[113]  ;
       'd149:	strsig[0:0] = 	\apbo[112]  ;
       'd150:	strsig[0:0] = 	\apbo[111]  ;
       'd151:	strsig[0:0] = 	\apbo[110]  ;
       'd152:	strsig[0:0] = 	\apbo[109]  ;
       'd153:	strsig[0:0] = 	\apbo[108]  ;
       'd154:	strsig[0:0] = 	\apbo[107]  ;
       'd155:	strsig[0:0] = 	\apbo[106]  ;
       'd156:	strsig[0:0] = 	\apbo[105]  ;
       'd157:	strsig[0:0] = 	\apbo[104]  ;
       'd158:	strsig[0:0] = 	\apbo[103]  ;
       'd159:	strsig[0:0] = 	\apbo[102]  ;
       'd160:	strsig[0:0] = 	\apbo[101]  ;
       'd161:	strsig[0:0] = 	\apbo[100]  ;
       'd162:	strsig[0:0] = 	\apbo[99]  ;
       'd163:	strsig[0:0] = 	\apbo[98]  ;
       'd164:	strsig[0:0] = 	\apbo[97]  ;
       'd165:	strsig[0:0] = 	\apbo[96]  ;
       'd166:	strsig[0:0] = 	\apbo[95]  ;
       'd167:	strsig[0:0] = 	\apbo[94]  ;
       'd168:	strsig[0:0] = 	\apbo[93]  ;
       'd169:	strsig[0:0] = 	\apbo[92]  ;
       'd170:	strsig[0:0] = 	\apbo[91]  ;
       'd171:	strsig[0:0] = 	\apbo[90]  ;
       'd172:	strsig[0:0] = 	\apbo[89]  ;
       'd173:	strsig[0:0] = 	\apbo[88]  ;
       'd174:	strsig[0:0] = 	\apbo[87]  ;
       'd175:	strsig[0:0] = 	\apbo[86]  ;
       'd176:	strsig[0:0] = 	\apbo[85]  ;
       'd177:	strsig[0:0] = 	\apbo[84]  ;
       'd178:	strsig[0:0] = 	\apbo[83]  ;
       'd179:	strsig[0:0] = 	\apbo[82]  ;
       'd180:	strsig[0:0] = 	\apbo[81]  ;
       'd181:	strsig[0:0] = 	\apbo[80]  ;
       'd182:	strsig[0:0] = 	\apbo[79]  ;
       'd183:	strsig[0:0] = 	\apbo[78]  ;
       'd184:	strsig[0:0] = 	\apbo[77]  ;
       'd185:	strsig[0:0] = 	\apbo[76]  ;
       'd186:	strsig[0:0] = 	\apbo[75]  ;
       'd187:	strsig[0:0] = 	\apbo[74]  ;
       'd188:	strsig[0:0] = 	\apbo[73]  ;
       'd189:	strsig[0:0] = 	\apbo[72]  ;
       'd190:	strsig[0:0] = 	\apbo[71]  ;
       'd191:	strsig[0:0] = 	\apbo[70]  ;
       'd192:	strsig[0:0] = 	\apbo[69]  ;
       'd193:	strsig[0:0] = 	\apbo[68]  ;
       'd194:	strsig[0:0] = 	\apbo[67]  ;
       'd195:	strsig[0:0] = 	\apbo[66]  ;
       'd196:	strsig[0:0] = 	\apbo[65]  ;
       'd197:	strsig[0:0] = 	\apbo[64]  ;
       'd198:	strsig[0:0] = 	\apbo[63]  ;
       'd199:	strsig[0:0] = 	\apbo[62]  ;
       'd200:	strsig[0:0] = 	\apbo[61]  ;
       'd201:	strsig[0:0] = 	\apbo[60]  ;
       'd202:	strsig[0:0] = 	\apbo[59]  ;
       'd203:	strsig[0:0] = 	\apbo[58]  ;
       'd204:	strsig[0:0] = 	\apbo[57]  ;
       'd205:	strsig[0:0] = 	\apbo[56]  ;
       'd206:	strsig[0:0] = 	\apbo[55]  ;
       'd207:	strsig[0:0] = 	\apbo[54]  ;
       'd208:	strsig[0:0] = 	\apbo[53]  ;
       'd209:	strsig[0:0] = 	\apbo[52]  ;
       'd210:	strsig[0:0] = 	\apbo[51]  ;
       'd211:	strsig[0:0] = 	\apbo[50]  ;
       'd212:	strsig[0:0] = 	\apbo[49]  ;
       'd213:	strsig[0:0] = 	\apbo[48]  ;
       'd214:	strsig[0:0] = 	\apbo[47]  ;
       'd215:	strsig[0:0] = 	\apbo[46]  ;
       'd216:	strsig[0:0] = 	\apbo[45]  ;
       'd217:	strsig[0:0] = 	\apbo[44]  ;
       'd218:	strsig[0:0] = 	\apbo[43]  ;
       'd219:	strsig[0:0] = 	\apbo[42]  ;
       'd220:	strsig[0:0] = 	\apbo[41]  ;
       'd221:	strsig[0:0] = 	\apbo[40]  ;
       'd222:	strsig[0:0] = 	\apbo[39]  ;
       'd223:	strsig[0:0] = 	\apbo[38]  ;
       'd224:	strsig[0:0] = 	\apbo[37]  ;
       'd225:	strsig[0:0] = 	\apbo[36]  ;
       'd226:	strsig[0:0] = 	\apbo[35]  ;
       'd227:	strsig[0:0] = 	\apbo[34]  ;
       'd228:	strsig[0:0] = 	\apbo[33]  ;
       'd229:	strsig[0:0] = 	\apbo[32]  ;
       'd230:	strsig[0:0] = 	\apbo[31]  ;
       'd231:	strsig[0:0] = 	\apbo[30]  ;
       'd232:	strsig[0:0] = 	\apbo[29]  ;
       'd233:	strsig[0:0] = 	\apbo[28]  ;
       'd234:	strsig[0:0] = 	\apbo[27]  ;
       'd235:	strsig[0:0] = 	\apbo[26]  ;
       'd236:	strsig[0:0] = 	\apbo[25]  ;
       'd237:	strsig[0:0] = 	\apbo[24]  ;
       'd238:	strsig[0:0] = 	\apbo[23]  ;
       'd239:	strsig[0:0] = 	\apbo[22]  ;
       'd240:	strsig[0:0] = 	\apbo[21]  ;
       'd241:	strsig[0:0] = 	\apbo[20]  ;
       'd242:	strsig[0:0] = 	\apbo[19]  ;
       'd243:	strsig[0:0] = 	\apbo[18]  ;
       'd244:	strsig[0:0] = 	\apbo[17]  ;
       'd245:	strsig[0:0] = 	\apbo[16]  ;
       'd246:	strsig[0:0] = 	\apbo[15]  ;
       'd247:	strsig[0:0] = 	\apbo[14]  ;
       'd248:	strsig[0:0] = 	\apbo[13]  ;
       'd249:	strsig[0:0] = 	\apbo[12]  ;
       'd250:	strsig[0:0] = 	\apbo[11]  ;
       'd251:	strsig[0:0] = 	\apbo[10]  ;
       'd252:	strsig[0:0] = 	\apbo[9]  ;
       'd253:	strsig[0:0] = 	\apbo[8]  ;
       'd254:	strsig[0:0] = 	\apbo[7]  ;
       'd255:	strsig[0:0] = 	\apbo[6]  ;
       'd256:	strsig[0:0] = 	\apbo[5]  ;
       'd257:	strsig[0:0] = 	\apbo[4]  ;
       'd258:	strsig[0:0] = 	\apbo[3]  ;
       'd259:	strsig[0:0] = 	\apbo[2]  ;
       'd260:	strsig[0:0] = 	\apbo[1]  ;
       'd261:	strsig[0:0] = 	\apbo[0]  ;
       'd262:	strsig[0:0] = 	testout ;
       'd263:	strsig[0:0] = 	uarto_rTSN ;
       'd264:	strsig[0:0] = 	uarto_tXD ;
       'd265:	strsig[0:0] = 	uarto_sCALER_31_ ;
       'd266:	strsig[0:0] = 	uarto_sCALER_30_ ;
       'd267:	strsig[0:0] = 	uarto_sCALER_29_ ;
       'd268:	strsig[0:0] = 	uarto_sCALER_28_ ;
       'd269:	strsig[0:0] = 	uarto_sCALER_27_ ;
       'd270:	strsig[0:0] = 	uarto_sCALER_26_ ;
       'd271:	strsig[0:0] = 	uarto_sCALER_25_ ;
       'd272:	strsig[0:0] = 	uarto_sCALER_24_ ;
       'd273:	strsig[0:0] = 	uarto_sCALER_23_ ;
       'd274:	strsig[0:0] = 	uarto_sCALER_22_ ;
       'd275:	strsig[0:0] = 	uarto_sCALER_21_ ;
       'd276:	strsig[0:0] = 	uarto_sCALER_20_ ;
       'd277:	strsig[0:0] = 	uarto_sCALER_19_ ;
       'd278:	strsig[0:0] = 	uarto_sCALER_18_ ;
       'd279:	strsig[0:0] = 	uarto_sCALER_17_ ;
       'd280:	strsig[0:0] = 	uarto_sCALER_16_ ;
       'd281:	strsig[0:0] = 	uarto_sCALER_15_ ;
       'd282:	strsig[0:0] = 	uarto_sCALER_14_ ;
       'd283:	strsig[0:0] = 	uarto_sCALER_13_ ;
       'd284:	strsig[0:0] = 	uarto_sCALER_12_ ;
       'd285:	strsig[0:0] = 	uarto_sCALER_11_ ;
       'd286:	strsig[0:0] = 	uarto_sCALER_10_ ;
       'd287:	strsig[0:0] = 	uarto_sCALER_9_ ;
       'd288:	strsig[0:0] = 	uarto_sCALER_8_ ;
       'd289:	strsig[0:0] = 	uarto_sCALER_7_ ;
       'd290:	strsig[0:0] = 	uarto_sCALER_6_ ;
       'd291:	strsig[0:0] = 	uarto_sCALER_5_ ;
       'd292:	strsig[0:0] = 	uarto_sCALER_4_ ;
       'd293:	strsig[0:0] = 	uarto_sCALER_3_ ;
       'd294:	strsig[0:0] = 	uarto_sCALER_2_ ;
       'd295:	strsig[0:0] = 	uarto_sCALER_1_ ;
       'd296:	strsig[0:0] = 	uarto_sCALER_0_ ;
       'd297:	strsig[0:0] = 	uarto_tXEN ;
       'd298:	strsig[0:0] = 	uarto_fLOW ;
       'd299:	strsig[0:0] = 	uarto_rXEN ;
       default: begin $display("\nXTB Error: unrecognized output signal id %d. Exiting...",sid); $finish; end
     endcase
   end
   endtask

   task set_force_sig;
     input reg [SIG_IDS-1:0] sid ;
   begin
     case (sid)
       'd0: rst 	= ALLINSIGS[sid];
       'd1: clk 	= ALLINSIGS[sid];
       'd2: testen 	= ALLINSIGS[sid];
       'd3: testrst 	= ALLINSIGS[sid];
       'd4: testin 	= ALLINSIGS[sid];
       'd5: apbi_pSEL_0_ 	= ALLINSIGS[sid];
       'd6: apbi_pSEL_1_ 	= ALLINSIGS[sid];
       'd7: apbi_pSEL_2_ 	= ALLINSIGS[sid];
       'd8: apbi_pSEL_3_ 	= ALLINSIGS[sid];
       'd9: apbi_pSEL_4_ 	= ALLINSIGS[sid];
       'd10: apbi_pSEL_5_ 	= ALLINSIGS[sid];
       'd11: apbi_pSEL_6_ 	= ALLINSIGS[sid];
       'd12: apbi_pSEL_7_ 	= ALLINSIGS[sid];
       'd13: apbi_pSEL_8_ 	= ALLINSIGS[sid];
       'd14: apbi_pSEL_9_ 	= ALLINSIGS[sid];
       'd15: apbi_pSEL_10_ 	= ALLINSIGS[sid];
       'd16: apbi_pSEL_11_ 	= ALLINSIGS[sid];
       'd17: apbi_pSEL_12_ 	= ALLINSIGS[sid];
       'd18: apbi_pSEL_13_ 	= ALLINSIGS[sid];
       'd19: apbi_pSEL_14_ 	= ALLINSIGS[sid];
       'd20: apbi_pSEL_15_ 	= ALLINSIGS[sid];
       'd21: apbi_pENABLE 	= ALLINSIGS[sid];
       'd22: apbi_pADDR_31_ 	= ALLINSIGS[sid];
       'd23: apbi_pADDR_30_ 	= ALLINSIGS[sid];
       'd24: apbi_pADDR_29_ 	= ALLINSIGS[sid];
       'd25: apbi_pADDR_28_ 	= ALLINSIGS[sid];
       'd26: apbi_pADDR_27_ 	= ALLINSIGS[sid];
       'd27: apbi_pADDR_26_ 	= ALLINSIGS[sid];
       'd28: apbi_pADDR_25_ 	= ALLINSIGS[sid];
       'd29: apbi_pADDR_24_ 	= ALLINSIGS[sid];
       'd30: apbi_pADDR_23_ 	= ALLINSIGS[sid];
       'd31: apbi_pADDR_22_ 	= ALLINSIGS[sid];
       'd32: apbi_pADDR_21_ 	= ALLINSIGS[sid];
       'd33: apbi_pADDR_20_ 	= ALLINSIGS[sid];
       'd34: apbi_pADDR_19_ 	= ALLINSIGS[sid];
       'd35: apbi_pADDR_18_ 	= ALLINSIGS[sid];
       'd36: apbi_pADDR_17_ 	= ALLINSIGS[sid];
       'd37: apbi_pADDR_16_ 	= ALLINSIGS[sid];
       'd38: apbi_pADDR_15_ 	= ALLINSIGS[sid];
       'd39: apbi_pADDR_14_ 	= ALLINSIGS[sid];
       'd40: apbi_pADDR_13_ 	= ALLINSIGS[sid];
       'd41: apbi_pADDR_12_ 	= ALLINSIGS[sid];
       'd42: apbi_pADDR_11_ 	= ALLINSIGS[sid];
       'd43: apbi_pADDR_10_ 	= ALLINSIGS[sid];
       'd44: apbi_pADDR_9_ 	= ALLINSIGS[sid];
       'd45: apbi_pADDR_8_ 	= ALLINSIGS[sid];
       'd46: apbi_pADDR_7_ 	= ALLINSIGS[sid];
       'd47: apbi_pADDR_6_ 	= ALLINSIGS[sid];
       'd48: apbi_pADDR_5_ 	= ALLINSIGS[sid];
       'd49: apbi_pADDR_4_ 	= ALLINSIGS[sid];
       'd50: apbi_pADDR_3_ 	= ALLINSIGS[sid];
       'd51: apbi_pADDR_2_ 	= ALLINSIGS[sid];
       'd52: apbi_pADDR_1_ 	= ALLINSIGS[sid];
       'd53: apbi_pADDR_0_ 	= ALLINSIGS[sid];
       'd54: apbi_pWRITE 	= ALLINSIGS[sid];
       'd55: apbi_pWDATA_31_ 	= ALLINSIGS[sid];
       'd56: apbi_pWDATA_30_ 	= ALLINSIGS[sid];
       'd57: apbi_pWDATA_29_ 	= ALLINSIGS[sid];
       'd58: apbi_pWDATA_28_ 	= ALLINSIGS[sid];
       'd59: apbi_pWDATA_27_ 	= ALLINSIGS[sid];
       'd60: apbi_pWDATA_26_ 	= ALLINSIGS[sid];
       'd61: apbi_pWDATA_25_ 	= ALLINSIGS[sid];
       'd62: apbi_pWDATA_24_ 	= ALLINSIGS[sid];
       'd63: apbi_pWDATA_23_ 	= ALLINSIGS[sid];
       'd64: apbi_pWDATA_22_ 	= ALLINSIGS[sid];
       'd65: apbi_pWDATA_21_ 	= ALLINSIGS[sid];
       'd66: apbi_pWDATA_20_ 	= ALLINSIGS[sid];
       'd67: apbi_pWDATA_19_ 	= ALLINSIGS[sid];
       'd68: apbi_pWDATA_18_ 	= ALLINSIGS[sid];
       'd69: apbi_pWDATA_17_ 	= ALLINSIGS[sid];
       'd70: apbi_pWDATA_16_ 	= ALLINSIGS[sid];
       'd71: apbi_pWDATA_15_ 	= ALLINSIGS[sid];
       'd72: apbi_pWDATA_14_ 	= ALLINSIGS[sid];
       'd73: apbi_pWDATA_13_ 	= ALLINSIGS[sid];
       'd74: apbi_pWDATA_12_ 	= ALLINSIGS[sid];
       'd75: apbi_pWDATA_11_ 	= ALLINSIGS[sid];
       'd76: apbi_pWDATA_10_ 	= ALLINSIGS[sid];
       'd77: apbi_pWDATA_9_ 	= ALLINSIGS[sid];
       'd78: apbi_pWDATA_8_ 	= ALLINSIGS[sid];
       'd79: apbi_pWDATA_7_ 	= ALLINSIGS[sid];
       'd80: apbi_pWDATA_6_ 	= ALLINSIGS[sid];
       'd81: apbi_pWDATA_5_ 	= ALLINSIGS[sid];
       'd82: apbi_pWDATA_4_ 	= ALLINSIGS[sid];
       'd83: apbi_pWDATA_3_ 	= ALLINSIGS[sid];
       'd84: apbi_pWDATA_2_ 	= ALLINSIGS[sid];
       'd85: apbi_pWDATA_1_ 	= ALLINSIGS[sid];
       'd86: apbi_pWDATA_0_ 	= ALLINSIGS[sid];
       'd87: apbi_pIRQ_31_ 	= ALLINSIGS[sid];
       'd88: apbi_pIRQ_30_ 	= ALLINSIGS[sid];
       'd89: apbi_pIRQ_29_ 	= ALLINSIGS[sid];
       'd90: apbi_pIRQ_28_ 	= ALLINSIGS[sid];
       'd91: apbi_pIRQ_27_ 	= ALLINSIGS[sid];
       'd92: apbi_pIRQ_26_ 	= ALLINSIGS[sid];
       'd93: apbi_pIRQ_25_ 	= ALLINSIGS[sid];
       'd94: apbi_pIRQ_24_ 	= ALLINSIGS[sid];
       'd95: apbi_pIRQ_23_ 	= ALLINSIGS[sid];
       'd96: apbi_pIRQ_22_ 	= ALLINSIGS[sid];
       'd97: apbi_pIRQ_21_ 	= ALLINSIGS[sid];
       'd98: apbi_pIRQ_20_ 	= ALLINSIGS[sid];
       'd99: apbi_pIRQ_19_ 	= ALLINSIGS[sid];
       'd100: apbi_pIRQ_18_ 	= ALLINSIGS[sid];
       'd101: apbi_pIRQ_17_ 	= ALLINSIGS[sid];
       'd102: apbi_pIRQ_16_ 	= ALLINSIGS[sid];
       'd103: apbi_pIRQ_15_ 	= ALLINSIGS[sid];
       'd104: apbi_pIRQ_14_ 	= ALLINSIGS[sid];
       'd105: apbi_pIRQ_13_ 	= ALLINSIGS[sid];
       'd106: apbi_pIRQ_12_ 	= ALLINSIGS[sid];
       'd107: apbi_pIRQ_11_ 	= ALLINSIGS[sid];
       'd108: apbi_pIRQ_10_ 	= ALLINSIGS[sid];
       'd109: apbi_pIRQ_9_ 	= ALLINSIGS[sid];
       'd110: apbi_pIRQ_8_ 	= ALLINSIGS[sid];
       'd111: apbi_pIRQ_7_ 	= ALLINSIGS[sid];
       'd112: apbi_pIRQ_6_ 	= ALLINSIGS[sid];
       'd113: apbi_pIRQ_5_ 	= ALLINSIGS[sid];
       'd114: apbi_pIRQ_4_ 	= ALLINSIGS[sid];
       'd115: apbi_pIRQ_3_ 	= ALLINSIGS[sid];
       'd116: apbi_pIRQ_2_ 	= ALLINSIGS[sid];
       'd117: apbi_pIRQ_1_ 	= ALLINSIGS[sid];
       'd118: apbi_pIRQ_0_ 	= ALLINSIGS[sid];
       'd119: apbi_tESTEN 	= ALLINSIGS[sid];
       'd120: apbi_tESTRST 	= ALLINSIGS[sid];
       'd121: apbi_sCANEN 	= ALLINSIGS[sid];
       'd122: apbi_tESTOEN 	= ALLINSIGS[sid];
       'd123: apbi_tESTIN_3_ 	= ALLINSIGS[sid];
       'd124: apbi_tESTIN_2_ 	= ALLINSIGS[sid];
       'd125: apbi_tESTIN_1_ 	= ALLINSIGS[sid];
       'd126: apbi_tESTIN_0_ 	= ALLINSIGS[sid];
       'd127: uarti_rXD 	= ALLINSIGS[sid];
       'd128: uarti_cTSN 	= ALLINSIGS[sid];
       'd129: uarti_eXTCLK 	= ALLINSIGS[sid];
       default: begin $display("\nXTB Error: unrecognized (input) signal id %d (valid range is 0..%d). Exiting...",sid, SIG_IDS-1); $finish; end
     endcase
   end
   endtask 

   always  begin: force_sigs_p
     reg [SIG_IDS-1:0] sid; 
     reg [MAX_SIGW-1:0] sig;
     fork
        forever @(ALLINSIGS[0]) set_force_sig('d`rst );
        forever @(ALLINSIGS[1]) set_force_sig('d`clk );
        forever @(ALLINSIGS[2]) set_force_sig('d`testen );
        forever @(ALLINSIGS[3]) set_force_sig('d`testrst );
        forever @(ALLINSIGS[4]) set_force_sig('d`testin );
        forever @(ALLINSIGS[5]) set_force_sig('d`apbi_pSEL_0_ );
        forever @(ALLINSIGS[6]) set_force_sig('d`apbi_pSEL_1_ );
        forever @(ALLINSIGS[7]) set_force_sig('d`apbi_pSEL_2_ );
        forever @(ALLINSIGS[8]) set_force_sig('d`apbi_pSEL_3_ );
        forever @(ALLINSIGS[9]) set_force_sig('d`apbi_pSEL_4_ );
        forever @(ALLINSIGS[10]) set_force_sig('d`apbi_pSEL_5_ );
        forever @(ALLINSIGS[11]) set_force_sig('d`apbi_pSEL_6_ );
        forever @(ALLINSIGS[12]) set_force_sig('d`apbi_pSEL_7_ );
        forever @(ALLINSIGS[13]) set_force_sig('d`apbi_pSEL_8_ );
        forever @(ALLINSIGS[14]) set_force_sig('d`apbi_pSEL_9_ );
        forever @(ALLINSIGS[15]) set_force_sig('d`apbi_pSEL_10_ );
        forever @(ALLINSIGS[16]) set_force_sig('d`apbi_pSEL_11_ );
        forever @(ALLINSIGS[17]) set_force_sig('d`apbi_pSEL_12_ );
        forever @(ALLINSIGS[18]) set_force_sig('d`apbi_pSEL_13_ );
        forever @(ALLINSIGS[19]) set_force_sig('d`apbi_pSEL_14_ );
        forever @(ALLINSIGS[20]) set_force_sig('d`apbi_pSEL_15_ );
        forever @(ALLINSIGS[21]) set_force_sig('d`apbi_pENABLE );
        forever @(ALLINSIGS[22]) set_force_sig('d`apbi_pADDR_31_ );
        forever @(ALLINSIGS[23]) set_force_sig('d`apbi_pADDR_30_ );
        forever @(ALLINSIGS[24]) set_force_sig('d`apbi_pADDR_29_ );
        forever @(ALLINSIGS[25]) set_force_sig('d`apbi_pADDR_28_ );
        forever @(ALLINSIGS[26]) set_force_sig('d`apbi_pADDR_27_ );
        forever @(ALLINSIGS[27]) set_force_sig('d`apbi_pADDR_26_ );
        forever @(ALLINSIGS[28]) set_force_sig('d`apbi_pADDR_25_ );
        forever @(ALLINSIGS[29]) set_force_sig('d`apbi_pADDR_24_ );
        forever @(ALLINSIGS[30]) set_force_sig('d`apbi_pADDR_23_ );
        forever @(ALLINSIGS[31]) set_force_sig('d`apbi_pADDR_22_ );
        forever @(ALLINSIGS[32]) set_force_sig('d`apbi_pADDR_21_ );
        forever @(ALLINSIGS[33]) set_force_sig('d`apbi_pADDR_20_ );
        forever @(ALLINSIGS[34]) set_force_sig('d`apbi_pADDR_19_ );
        forever @(ALLINSIGS[35]) set_force_sig('d`apbi_pADDR_18_ );
        forever @(ALLINSIGS[36]) set_force_sig('d`apbi_pADDR_17_ );
        forever @(ALLINSIGS[37]) set_force_sig('d`apbi_pADDR_16_ );
        forever @(ALLINSIGS[38]) set_force_sig('d`apbi_pADDR_15_ );
        forever @(ALLINSIGS[39]) set_force_sig('d`apbi_pADDR_14_ );
        forever @(ALLINSIGS[40]) set_force_sig('d`apbi_pADDR_13_ );
        forever @(ALLINSIGS[41]) set_force_sig('d`apbi_pADDR_12_ );
        forever @(ALLINSIGS[42]) set_force_sig('d`apbi_pADDR_11_ );
        forever @(ALLINSIGS[43]) set_force_sig('d`apbi_pADDR_10_ );
        forever @(ALLINSIGS[44]) set_force_sig('d`apbi_pADDR_9_ );
        forever @(ALLINSIGS[45]) set_force_sig('d`apbi_pADDR_8_ );
        forever @(ALLINSIGS[46]) set_force_sig('d`apbi_pADDR_7_ );
        forever @(ALLINSIGS[47]) set_force_sig('d`apbi_pADDR_6_ );
        forever @(ALLINSIGS[48]) set_force_sig('d`apbi_pADDR_5_ );
        forever @(ALLINSIGS[49]) set_force_sig('d`apbi_pADDR_4_ );
        forever @(ALLINSIGS[50]) set_force_sig('d`apbi_pADDR_3_ );
        forever @(ALLINSIGS[51]) set_force_sig('d`apbi_pADDR_2_ );
        forever @(ALLINSIGS[52]) set_force_sig('d`apbi_pADDR_1_ );
        forever @(ALLINSIGS[53]) set_force_sig('d`apbi_pADDR_0_ );
        forever @(ALLINSIGS[54]) set_force_sig('d`apbi_pWRITE );
        forever @(ALLINSIGS[55]) set_force_sig('d`apbi_pWDATA_31_ );
        forever @(ALLINSIGS[56]) set_force_sig('d`apbi_pWDATA_30_ );
        forever @(ALLINSIGS[57]) set_force_sig('d`apbi_pWDATA_29_ );
        forever @(ALLINSIGS[58]) set_force_sig('d`apbi_pWDATA_28_ );
        forever @(ALLINSIGS[59]) set_force_sig('d`apbi_pWDATA_27_ );
        forever @(ALLINSIGS[60]) set_force_sig('d`apbi_pWDATA_26_ );
        forever @(ALLINSIGS[61]) set_force_sig('d`apbi_pWDATA_25_ );
        forever @(ALLINSIGS[62]) set_force_sig('d`apbi_pWDATA_24_ );
        forever @(ALLINSIGS[63]) set_force_sig('d`apbi_pWDATA_23_ );
        forever @(ALLINSIGS[64]) set_force_sig('d`apbi_pWDATA_22_ );
        forever @(ALLINSIGS[65]) set_force_sig('d`apbi_pWDATA_21_ );
        forever @(ALLINSIGS[66]) set_force_sig('d`apbi_pWDATA_20_ );
        forever @(ALLINSIGS[67]) set_force_sig('d`apbi_pWDATA_19_ );
        forever @(ALLINSIGS[68]) set_force_sig('d`apbi_pWDATA_18_ );
        forever @(ALLINSIGS[69]) set_force_sig('d`apbi_pWDATA_17_ );
        forever @(ALLINSIGS[70]) set_force_sig('d`apbi_pWDATA_16_ );
        forever @(ALLINSIGS[71]) set_force_sig('d`apbi_pWDATA_15_ );
        forever @(ALLINSIGS[72]) set_force_sig('d`apbi_pWDATA_14_ );
        forever @(ALLINSIGS[73]) set_force_sig('d`apbi_pWDATA_13_ );
        forever @(ALLINSIGS[74]) set_force_sig('d`apbi_pWDATA_12_ );
        forever @(ALLINSIGS[75]) set_force_sig('d`apbi_pWDATA_11_ );
        forever @(ALLINSIGS[76]) set_force_sig('d`apbi_pWDATA_10_ );
        forever @(ALLINSIGS[77]) set_force_sig('d`apbi_pWDATA_9_ );
        forever @(ALLINSIGS[78]) set_force_sig('d`apbi_pWDATA_8_ );
        forever @(ALLINSIGS[79]) set_force_sig('d`apbi_pWDATA_7_ );
        forever @(ALLINSIGS[80]) set_force_sig('d`apbi_pWDATA_6_ );
        forever @(ALLINSIGS[81]) set_force_sig('d`apbi_pWDATA_5_ );
        forever @(ALLINSIGS[82]) set_force_sig('d`apbi_pWDATA_4_ );
        forever @(ALLINSIGS[83]) set_force_sig('d`apbi_pWDATA_3_ );
        forever @(ALLINSIGS[84]) set_force_sig('d`apbi_pWDATA_2_ );
        forever @(ALLINSIGS[85]) set_force_sig('d`apbi_pWDATA_1_ );
        forever @(ALLINSIGS[86]) set_force_sig('d`apbi_pWDATA_0_ );
        forever @(ALLINSIGS[87]) set_force_sig('d`apbi_pIRQ_31_ );
        forever @(ALLINSIGS[88]) set_force_sig('d`apbi_pIRQ_30_ );
        forever @(ALLINSIGS[89]) set_force_sig('d`apbi_pIRQ_29_ );
        forever @(ALLINSIGS[90]) set_force_sig('d`apbi_pIRQ_28_ );
        forever @(ALLINSIGS[91]) set_force_sig('d`apbi_pIRQ_27_ );
        forever @(ALLINSIGS[92]) set_force_sig('d`apbi_pIRQ_26_ );
        forever @(ALLINSIGS[93]) set_force_sig('d`apbi_pIRQ_25_ );
        forever @(ALLINSIGS[94]) set_force_sig('d`apbi_pIRQ_24_ );
        forever @(ALLINSIGS[95]) set_force_sig('d`apbi_pIRQ_23_ );
        forever @(ALLINSIGS[96]) set_force_sig('d`apbi_pIRQ_22_ );
        forever @(ALLINSIGS[97]) set_force_sig('d`apbi_pIRQ_21_ );
        forever @(ALLINSIGS[98]) set_force_sig('d`apbi_pIRQ_20_ );
        forever @(ALLINSIGS[99]) set_force_sig('d`apbi_pIRQ_19_ );
        forever @(ALLINSIGS[100]) set_force_sig('d`apbi_pIRQ_18_ );
        forever @(ALLINSIGS[101]) set_force_sig('d`apbi_pIRQ_17_ );
        forever @(ALLINSIGS[102]) set_force_sig('d`apbi_pIRQ_16_ );
        forever @(ALLINSIGS[103]) set_force_sig('d`apbi_pIRQ_15_ );
        forever @(ALLINSIGS[104]) set_force_sig('d`apbi_pIRQ_14_ );
        forever @(ALLINSIGS[105]) set_force_sig('d`apbi_pIRQ_13_ );
        forever @(ALLINSIGS[106]) set_force_sig('d`apbi_pIRQ_12_ );
        forever @(ALLINSIGS[107]) set_force_sig('d`apbi_pIRQ_11_ );
        forever @(ALLINSIGS[108]) set_force_sig('d`apbi_pIRQ_10_ );
        forever @(ALLINSIGS[109]) set_force_sig('d`apbi_pIRQ_9_ );
        forever @(ALLINSIGS[110]) set_force_sig('d`apbi_pIRQ_8_ );
        forever @(ALLINSIGS[111]) set_force_sig('d`apbi_pIRQ_7_ );
        forever @(ALLINSIGS[112]) set_force_sig('d`apbi_pIRQ_6_ );
        forever @(ALLINSIGS[113]) set_force_sig('d`apbi_pIRQ_5_ );
        forever @(ALLINSIGS[114]) set_force_sig('d`apbi_pIRQ_4_ );
        forever @(ALLINSIGS[115]) set_force_sig('d`apbi_pIRQ_3_ );
        forever @(ALLINSIGS[116]) set_force_sig('d`apbi_pIRQ_2_ );
        forever @(ALLINSIGS[117]) set_force_sig('d`apbi_pIRQ_1_ );
        forever @(ALLINSIGS[118]) set_force_sig('d`apbi_pIRQ_0_ );
        forever @(ALLINSIGS[119]) set_force_sig('d`apbi_tESTEN );
        forever @(ALLINSIGS[120]) set_force_sig('d`apbi_tESTRST );
        forever @(ALLINSIGS[121]) set_force_sig('d`apbi_sCANEN );
        forever @(ALLINSIGS[122]) set_force_sig('d`apbi_tESTOEN );
        forever @(ALLINSIGS[123]) set_force_sig('d`apbi_tESTIN_3_ );
        forever @(ALLINSIGS[124]) set_force_sig('d`apbi_tESTIN_2_ );
        forever @(ALLINSIGS[125]) set_force_sig('d`apbi_tESTIN_1_ );
        forever @(ALLINSIGS[126]) set_force_sig('d`apbi_tESTIN_0_ );
        forever @(ALLINSIGS[127]) set_force_sig('d`uarti_rXD );
        forever @(ALLINSIGS[128]) set_force_sig('d`uarti_cTSN );
        forever @(ALLINSIGS[129]) set_force_sig('d`uarti_eXTCLK );
     join
   end

   task measure_out_sig;
     input reg [SIG_IDS-1:0] sid ;
     input reg [MAX_WIDTH-1:0] xsig;
     input integer  stmtid;
     reg [MAX_WIDTH-1:0] csig;
     integer errshown, abit, cpat;
   begin
     errshown = 0;
     cpat = cur_pat < 0 ? 0 : cur_pat;
     get_stb_sig(sid,csig);
     for (abit = 0; abit < SignalIDWidth[sid]; abit = abit + 1) begin
       if (xsig[abit] !== 1'bx) begin
         if (xsig[abit] !== csig[abit]) begin
           if (errshown == 0) $display(">>>  Error during %0s pattern %0d", StmtNames[stmtid], cpat);
           if (SignalIDWidth[sid] <= 1) begin 
             $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, signal %0s", $time, v_count, xsig[abit], csig[abit], SignalIDName[sid]);
             if (diagf) begin 
               if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b)", SignalIDName[sid], v_count, xsig[abit], csig[abit]);
               else $fdisplay(diagf, "  %0d %0s (exp=%b, got=%b)", cpat, SignalIDName[sid], xsig[abit], csig[abit]);
             end 
           end 
           else begin 
             $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, signal %0s[%0d]", $time, v_count, xsig[abit], csig[abit], SignalIDName[sid], abit);
             if (diagf) begin 
               if (diagm==2) $fdisplay(diagf, "  C %0s[%0d] %0d (exp=%b, got=%b)", SignalIDName[sid], abit, v_count, xsig[abit], csig[abit]);
               else $fdisplay(diagf, "  %0d %0s[%d] (exp=%b, got=%b)", cpat, SignalIDName[sid], abit, xsig[abit], csig[abit]);
             end 
           end 
           nbfails = nbfails + 1;
           errshown = 1;
         end 
       end 
     end 
   end 
   endtask

   task measure_scan_out;
     input reg [SIG_IDS-1:0] sid ;
     input reg [MAX_WIDTH-1:0] xsig;
     input integer  chain;
     reg [MAX_WIDTH-1:0] csig;
     integer errshown, patoff;
   begin
     errshown = 0;
     get_stb_sig(sid, csig);
     if ((xsig[0] !==1'bx) && (xsig[0] !== csig[0])) begin
       patoff = (loads > 1 || cur_pat <= 0) ? 0 : 1;
       if (prev_error != cur_pat) begin
         if (cur_pat <= 0 || cur_pat == last_pat && loads > 1) begin
           $display(">>>  Error during scan pattern %0d %s", (cur_pat < 0) ? 0 : cur_pat,  (cur_pat == last_pat) ? "(detected from final pattern unload)" : "");
         end
         else begin
           if (loads > 1) $display(">>>  Error during scan pattern %0d (detected from %0d load/unload)", cur_pat, loads);
           else begin $display(">>>  Error during scan pattern %0d (detected from unload of pattern %0d)", cur_pat, cur_pat-1); end
         end 
         prev_error = cur_pat;
       end
       $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, chain %0s, pin %0s, scan cell %0d", $time, v_count, xsig[0], csig[0], CH_NAMES[chain], SignalIDName[sid], fsci);
       if (diagf) begin 
         if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b)", SignalIDName[sid], v_count, xsig[0], csig[0]);
          else $fdisplay(diagf, "  %0d %0s %0d (exp=%b, got=%b)", cur_pat-patoff, SignalIDName[sid], fsci, xsig[0], csig[0]);
       end 
       nbfails = nbfails + 1;
     end
   end 
   endtask

   always begin: measure_sigs_p
    fork
     forever @(ALLOUTSIGS['d`\apbo[131] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[131] ,ALLOUTSIGS[130], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[130] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[130] ,ALLOUTSIGS[131], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[129] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[129] ,ALLOUTSIGS[132], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[128] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[128] ,ALLOUTSIGS[133], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[127] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[127] ,ALLOUTSIGS[134], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[126] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[126] ,ALLOUTSIGS[135], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[125] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[125] ,ALLOUTSIGS[136], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[124] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[124] ,ALLOUTSIGS[137], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[123] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[123] ,ALLOUTSIGS[138], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[122] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[122] ,ALLOUTSIGS[139], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[121] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[121] ,ALLOUTSIGS[140], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[120] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[120] ,ALLOUTSIGS[141], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[119] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[119] ,ALLOUTSIGS[142], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[118] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[118] ,ALLOUTSIGS[143], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[117] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[117] ,ALLOUTSIGS[144], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[116] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[116] ,ALLOUTSIGS[145], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[115] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[115] ,ALLOUTSIGS[146], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[114] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[114] ,ALLOUTSIGS[147], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[113] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[113] ,ALLOUTSIGS[148], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[112] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[112] ,ALLOUTSIGS[149], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[111] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[111] ,ALLOUTSIGS[150], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[110] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[110] ,ALLOUTSIGS[151], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[109] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[109] ,ALLOUTSIGS[152], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[108] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[108] ,ALLOUTSIGS[153], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[107] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[107] ,ALLOUTSIGS[154], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[106] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[106] ,ALLOUTSIGS[155], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[105] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[105] ,ALLOUTSIGS[156], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[104] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[104] ,ALLOUTSIGS[157], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[103] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[103] ,ALLOUTSIGS[158], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[102] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[102] ,ALLOUTSIGS[159], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[101] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[101] ,ALLOUTSIGS[160], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[100] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[100] ,ALLOUTSIGS[161], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[99] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[99] ,ALLOUTSIGS[162], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[98] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[98] ,ALLOUTSIGS[163], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[97] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[97] ,ALLOUTSIGS[164], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[96] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[96] ,ALLOUTSIGS[165], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[95] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[95] ,ALLOUTSIGS[166], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[94] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[94] ,ALLOUTSIGS[167], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[93] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[93] ,ALLOUTSIGS[168], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[92] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[92] ,ALLOUTSIGS[169], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[91] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[91] ,ALLOUTSIGS[170], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[90] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[90] ,ALLOUTSIGS[171], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[89] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[89] ,ALLOUTSIGS[172], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[88] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[88] ,ALLOUTSIGS[173], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[87] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[87] ,ALLOUTSIGS[174], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[86] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[86] ,ALLOUTSIGS[175], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[85] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[85] ,ALLOUTSIGS[176], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[84] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[84] ,ALLOUTSIGS[177], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[83] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[83] ,ALLOUTSIGS[178], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[82] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[82] ,ALLOUTSIGS[179], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[81] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[81] ,ALLOUTSIGS[180], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[80] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[80] ,ALLOUTSIGS[181], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[79] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[79] ,ALLOUTSIGS[182], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[78] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[78] ,ALLOUTSIGS[183], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[77] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[77] ,ALLOUTSIGS[184], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[76] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[76] ,ALLOUTSIGS[185], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[75] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[75] ,ALLOUTSIGS[186], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[74] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[74] ,ALLOUTSIGS[187], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[73] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[73] ,ALLOUTSIGS[188], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[72] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[72] ,ALLOUTSIGS[189], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[71] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[71] ,ALLOUTSIGS[190], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[70] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[70] ,ALLOUTSIGS[191], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[69] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[69] ,ALLOUTSIGS[192], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[68] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[68] ,ALLOUTSIGS[193], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[67] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[67] ,ALLOUTSIGS[194], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[66] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[66] ,ALLOUTSIGS[195], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[65] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[65] ,ALLOUTSIGS[196], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[64] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[64] ,ALLOUTSIGS[197], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[63] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[63] ,ALLOUTSIGS[198], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[62] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[62] ,ALLOUTSIGS[199], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[61] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[61] ,ALLOUTSIGS[200], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[60] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[60] ,ALLOUTSIGS[201], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[59] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[59] ,ALLOUTSIGS[202], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[58] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[58] ,ALLOUTSIGS[203], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[57] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[57] ,ALLOUTSIGS[204], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[56] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[56] ,ALLOUTSIGS[205], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[55] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[55] ,ALLOUTSIGS[206], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[54] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[54] ,ALLOUTSIGS[207], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[53] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[53] ,ALLOUTSIGS[208], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[52] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[52] ,ALLOUTSIGS[209], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[51] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[51] ,ALLOUTSIGS[210], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[50] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[50] ,ALLOUTSIGS[211], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[49] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[49] ,ALLOUTSIGS[212], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[48] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[48] ,ALLOUTSIGS[213], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[47] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[47] ,ALLOUTSIGS[214], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[46] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[46] ,ALLOUTSIGS[215], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[45] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[45] ,ALLOUTSIGS[216], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[44] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[44] ,ALLOUTSIGS[217], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[43] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[43] ,ALLOUTSIGS[218], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[42] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[42] ,ALLOUTSIGS[219], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[41] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[41] ,ALLOUTSIGS[220], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[40] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[40] ,ALLOUTSIGS[221], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[39] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[39] ,ALLOUTSIGS[222], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[38] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[38] ,ALLOUTSIGS[223], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[37] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[37] ,ALLOUTSIGS[224], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[36] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[36] ,ALLOUTSIGS[225], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[35] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[35] ,ALLOUTSIGS[226], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[34] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[34] ,ALLOUTSIGS[227], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[33] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[33] ,ALLOUTSIGS[228], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[32] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[32] ,ALLOUTSIGS[229], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[31] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[31] ,ALLOUTSIGS[230], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[30] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[30] ,ALLOUTSIGS[231], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[29] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[29] ,ALLOUTSIGS[232], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[28] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[28] ,ALLOUTSIGS[233], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[27] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[27] ,ALLOUTSIGS[234], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[26] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[26] ,ALLOUTSIGS[235], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[25] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[25] ,ALLOUTSIGS[236], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[24] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[24] ,ALLOUTSIGS[237], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[23] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[23] ,ALLOUTSIGS[238], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[22] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[22] ,ALLOUTSIGS[239], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[21] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[21] ,ALLOUTSIGS[240], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[20] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[20] ,ALLOUTSIGS[241], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[19] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[19] ,ALLOUTSIGS[242], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[18] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[18] ,ALLOUTSIGS[243], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[17] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[17] ,ALLOUTSIGS[244], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[16] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[16] ,ALLOUTSIGS[245], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[15] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[15] ,ALLOUTSIGS[246], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[14] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[14] ,ALLOUTSIGS[247], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[13] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[13] ,ALLOUTSIGS[248], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[12] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[12] ,ALLOUTSIGS[249], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[11] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[11] ,ALLOUTSIGS[250], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[10] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[10] ,ALLOUTSIGS[251], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[9] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[9] ,ALLOUTSIGS[252], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[8] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[8] ,ALLOUTSIGS[253], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[7] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[7] ,ALLOUTSIGS[254], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[6] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[6] ,ALLOUTSIGS[255], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[5] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[5] ,ALLOUTSIGS[256], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[4] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[4] ,ALLOUTSIGS[257], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[3] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[3] ,ALLOUTSIGS[258], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[2] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[2] ,ALLOUTSIGS[259], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[1] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[1] ,ALLOUTSIGS[260], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\apbo[0] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\apbo[0] ,ALLOUTSIGS[261], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`testout]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `load_unloadStmt || cur_stmt == `multiclock_captureStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`testout,ALLOUTSIGS[262], 0); 
       else measure_out_sig('d`testout,ALLOUTSIGS[262], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_rTSN]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_rTSN,ALLOUTSIGS[263], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_tXD]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_tXD,ALLOUTSIGS[264], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_31_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_31_,ALLOUTSIGS[265], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_30_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_30_,ALLOUTSIGS[266], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_29_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_29_,ALLOUTSIGS[267], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_28_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_28_,ALLOUTSIGS[268], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_27_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_27_,ALLOUTSIGS[269], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_26_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_26_,ALLOUTSIGS[270], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_25_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_25_,ALLOUTSIGS[271], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_24_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_24_,ALLOUTSIGS[272], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_23_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_23_,ALLOUTSIGS[273], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_22_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_22_,ALLOUTSIGS[274], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_21_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_21_,ALLOUTSIGS[275], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_20_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_20_,ALLOUTSIGS[276], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_19_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_19_,ALLOUTSIGS[277], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_18_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_18_,ALLOUTSIGS[278], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_17_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_17_,ALLOUTSIGS[279], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_16_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_16_,ALLOUTSIGS[280], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_15_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_15_,ALLOUTSIGS[281], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_14_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_14_,ALLOUTSIGS[282], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_13_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_13_,ALLOUTSIGS[283], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_12_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_12_,ALLOUTSIGS[284], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_11_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_11_,ALLOUTSIGS[285], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_10_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_10_,ALLOUTSIGS[286], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_9_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_9_,ALLOUTSIGS[287], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_8_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_8_,ALLOUTSIGS[288], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_7_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_7_,ALLOUTSIGS[289], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_6_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_6_,ALLOUTSIGS[290], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_5_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_5_,ALLOUTSIGS[291], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_4_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_4_,ALLOUTSIGS[292], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_3_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_3_,ALLOUTSIGS[293], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_2_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_2_,ALLOUTSIGS[294], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_1_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_1_,ALLOUTSIGS[295], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_sCALER_0_]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_sCALER_0_,ALLOUTSIGS[296], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_tXEN]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_tXEN,ALLOUTSIGS[297], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_fLOW]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_fLOW,ALLOUTSIGS[298], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`uarto_rXEN]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`uarto_rXEN,ALLOUTSIGS[299], cur_stmt); 
     end
    join
   end 

   task undef_wfc;
     input reg [1:0] wfc;
     input reg [8:0] sid;
     input integer wftid;
   begin
     $display("XTB Error: unrecognized %s value (WFC):%0b, on signal %0s for WFT %0s. Exiting...", wfc[1]?"strobe":"force", wfc[0], SignalIDName[sid], WFTIDName[wftid]);
     $finish;
   end
   endtask

   task apply__multiclock_capture_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd53, 'd43, 'd42, 'd41, 'd40, 'd39, 'd38, 'd37, 'd36, 'd35, 'd34, 'd52, 'd33, 'd32, 'd31, 'd30, 'd29, 'd28, 'd27, 'd26, 'd25, 'd24, 'd51, 'd23, 'd22, 'd50, 'd49, 'd48, 'd47, 'd46, 'd45, 'd44, 'd21, 'd118, 'd108, 'd107, 'd106, 'd105, 'd104, 'd103, 'd102, 'd101, 'd100, 'd99, 'd117, 'd98, 'd97, 'd96, 'd95, 'd94, 'd93, 'd92, 'd91, 'd90, 'd89, 'd116, 'd88, 'd87, 'd115, 'd114, 'd113, 'd112, 'd111, 'd110, 'd109, 'd5, 'd15, 'd16, 'd17, 'd18, 'd19, 'd20, 'd6, 'd7, 'd8, 'd9, 'd10, 'd11, 'd12, 'd13, 'd14, 'd86, 'd76, 'd75, 'd74, 'd73, 'd72, 'd71, 'd70, 'd69, 'd68, 'd67, 'd85, 'd66, 'd65, 'd64, 'd63, 'd62, 'd61, 'd60, 'd59, 'd58, 'd57, 'd84, 'd56, 'd55, 'd83, 'd82, 'd81, 'd80, 'd79, 'd78, 'd77, 'd54, 'd121, 'd119, 'd126, 'd125, 'd124, 'd123, 'd122, 'd120, 'd0, 'd2, 'd4, 'd3, 'd128, 'd129, 'd127: // apbi_pADDR_0_, apbi_pADDR_10_, apbi_pADDR_11_, apbi_pADDR_12_, apbi_pADDR_13_, apbi_pADDR_14_, apbi_pADDR_15_, apbi_pADDR_16_, apbi_pADDR_17_, apbi_pADDR_18_, apbi_pADDR_19_, apbi_pADDR_1_, apbi_pADDR_20_, apbi_pADDR_21_, apbi_pADDR_22_, apbi_pADDR_23_, apbi_pADDR_24_, apbi_pADDR_25_, apbi_pADDR_26_, apbi_pADDR_27_, apbi_pADDR_28_, apbi_pADDR_29_, apbi_pADDR_2_, apbi_pADDR_30_, apbi_pADDR_31_, apbi_pADDR_3_, apbi_pADDR_4_, apbi_pADDR_5_, apbi_pADDR_6_, apbi_pADDR_7_, apbi_pADDR_8_, apbi_pADDR_9_, apbi_pENABLE, apbi_pIRQ_0_, apbi_pIRQ_10_, apbi_pIRQ_11_, apbi_pIRQ_12_, apbi_pIRQ_13_, apbi_pIRQ_14_, apbi_pIRQ_15_, apbi_pIRQ_16_, apbi_pIRQ_17_, apbi_pIRQ_18_, apbi_pIRQ_19_, apbi_pIRQ_1_, apbi_pIRQ_20_, apbi_pIRQ_21_, apbi_pIRQ_22_, apbi_pIRQ_23_, apbi_pIRQ_24_, apbi_pIRQ_25_, apbi_pIRQ_26_, apbi_pIRQ_27_, apbi_pIRQ_28_, apbi_pIRQ_29_, apbi_pIRQ_2_, apbi_pIRQ_30_, apbi_pIRQ_31_, apbi_pIRQ_3_, apbi_pIRQ_4_, apbi_pIRQ_5_, apbi_pIRQ_6_, apbi_pIRQ_7_, apbi_pIRQ_8_, apbi_pIRQ_9_, apbi_pSEL_0_, apbi_pSEL_10_, apbi_pSEL_11_, apbi_pSEL_12_, apbi_pSEL_13_, apbi_pSEL_14_, apbi_pSEL_15_, apbi_pSEL_1_, apbi_pSEL_2_, apbi_pSEL_3_, apbi_pSEL_4_, apbi_pSEL_5_, apbi_pSEL_6_, apbi_pSEL_7_, apbi_pSEL_8_, apbi_pSEL_9_, apbi_pWDATA_0_, apbi_pWDATA_10_, apbi_pWDATA_11_, apbi_pWDATA_12_, apbi_pWDATA_13_, apbi_pWDATA_14_, apbi_pWDATA_15_, apbi_pWDATA_16_, apbi_pWDATA_17_, apbi_pWDATA_18_, apbi_pWDATA_19_, apbi_pWDATA_1_, apbi_pWDATA_20_, apbi_pWDATA_21_, apbi_pWDATA_22_, apbi_pWDATA_23_, apbi_pWDATA_24_, apbi_pWDATA_25_, apbi_pWDATA_26_, apbi_pWDATA_27_, apbi_pWDATA_28_, apbi_pWDATA_29_, apbi_pWDATA_2_, apbi_pWDATA_30_, apbi_pWDATA_31_, apbi_pWDATA_3_, apbi_pWDATA_4_, apbi_pWDATA_5_, apbi_pWDATA_6_, apbi_pWDATA_7_, apbi_pWDATA_8_, apbi_pWDATA_9_, apbi_pWRITE, apbi_sCANEN, apbi_tESTEN, apbi_tESTIN_0_, apbi_tESTIN_1_, apbi_tESTIN_2_, apbi_tESTIN_3_, apbi_tESTOEN, apbi_tESTRST, rst, testen, testin, testrst, uarti_cTSN, uarti_eXTCLK, uarti_rXD
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd225, 'd215, 'd214, 'd213, 'd212, 'd211, 'd210, 'd209, 'd208, 'd207, 'd206, 'd224, 'd205, 'd204, 'd203, 'd202, 'd201, 'd200, 'd199, 'd198, 'd197, 'd196, 'd223, 'd195, 'd194, 'd222, 'd221, 'd220, 'd219, 'd218, 'd217, 'd216, 'd257, 'd247, 'd246, 'd245, 'd244, 'd243, 'd242, 'd241, 'd240, 'd239, 'd238, 'd256, 'd237, 'd236, 'd235, 'd234, 'd233, 'd232, 'd231, 'd230, 'd229, 'd228, 'd255, 'd227, 'd226, 'd254, 'd253, 'd252, 'd251, 'd250, 'd249, 'd248, 'd261, 'd260, 'd259, 'd258, 'd193, 'd183, 'd182, 'd181, 'd180, 'd179, 'd178, 'd177, 'd176, 'd175, 'd174, 'd192, 'd173, 'd172, 'd171, 'd170, 'd169, 'd168, 'd167, 'd166, 'd165, 'd164, 'd191, 'd163, 'd162, 'd190, 'd189, 'd188, 'd187, 'd186, 'd185, 'd184, 'd161, 'd151, 'd150, 'd149, 'd148, 'd147, 'd146, 'd145, 'd144, 'd143, 'd142, 'd160, 'd141, 'd140, 'd139, 'd138, 'd137, 'd136, 'd135, 'd134, 'd133, 'd132, 'd159, 'd131, 'd130, 'd158, 'd157, 'd156, 'd155, 'd154, 'd153, 'd152, 'd262, 'd298, 'd263, 'd299, 'd296, 'd286, 'd285, 'd284, 'd283, 'd282, 'd281, 'd280, 'd279, 'd278, 'd277, 'd295, 'd276, 'd275, 'd274, 'd273, 'd272, 'd271, 'd270, 'd269, 'd268, 'd267, 'd294, 'd266, 'd265, 'd293, 'd292, 'd291, 'd290, 'd289, 'd288, 'd287, 'd264, 'd297: // \apbo[36] , \apbo[46] , \apbo[47] , \apbo[48] , \apbo[49] , \apbo[50] , \apbo[51] , \apbo[52] , \apbo[53] , \apbo[54] , \apbo[55] , \apbo[37] , \apbo[56] , \apbo[57] , \apbo[58] , \apbo[59] , \apbo[60] , \apbo[61] , \apbo[62] , \apbo[63] , \apbo[64] , \apbo[65] , \apbo[38] , \apbo[66] , \apbo[67] , \apbo[39] , \apbo[40] , \apbo[41] , \apbo[42] , \apbo[43] , \apbo[44] , \apbo[45] , \apbo[4] , \apbo[14] , \apbo[15] , \apbo[16] , \apbo[17] , \apbo[18] , \apbo[19] , \apbo[20] , \apbo[21] , \apbo[22] , \apbo[23] , \apbo[5] , \apbo[24] , \apbo[25] , \apbo[26] , \apbo[27] , \apbo[28] , \apbo[29] , \apbo[30] , \apbo[31] , \apbo[32] , \apbo[33] , \apbo[6] , \apbo[34] , \apbo[35] , \apbo[7] , \apbo[8] , \apbo[9] , \apbo[10] , \apbo[11] , \apbo[12] , \apbo[13] , \apbo[0] , \apbo[1] , \apbo[2] , \apbo[3] , \apbo[68] , \apbo[78] , \apbo[79] , \apbo[80] , \apbo[81] , \apbo[82] , \apbo[83] , \apbo[84] , \apbo[85] , \apbo[86] , \apbo[87] , \apbo[69] , \apbo[88] , \apbo[89] , \apbo[90] , \apbo[91] , \apbo[92] , \apbo[93] , \apbo[94] , \apbo[95] , \apbo[96] , \apbo[97] , \apbo[70] , \apbo[98] , \apbo[99] , \apbo[71] , \apbo[72] , \apbo[73] , \apbo[74] , \apbo[75] , \apbo[76] , \apbo[77] , \apbo[100] , \apbo[110] , \apbo[111] , \apbo[112] , \apbo[113] , \apbo[114] , \apbo[115] , \apbo[116] , \apbo[117] , \apbo[118] , \apbo[119] , \apbo[101] , \apbo[120] , \apbo[121] , \apbo[122] , \apbo[123] , \apbo[124] , \apbo[125] , \apbo[126] , \apbo[127] , \apbo[128] , \apbo[129] , \apbo[102] , \apbo[130] , \apbo[131] , \apbo[103] , \apbo[104] , \apbo[105] , \apbo[106] , \apbo[107] , \apbo[108] , \apbo[109] , testout, uarto_fLOW, uarto_rTSN, uarto_rXEN, uarto_sCALER_0_, uarto_sCALER_10_, uarto_sCALER_11_, uarto_sCALER_12_, uarto_sCALER_13_, uarto_sCALER_14_, uarto_sCALER_15_, uarto_sCALER_16_, uarto_sCALER_17_, uarto_sCALER_18_, uarto_sCALER_19_, uarto_sCALER_1_, uarto_sCALER_20_, uarto_sCALER_21_, uarto_sCALER_22_, uarto_sCALER_23_, uarto_sCALER_24_, uarto_sCALER_25_, uarto_sCALER_26_, uarto_sCALER_27_, uarto_sCALER_28_, uarto_sCALER_29_, uarto_sCALER_2_, uarto_sCALER_30_, uarto_sCALER_31_, uarto_sCALER_3_, uarto_sCALER_4_, uarto_sCALER_5_, uarto_sCALER_6_, uarto_sCALER_7_, uarto_sCALER_8_, uarto_sCALER_9_, uarto_tXD, uarto_tXEN
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd1: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task apply__default_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd53, 'd43, 'd42, 'd41, 'd40, 'd39, 'd38, 'd37, 'd36, 'd35, 'd34, 'd52, 'd33, 'd32, 'd31, 'd30, 'd29, 'd28, 'd27, 'd26, 'd25, 'd24, 'd51, 'd23, 'd22, 'd50, 'd49, 'd48, 'd47, 'd46, 'd45, 'd44, 'd21, 'd118, 'd108, 'd107, 'd106, 'd105, 'd104, 'd103, 'd102, 'd101, 'd100, 'd99, 'd117, 'd98, 'd97, 'd96, 'd95, 'd94, 'd93, 'd92, 'd91, 'd90, 'd89, 'd116, 'd88, 'd87, 'd115, 'd114, 'd113, 'd112, 'd111, 'd110, 'd109, 'd5, 'd15, 'd16, 'd17, 'd18, 'd19, 'd20, 'd6, 'd7, 'd8, 'd9, 'd10, 'd11, 'd12, 'd13, 'd14, 'd86, 'd76, 'd75, 'd74, 'd73, 'd72, 'd71, 'd70, 'd69, 'd68, 'd67, 'd85, 'd66, 'd65, 'd64, 'd63, 'd62, 'd61, 'd60, 'd59, 'd58, 'd57, 'd84, 'd56, 'd55, 'd83, 'd82, 'd81, 'd80, 'd79, 'd78, 'd77, 'd54, 'd121, 'd119, 'd126, 'd125, 'd124, 'd123, 'd122, 'd120, 'd0, 'd2, 'd4, 'd3, 'd128, 'd129, 'd127: // apbi_pADDR_0_, apbi_pADDR_10_, apbi_pADDR_11_, apbi_pADDR_12_, apbi_pADDR_13_, apbi_pADDR_14_, apbi_pADDR_15_, apbi_pADDR_16_, apbi_pADDR_17_, apbi_pADDR_18_, apbi_pADDR_19_, apbi_pADDR_1_, apbi_pADDR_20_, apbi_pADDR_21_, apbi_pADDR_22_, apbi_pADDR_23_, apbi_pADDR_24_, apbi_pADDR_25_, apbi_pADDR_26_, apbi_pADDR_27_, apbi_pADDR_28_, apbi_pADDR_29_, apbi_pADDR_2_, apbi_pADDR_30_, apbi_pADDR_31_, apbi_pADDR_3_, apbi_pADDR_4_, apbi_pADDR_5_, apbi_pADDR_6_, apbi_pADDR_7_, apbi_pADDR_8_, apbi_pADDR_9_, apbi_pENABLE, apbi_pIRQ_0_, apbi_pIRQ_10_, apbi_pIRQ_11_, apbi_pIRQ_12_, apbi_pIRQ_13_, apbi_pIRQ_14_, apbi_pIRQ_15_, apbi_pIRQ_16_, apbi_pIRQ_17_, apbi_pIRQ_18_, apbi_pIRQ_19_, apbi_pIRQ_1_, apbi_pIRQ_20_, apbi_pIRQ_21_, apbi_pIRQ_22_, apbi_pIRQ_23_, apbi_pIRQ_24_, apbi_pIRQ_25_, apbi_pIRQ_26_, apbi_pIRQ_27_, apbi_pIRQ_28_, apbi_pIRQ_29_, apbi_pIRQ_2_, apbi_pIRQ_30_, apbi_pIRQ_31_, apbi_pIRQ_3_, apbi_pIRQ_4_, apbi_pIRQ_5_, apbi_pIRQ_6_, apbi_pIRQ_7_, apbi_pIRQ_8_, apbi_pIRQ_9_, apbi_pSEL_0_, apbi_pSEL_10_, apbi_pSEL_11_, apbi_pSEL_12_, apbi_pSEL_13_, apbi_pSEL_14_, apbi_pSEL_15_, apbi_pSEL_1_, apbi_pSEL_2_, apbi_pSEL_3_, apbi_pSEL_4_, apbi_pSEL_5_, apbi_pSEL_6_, apbi_pSEL_7_, apbi_pSEL_8_, apbi_pSEL_9_, apbi_pWDATA_0_, apbi_pWDATA_10_, apbi_pWDATA_11_, apbi_pWDATA_12_, apbi_pWDATA_13_, apbi_pWDATA_14_, apbi_pWDATA_15_, apbi_pWDATA_16_, apbi_pWDATA_17_, apbi_pWDATA_18_, apbi_pWDATA_19_, apbi_pWDATA_1_, apbi_pWDATA_20_, apbi_pWDATA_21_, apbi_pWDATA_22_, apbi_pWDATA_23_, apbi_pWDATA_24_, apbi_pWDATA_25_, apbi_pWDATA_26_, apbi_pWDATA_27_, apbi_pWDATA_28_, apbi_pWDATA_29_, apbi_pWDATA_2_, apbi_pWDATA_30_, apbi_pWDATA_31_, apbi_pWDATA_3_, apbi_pWDATA_4_, apbi_pWDATA_5_, apbi_pWDATA_6_, apbi_pWDATA_7_, apbi_pWDATA_8_, apbi_pWDATA_9_, apbi_pWRITE, apbi_sCANEN, apbi_tESTEN, apbi_tESTIN_0_, apbi_tESTIN_1_, apbi_tESTIN_2_, apbi_tESTIN_3_, apbi_tESTOEN, apbi_tESTRST, rst, testen, testin, testrst, uarti_cTSN, uarti_eXTCLK, uarti_rXD
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd225, 'd215, 'd214, 'd213, 'd212, 'd211, 'd210, 'd209, 'd208, 'd207, 'd206, 'd224, 'd205, 'd204, 'd203, 'd202, 'd201, 'd200, 'd199, 'd198, 'd197, 'd196, 'd223, 'd195, 'd194, 'd222, 'd221, 'd220, 'd219, 'd218, 'd217, 'd216, 'd257, 'd247, 'd246, 'd245, 'd244, 'd243, 'd242, 'd241, 'd240, 'd239, 'd238, 'd256, 'd237, 'd236, 'd235, 'd234, 'd233, 'd232, 'd231, 'd230, 'd229, 'd228, 'd255, 'd227, 'd226, 'd254, 'd253, 'd252, 'd251, 'd250, 'd249, 'd248, 'd261, 'd260, 'd259, 'd258, 'd193, 'd183, 'd182, 'd181, 'd180, 'd179, 'd178, 'd177, 'd176, 'd175, 'd174, 'd192, 'd173, 'd172, 'd171, 'd170, 'd169, 'd168, 'd167, 'd166, 'd165, 'd164, 'd191, 'd163, 'd162, 'd190, 'd189, 'd188, 'd187, 'd186, 'd185, 'd184, 'd161, 'd151, 'd150, 'd149, 'd148, 'd147, 'd146, 'd145, 'd144, 'd143, 'd142, 'd160, 'd141, 'd140, 'd139, 'd138, 'd137, 'd136, 'd135, 'd134, 'd133, 'd132, 'd159, 'd131, 'd130, 'd158, 'd157, 'd156, 'd155, 'd154, 'd153, 'd152, 'd262, 'd298, 'd263, 'd299, 'd296, 'd286, 'd285, 'd284, 'd283, 'd282, 'd281, 'd280, 'd279, 'd278, 'd277, 'd295, 'd276, 'd275, 'd274, 'd273, 'd272, 'd271, 'd270, 'd269, 'd268, 'd267, 'd294, 'd266, 'd265, 'd293, 'd292, 'd291, 'd290, 'd289, 'd288, 'd287, 'd264, 'd297: // \apbo[36] , \apbo[46] , \apbo[47] , \apbo[48] , \apbo[49] , \apbo[50] , \apbo[51] , \apbo[52] , \apbo[53] , \apbo[54] , \apbo[55] , \apbo[37] , \apbo[56] , \apbo[57] , \apbo[58] , \apbo[59] , \apbo[60] , \apbo[61] , \apbo[62] , \apbo[63] , \apbo[64] , \apbo[65] , \apbo[38] , \apbo[66] , \apbo[67] , \apbo[39] , \apbo[40] , \apbo[41] , \apbo[42] , \apbo[43] , \apbo[44] , \apbo[45] , \apbo[4] , \apbo[14] , \apbo[15] , \apbo[16] , \apbo[17] , \apbo[18] , \apbo[19] , \apbo[20] , \apbo[21] , \apbo[22] , \apbo[23] , \apbo[5] , \apbo[24] , \apbo[25] , \apbo[26] , \apbo[27] , \apbo[28] , \apbo[29] , \apbo[30] , \apbo[31] , \apbo[32] , \apbo[33] , \apbo[6] , \apbo[34] , \apbo[35] , \apbo[7] , \apbo[8] , \apbo[9] , \apbo[10] , \apbo[11] , \apbo[12] , \apbo[13] , \apbo[0] , \apbo[1] , \apbo[2] , \apbo[3] , \apbo[68] , \apbo[78] , \apbo[79] , \apbo[80] , \apbo[81] , \apbo[82] , \apbo[83] , \apbo[84] , \apbo[85] , \apbo[86] , \apbo[87] , \apbo[69] , \apbo[88] , \apbo[89] , \apbo[90] , \apbo[91] , \apbo[92] , \apbo[93] , \apbo[94] , \apbo[95] , \apbo[96] , \apbo[97] , \apbo[70] , \apbo[98] , \apbo[99] , \apbo[71] , \apbo[72] , \apbo[73] , \apbo[74] , \apbo[75] , \apbo[76] , \apbo[77] , \apbo[100] , \apbo[110] , \apbo[111] , \apbo[112] , \apbo[113] , \apbo[114] , \apbo[115] , \apbo[116] , \apbo[117] , \apbo[118] , \apbo[119] , \apbo[101] , \apbo[120] , \apbo[121] , \apbo[122] , \apbo[123] , \apbo[124] , \apbo[125] , \apbo[126] , \apbo[127] , \apbo[128] , \apbo[129] , \apbo[102] , \apbo[130] , \apbo[131] , \apbo[103] , \apbo[104] , \apbo[105] , \apbo[106] , \apbo[107] , \apbo[108] , \apbo[109] , testout, uarto_fLOW, uarto_rTSN, uarto_rXEN, uarto_sCALER_0_, uarto_sCALER_10_, uarto_sCALER_11_, uarto_sCALER_12_, uarto_sCALER_13_, uarto_sCALER_14_, uarto_sCALER_15_, uarto_sCALER_16_, uarto_sCALER_17_, uarto_sCALER_18_, uarto_sCALER_19_, uarto_sCALER_1_, uarto_sCALER_20_, uarto_sCALER_21_, uarto_sCALER_22_, uarto_sCALER_23_, uarto_sCALER_24_, uarto_sCALER_25_, uarto_sCALER_26_, uarto_sCALER_27_, uarto_sCALER_28_, uarto_sCALER_29_, uarto_sCALER_2_, uarto_sCALER_30_, uarto_sCALER_31_, uarto_sCALER_3_, uarto_sCALER_4_, uarto_sCALER_5_, uarto_sCALER_6_, uarto_sCALER_7_, uarto_sCALER_8_, uarto_sCALER_9_, uarto_tXD, uarto_tXEN
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin    ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd1: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task resolve_wft;
     input integer wftid ;
   begin
     if (wftid > WFT_IDS || wftid <0) begin 
       $display("\nXTB Error: undefined WFT id %0d (valid range is 0..%0d). Exiting...",wftid, WFT_IDS);
       $finish;
     end
     the_wft_id = wftid;
   end
   endtask

   task apply_wft; 
     input integer wftid ;
   begin
     case (wftid) 
       'd0: apply__multiclock_capture_WFT_WFT;
       'd1: apply__default_WFT_WFT;
       default:begin $display("\nXTB Error: undefined WFT id %d. Exiting...",wftid); $finish; end
     endcase
   end
   endtask 

   task  complete_cycle;
     input integer wft_id ;
   begin
     case(wft_id)
       'd0: #(100); // _multiclock_capture_WFT_
       'd1: #(100); // _default_WFT_
     endcase
   end
   endtask

   task set_args;
     input reg [8:0] nargs;
     integer i, na;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [SIG_IDS_W-1:0] sid; 
   begin
     na = 0; sid_args = 'b0; sval_args = 'b0;
     while (na < nargs) begin
       data_i = data_i + 1;
       memel = memall[data_i];
       sid = memel[SIG_IDS_W-1:0];
       if (sid > SIG_IDS-1) begin
         $display($time, "\nXTB Error: Passing wrong signal ID (%0b), valid range is 1..%0d. Exiting...", sid, SIG_IDS-1);
         $finish; 
       end
       sid_args[sid] = 1'b1;
       sidx = sig_idx(sid);
       for (i = 0; i < 2*SignalIDWidth[sid]; i = i + 1)
         sval_args[sidx+i] = memel[i+SIG_IDS_W];
       na=na+1; 
    end  
  end 
  endtask

   function [2*CUM_WIDTH-1:0] sig_idx;
     input reg [SIG_IDS_W-1:0] sid;
     integer i; 
   begin
     sig_idx = 0;
     for (i = 0; i < sid; i = i + 1) sig_idx = sig_idx+2*SignalIDWidth[i];
   end 
   endfunction

   task  assign_ival;
     input reg [SIG_IDS_W-1:0] sid;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [2*MAX_WIDTH-1:0] sval;
     integer i;
   begin 
     sidx = sig_idx(sid);
     for (i = 0; i<2*SignalIDWidth[sid]; i = i + 1) sval[i] = sval_args[sidx+i];
     assign_val(sid , sval);
   end 
   endtask

   task  assign_val;
     input reg [SIG_IDS_W-1:0] sid;
     input reg [2*MAX_WIDTH-1:0] sval;
     reg [MAX_WIDTH-1:0] nb; 
     reg [10:0] idx;
     reg [8:0] n, ns;
   begin
     if (sid > SIG_IDS-1 || sid < 0) begin
       $display("\nXTB Error: Passing wrong signal ID (%d), valid range is 1..%0d. Exiting...", sid, SIG_IDS-1);
       $finish;
     end
     resolve_signal(sid);
     idx = 0; 
     ns = (SignalIDType[sid]==3) ? SignalIDWidth[sid] : 1;
     for (n = 0; n < ns; n = n + 1)
     begin
       if (sval[idx+SignalIDWidth[sid]] === 1'b1) begin
         for (nb = 0; nb < SignalIDWidth[the_sids[n]]; nb = nb + 1) begin
           TMPOUTSIGS_V[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb];
           TMPOUTSIGS_T[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb+SignalIDWidth[sid]];
           ALLOUTSIGIDS[the_sids[n]] = 1'b1; 
           if (sval[idx+nb] !== 1'bx)
             ALLINSIGIDS[the_sids[n]] = 1'b0;
         end
       end
       else begin
         for (nb = 0; nb < SignalIDWidth[the_sids[n]]; nb = nb + 1) begin
           TMPINSIGS_V[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb];
           TMPINSIGS_T[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb+SignalIDWidth[sid]];
           ALLINSIGIDS[the_sids[n]] = 1'b1;
           ALLOUTSIGIDS[the_sids[n]] = 1'b0;
       end 
     end
     idx = idx+SignalIDWidth[the_sids[n]];
     end 
   end 
   endtask

   task  check_sid_args;
     input reg [(NAMELENGTH-1):0] tname;
     input reg [SIG_IDS-1:0] vargs ;
     input reg [SIG_IDS-1:0] cargs ;
     integer i;
   begin
     for (i = 0; i < SIG_IDS-1; i = i + 1)
       if (cargs[i] === 1'b1 && vargs[i] !== 1'b1) begin
         $display("\nXTB Error: Passing wrong signal argument (%s), to Macro/Procedure %s. Exiting...", SignalIDName[i], tname); 
         $finish;
       end 
   end 
   endtask

   task  assign_stmt;
     input integer wftid ;
   begin
     v_count = v_count+1;
     v_count_per_pat = v_count_per_pat+1;
     if (verbose >= 4) $display("XTB: Starting V# %0d at time %0t", v_count, $time);
     apply_wft(wftid);
     complete_cycle(wftid);
   end
   endtask

   task display_stmt;
     input integer stmtid;
   begin
     $display("XTB: Processed statement: %0s", StmtNames[stmtid]);
   end
   endtask

   task read_data;
     integer tdf;
   begin
     tdf = $fopen(TDATA_FILE, "r");
     if (!tdf) begin 
       $display("XTB Error: cannot open %0s file. Exiting...\n", TDATA_FILE);
       $finish; 
      end 
      $fclose(tdf); 
     if (tdfm > 0) $display("XTB: Setting test data file to \"%0s\" (at %0s). Running simulation with new database...", TDATA_FILE, tdfm==1?"compile-time":"runtime");
     else if (verbose >= 1) $display("XTB: Reading test data file \"%0s\" ", TDATA_FILE);
     $readmemb(TDATA_FILE, memall); 
    end
    endtask

   task measure_chain_out;
     input reg [NCHAINS-1:0] chid;
     integer bi, errshown, patoff, prefo;
     integer tsc;
     reg [0:MAXCHLEN-1]  UNLM;
   begin
     tsc = 0;
     prefo = 0;
     UNLM = ~('b0);
     CHAINOUT[0] = (CHAINOUT0);
     UNL = UNLOAD[chid] << prefo;
     CHOUT = CHAINOUT[chid] ^ CH_OUTINV[chid];

     for (bi = 0; bi < MAXCHLEN; bi = bi + 1)
       if (UNL[bi] === 1'bx)  UNLM[bi] = 1'b0;

     for (bi = 0; bi < prefo; bi = bi + 1) UNLM[MAXCHLEN-1-bi] = 1'b0;

     if ((UNL&UNLM) !== (CHOUT&UNLM)) begin
       patoff = (loads > 1 || cur_pat <= 0) ? 0 : 1;
     if (cur_pat <= 0 || cur_pat == last_pat && loads > 1) begin
       $display(">>>  Error during scan pattern %0d %s", (cur_pat<0)?0:cur_pat, (cur_pat==last_pat)?"(detected from final parallel pattern unload)":"");
     end
     else begin
       if (loads > 1) $display(">>>  Error during scan pattern %0d (detected from %0d parallel load/unload)", cur_pat, loads);
       else begin $display(">>>  Error during scan pattern %0d (detected from parallel unload of pattern %0d)", cur_pat, cur_pat-1); end
     end
       for (bi = 0; bi < MAXCHLEN-prefo; bi=bi + 1) begin
         if ((UNL[bi] !== 1'bx) && (UNL[bi] !== CHOUT[bi])) begin
           $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, chain %0s, pin %0s, scan cell %0d", $time, sertmg?v_count+1+bi+prefo:v_count, UNL[bi], CHOUT[bi], CH_NAMES[chid], CH_PINS[chid], bi+prefo+tsc);
           if (diagf) begin 
           if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b) ", CH_PINS[chid], v_count, UNL[bi], CHOUT[bi]);
           else $fdisplay(diagf, "  %0d %0s %0d (exp=%b, got=%b)",
               cur_pat-patoff, CH_PINS[chid], bi+prefo+tsc, UNL[bi], CHOUT[bi]);
           end 
           nbfails = nbfails + 1;
          end 
       end  
     end
   end 
   endtask

   task test_setup;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     if (test_setup_only_once > 0 && test_setup_runs > 0) begin
       if (verbose >= 2) $display("XTB: Skipping macro test_setup...");
       disable test_setup;
     end
     test_setup_runs = test_setup_runs + 1;
     if (verbose >= 2) $display("XTB: Starting macro test_setup..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("test_setup",307'b1, idargs);
     resolve_wft(1);

     assign_val('d`all_inputs , 260'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);
     assign_val('d`all_outputs , 340'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);

     assign_val('d`clk , 2'b00);
     assign_stmt(the_wft_id);

     assign_stmt(the_wft_id);

   end 
   endtask

   task shift_0;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
     input integer stsci;
     input reg stroben;
   begin
    csci = stsci+0; prev_error = -2;
    while (csci < 116) begin
     fsci = csci;
     if (verbose >= 2) $display("XTB: shift %0d, at %0t ", csci, $time);
     resolve_wft(1);
     assign_val('d`_clk , 2'bZ1);
         if (idargs[303] === 1'b1 || idargs[4] === 1'b1) begin 
           LOD=LOAD[0]; assign_val('d`testin , {1'b0, LOD[csci+0]});
         end
         if (stroben && (idargs[306] === 1'b1 || idargs[262] === 1'b1)) begin 
           UNL = UNLOAD[0]; assign_val('d`testout , {1'b1,  UNL[csci+0]});
         end
     assign_stmt(the_wft_id);
     csci = csci+1;
    end
   end
   endtask


   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT0[0:31] = {dut.testout , dut.r_reg_tXEN.SI , dut.r_reg_tXTICK.SI , dut.r_reg_tXSTATE_1_.SI , dut.r_reg_tXSTATE_0_.SI , dut.r_reg_tXD.SI , dut.r_reg_tXCLK_2_.SI , dut.r_reg_tXCLK_1_.SI , dut.r_reg_tXCLK_0_.SI , dut.r_reg_tSHIFT_9_.SI , dut.r_reg_tSHIFT_8_.SI , dut.r_reg_tSHIFT_7_.SI , dut.r_reg_tSHIFT_6_.SI , dut.r_reg_tSHIFT_5_.SI , dut.r_reg_tSHIFT_4_.SI , dut.r_reg_tSHIFT_3_.SI , dut.r_reg_tSHIFT_2_.SI , dut.r_reg_tSHIFT_1_.SI , dut.r_reg_tSHIFT_0_.SI , dut.r_reg_tSEMPTYIRQEN.SI , dut.r_reg_tSEMPTY.SI , dut.r_reg_tPAR.SI , dut.r_reg_tIRQEN.SI , dut.r_reg_tICK.SI , dut.r_reg_tHOLD_0__7_.SI , dut.r_reg_tHOLD_0__6_.SI , dut.r_reg_tHOLD_0__5_.SI , dut.r_reg_tHOLD_0__4_.SI , dut.r_reg_tHOLD_0__3_.SI , dut.r_reg_tHOLD_0__2_.SI , dut.r_reg_tHOLD_0__1_.SI , dut.r_reg_tHOLD_0__0_.SI };
     CHAINOUT0[32:63] = {dut.r_reg_tCNT_0_.SI , dut.r_reg_sTOP.SI , dut.r_reg_sCALER_11_.SI , dut.r_reg_sCALER_10_.SI , dut.r_reg_sCALER_9_.SI , dut.r_reg_sCALER_8_.SI , dut.r_reg_sCALER_7_.SI , dut.r_reg_sCALER_6_.SI , dut.r_reg_sCALER_5_.SI , dut.r_reg_sCALER_4_.SI , dut.r_reg_sCALER_3_.SI , dut.r_reg_sCALER_2_.SI , dut.r_reg_sCALER_1_.SI , dut.r_reg_sCALER_0_.SI , dut.r_reg_rXTICK.SI , dut.r_reg_rXSTATE_2_.SI , dut.r_reg_rXSTATE_1_.SI , dut.r_reg_rXSTATE_0_.SI , dut.r_reg_rXEN.SI , dut.r_reg_rXCLK_2_.SI , dut.r_reg_rXCLK_1_.SI , dut.r_reg_rXCLK_0_.SI , dut.r_reg_rTSN.SI , dut.r_reg_rSHIFT_7_.SI , dut.r_reg_rSHIFT_6_.SI , dut.r_reg_rSHIFT_5_.SI , dut.r_reg_rSHIFT_4_.SI , dut.r_reg_rSHIFT_3_.SI , dut.r_reg_rSHIFT_2_.SI , dut.r_reg_rSHIFT_1_.SI , dut.r_reg_rSHIFT_0_.SI , dut.r_reg_rSEMPTY.SI };
     CHAINOUT0[64:95] = {dut.r_reg_rIRQEN.SI , dut.r_reg_rHOLD_0__7_.SI , dut.r_reg_rHOLD_0__6_.SI , dut.r_reg_rHOLD_0__5_.SI , dut.r_reg_rHOLD_0__4_.SI , dut.r_reg_rHOLD_0__3_.SI , dut.r_reg_rHOLD_0__2_.SI , dut.r_reg_rHOLD_0__1_.SI , dut.r_reg_rHOLD_0__0_.SI , dut.r_reg_rCNT_0_.SI , dut.r_reg_pARSEL.SI , dut.r_reg_pARERR.SI , dut.r_reg_pAREN.SI , dut.r_reg_oVF.SI , dut.r_reg_lOOPB.SI , dut.r_reg_iRQPEND.SI , dut.r_reg_iRQCNT_5_.SI , dut.r_reg_iRQCNT_4_.SI , dut.r_reg_iRQCNT_3_.SI , dut.r_reg_iRQCNT_2_.SI , dut.r_reg_iRQCNT_1_.SI , dut.r_reg_iRQCNT_0_.SI , dut.r_reg_iRQ.SI , dut.r_reg_fRAME.SI , dut.r_reg_fLOW.SI , dut.r_reg_eXTCLKEN.SI , dut.r_reg_eXTCLK.SI , dut.r_reg_dPAR.SI , dut.r_reg_dELAYIRQEN.SI , dut.r_reg_dEBUG.SI , dut.r_reg_bREAKIRQEN.SI , dut.r_reg_bREAK.SI };
     CHAINOUT0[96:115] = {dut.r_reg_bRATE_11_.SI , dut.r_reg_bRATE_10_.SI , dut.r_reg_bRATE_9_.SI , dut.r_reg_bRATE_8_.SI , dut.r_reg_bRATE_7_.SI , dut.r_reg_bRATE_6_.SI , dut.r_reg_bRATE_5_.SI , dut.r_reg_bRATE_4_.SI , dut.r_reg_bRATE_3_.SI , dut.r_reg_bRATE_2_.SI , dut.r_reg_bRATE_1_.SI , dut.r_reg_bRATE_0_.SI , dut.r_reg_cTSN_1_.D , dut.r_reg_cTSN_0_.SI , dut.r_reg_rXDB_1_.D , dut.r_reg_rXDB_0_.SI , dut.r_reg_rXF_4_.D , dut.r_reg_rXF_3_.D , dut.r_reg_rXF_2_.D , dut.r_reg_rXF_1_.D };
   end

   `define CELL0IN0 dut.r_reg_rXF_0_.SI
   `define CHAININ0 {dut.r_reg_tXEN.SI , dut.r_reg_tXTICK.SI , dut.r_reg_tXSTATE_1_.SI , dut.r_reg_tXSTATE_0_.SI , dut.r_reg_tXD.SI , dut.r_reg_tXCLK_2_.SI , dut.r_reg_tXCLK_1_.SI , dut.r_reg_tXCLK_0_.SI , dut.r_reg_tSHIFT_9_.SI , dut.r_reg_tSHIFT_8_.SI , dut.r_reg_tSHIFT_7_.SI , dut.r_reg_tSHIFT_6_.SI , dut.r_reg_tSHIFT_5_.SI , dut.r_reg_tSHIFT_4_.SI , dut.r_reg_tSHIFT_3_.SI , dut.r_reg_tSHIFT_2_.SI , dut.r_reg_tSHIFT_1_.SI , dut.r_reg_tSHIFT_0_.SI , dut.r_reg_tSEMPTYIRQEN.SI , dut.r_reg_tSEMPTY.SI , dut.r_reg_tPAR.SI , \
	dut.r_reg_tIRQEN.SI , dut.r_reg_tICK.SI , dut.r_reg_tHOLD_0__7_.SI , dut.r_reg_tHOLD_0__6_.SI , dut.r_reg_tHOLD_0__5_.SI , dut.r_reg_tHOLD_0__4_.SI , dut.r_reg_tHOLD_0__3_.SI , dut.r_reg_tHOLD_0__2_.SI , dut.r_reg_tHOLD_0__1_.SI , dut.r_reg_tHOLD_0__0_.SI , dut.r_reg_tCNT_0_.SI , dut.r_reg_sTOP.SI , dut.r_reg_sCALER_11_.SI , dut.r_reg_sCALER_10_.SI , dut.r_reg_sCALER_9_.SI , dut.r_reg_sCALER_8_.SI , dut.r_reg_sCALER_7_.SI , dut.r_reg_sCALER_6_.SI , dut.r_reg_sCALER_5_.SI , dut.r_reg_sCALER_4_.SI , dut.r_reg_sCALER_3_.SI , dut.r_reg_sCALER_2_.SI , dut.r_reg_sCALER_1_.SI , dut.r_reg_sCALER_0_.SI , dut.r_reg_rXTICK.SI , dut.r_reg_rXSTATE_2_.SI , dut.r_reg_rXSTATE_1_.SI , dut.r_reg_rXSTATE_0_.SI , dut.r_reg_rXEN.SI , dut.r_reg_rXCLK_2_.SI , dut.r_reg_rXCLK_1_.SI , dut.r_reg_rXCLK_0_.SI , dut.r_reg_rTSN.SI , dut.r_reg_rSHIFT_7_.SI , dut.r_reg_rSHIFT_6_.SI , dut.r_reg_rSHIFT_5_.SI , dut.r_reg_rSHIFT_4_.SI , dut.r_reg_rSHIFT_3_.SI , dut.r_reg_rSHIFT_2_.SI , dut.r_reg_rSHIFT_1_.SI , dut.r_reg_rSHIFT_0_.SI , dut.r_reg_rSEMPTY.SI , dut.r_reg_rIRQEN.SI , dut.r_reg_rHOLD_0__7_.SI , dut.r_reg_rHOLD_0__6_.SI , dut.r_reg_rHOLD_0__5_.SI , dut.r_reg_rHOLD_0__4_.SI , \
	dut.r_reg_rHOLD_0__3_.SI , dut.r_reg_rHOLD_0__2_.SI , dut.r_reg_rHOLD_0__1_.SI , dut.r_reg_rHOLD_0__0_.SI , dut.r_reg_rCNT_0_.SI , dut.r_reg_pARSEL.SI , dut.r_reg_pARERR.SI , dut.r_reg_pAREN.SI , dut.r_reg_oVF.SI , dut.r_reg_lOOPB.SI , dut.r_reg_iRQPEND.SI , dut.r_reg_iRQCNT_5_.SI , dut.r_reg_iRQCNT_4_.SI , dut.r_reg_iRQCNT_3_.SI , dut.r_reg_iRQCNT_2_.SI , dut.r_reg_iRQCNT_1_.SI , dut.r_reg_iRQCNT_0_.SI , dut.r_reg_iRQ.SI , dut.r_reg_fRAME.SI , dut.r_reg_fLOW.SI , dut.r_reg_eXTCLKEN.SI , dut.r_reg_eXTCLK.SI , dut.r_reg_dPAR.SI , dut.r_reg_dELAYIRQEN.SI , dut.r_reg_dEBUG.SI , dut.r_reg_bREAKIRQEN.SI , dut.r_reg_bREAK.SI , dut.r_reg_bRATE_11_.SI , dut.r_reg_bRATE_10_.SI , dut.r_reg_bRATE_9_.SI , dut.r_reg_bRATE_8_.SI , dut.r_reg_bRATE_7_.SI , dut.r_reg_bRATE_6_.SI , dut.r_reg_bRATE_5_.SI , dut.r_reg_bRATE_4_.SI , dut.r_reg_bRATE_3_.SI , dut.r_reg_bRATE_2_.SI , dut.r_reg_bRATE_1_.SI , dut.r_reg_bRATE_0_.SI , dut.r_reg_cTSN_1_.D , dut.r_reg_cTSN_0_.SI , dut.r_reg_rXDB_1_.D , dut.r_reg_rXDB_0_.SI , dut.r_reg_rXF_4_.D , dut.r_reg_rXF_3_.D , dut.r_reg_rXF_2_.D , dut.r_reg_rXF_1_.D ,  `CELL0IN0 }


   task p_shift_0;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
     integer i, j;
   begin
     if (~(idargs[303] | idargs[4] | idargs[306] | idargs[262] )) 
       disable p_shift_0; 
     if (SSHIFTS < MAXCHLEN) begin
         if (verbose >= 2) $display("XTB: (parallel) shift, at %0t  ", $time);
         resolve_wft(1);
     fork 
       begin: b1 
         #40 ;
         -> strobe_scells;
         repeat (SYNC_LATENCY) #0;
         if (idargs[306] === 1'b1 ||  idargs[262] === 1'b1) begin 
           measure_chain_out('d0);
         end
         if (idargs[303] === 1'b1 ||  idargs[4] === 1'b1) begin 
           LOD0=(LOAD[0] >> SSHIFTS) ^ CH_INPINV[0];
         end

           ->force_scells; 
         #0;
       end 
       begin: b2 
         assign_val('d`_clk , 2'bZ1);
         assign_stmt(the_wft_id);
       end 
     join 

     ->release_scells; 

         if (sertmg == 1) begin
           v_count = v_count + PARSERINC - SSHIFTS - 1;
           for (i = 0; i < PARSERINC - SSHIFTS - 1; i = i+1) 
             complete_cycle(the_wft_id);
         end
         if (SSHIFTS > 0) shift_0(idargs, valargs, MAXCHLEN-SSHIFTS, 0) ; 

     end 
     else begin 
         shift_0(idargs, valargs, 0, 1);
     end
   end
   endtask


   always /* ParallelShiftMode */ @(force_scells) begin 
           force `CHAININ0 = LOD0;

   end


   always /* ParallelShiftMode */ @(release_scells) begin 
     release `CHAININ0; 
   end

   task load_unload;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     if (verbose >= 2) $display("XTB: Starting proc load_unload..., T=%0t, V=%0d", $time, v_count+1);

     if (xtb_sim_mode == 0 && ser_pats > 0 && cur_pat == (ser_pats+first_pat)) begin
       $display("XTB: Switching into Parallel simulation mode at pattern %0d (using %0d serial shifts)", cur_pat, SSHIFTS);
       xtb_sim_mode = 1; 
     end
     if (cur_pat != prev_pat) begin
       loads = 1;
       prev_pat = cur_pat;
       if (cur_pat % rep_pat == 0)
         $display("XTB: Begin %0s scan load for pattern %0d (T=%0t, V=%0d)", xtb_sim_mode?"parallel":"serial", cur_pat, $time, v_count+1);
     end
     else begin
       loads = loads + 1;
       if (cur_pat % rep_pat == 0)
         $display("XTB: Begin %0s scan load for pattern %0d, unload %0d (T=%0t, V=%0d)", xtb_sim_mode?"parallel":"serial", cur_pat, loads, $time, v_count+1);
     end
     save_context;
     resolve_wft(1);

     assign_val('d`all_inputs , 260'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0XXXXXXX);
     assign_val('d`all_outputs , 340'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);

     assign_val('d`testen , 2'b01);
     assign_stmt(the_wft_id);

     if (xtb_sim_mode)      p_shift_0(idargs, valargs);
     else      shift_0(idargs, valargs, 0, 1);

     restore_context;
   end 
   endtask

   task multiclock_capture;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     if (verbose >= 2) $display("XTB: Starting proc multiclock_capture..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("multiclock_capture",307'b1, idargs);
     save_context;
     resolve_wft(0);

     assign_val('d`all_inputs , 260'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0XXXXXXX);
     assign_val('d`all_outputs , 340'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);

     if (idargs[300] === 1'b1) assign_ival('d`_pi );
     if (idargs[53] === 1'b1) assign_ival('d`apbi_pADDR_0_ );
     if (idargs[43] === 1'b1) assign_ival('d`apbi_pADDR_10_ );
     if (idargs[42] === 1'b1) assign_ival('d`apbi_pADDR_11_ );
     if (idargs[41] === 1'b1) assign_ival('d`apbi_pADDR_12_ );
     if (idargs[40] === 1'b1) assign_ival('d`apbi_pADDR_13_ );
     if (idargs[39] === 1'b1) assign_ival('d`apbi_pADDR_14_ );
     if (idargs[38] === 1'b1) assign_ival('d`apbi_pADDR_15_ );
     if (idargs[37] === 1'b1) assign_ival('d`apbi_pADDR_16_ );
     if (idargs[36] === 1'b1) assign_ival('d`apbi_pADDR_17_ );
     if (idargs[35] === 1'b1) assign_ival('d`apbi_pADDR_18_ );
     if (idargs[34] === 1'b1) assign_ival('d`apbi_pADDR_19_ );
     if (idargs[52] === 1'b1) assign_ival('d`apbi_pADDR_1_ );
     if (idargs[33] === 1'b1) assign_ival('d`apbi_pADDR_20_ );
     if (idargs[32] === 1'b1) assign_ival('d`apbi_pADDR_21_ );
     if (idargs[31] === 1'b1) assign_ival('d`apbi_pADDR_22_ );
     if (idargs[30] === 1'b1) assign_ival('d`apbi_pADDR_23_ );
     if (idargs[29] === 1'b1) assign_ival('d`apbi_pADDR_24_ );
     if (idargs[28] === 1'b1) assign_ival('d`apbi_pADDR_25_ );
     if (idargs[27] === 1'b1) assign_ival('d`apbi_pADDR_26_ );
     if (idargs[26] === 1'b1) assign_ival('d`apbi_pADDR_27_ );
     if (idargs[25] === 1'b1) assign_ival('d`apbi_pADDR_28_ );
     if (idargs[24] === 1'b1) assign_ival('d`apbi_pADDR_29_ );
     if (idargs[51] === 1'b1) assign_ival('d`apbi_pADDR_2_ );
     if (idargs[23] === 1'b1) assign_ival('d`apbi_pADDR_30_ );
     if (idargs[22] === 1'b1) assign_ival('d`apbi_pADDR_31_ );
     if (idargs[50] === 1'b1) assign_ival('d`apbi_pADDR_3_ );
     if (idargs[49] === 1'b1) assign_ival('d`apbi_pADDR_4_ );
     if (idargs[48] === 1'b1) assign_ival('d`apbi_pADDR_5_ );
     if (idargs[47] === 1'b1) assign_ival('d`apbi_pADDR_6_ );
     if (idargs[46] === 1'b1) assign_ival('d`apbi_pADDR_7_ );
     if (idargs[45] === 1'b1) assign_ival('d`apbi_pADDR_8_ );
     if (idargs[44] === 1'b1) assign_ival('d`apbi_pADDR_9_ );
     if (idargs[21] === 1'b1) assign_ival('d`apbi_pENABLE );
     if (idargs[118] === 1'b1) assign_ival('d`apbi_pIRQ_0_ );
     if (idargs[108] === 1'b1) assign_ival('d`apbi_pIRQ_10_ );
     if (idargs[107] === 1'b1) assign_ival('d`apbi_pIRQ_11_ );
     if (idargs[106] === 1'b1) assign_ival('d`apbi_pIRQ_12_ );
     if (idargs[105] === 1'b1) assign_ival('d`apbi_pIRQ_13_ );
     if (idargs[104] === 1'b1) assign_ival('d`apbi_pIRQ_14_ );
     if (idargs[103] === 1'b1) assign_ival('d`apbi_pIRQ_15_ );
     if (idargs[102] === 1'b1) assign_ival('d`apbi_pIRQ_16_ );
     if (idargs[101] === 1'b1) assign_ival('d`apbi_pIRQ_17_ );
     if (idargs[100] === 1'b1) assign_ival('d`apbi_pIRQ_18_ );
     if (idargs[99] === 1'b1) assign_ival('d`apbi_pIRQ_19_ );
     if (idargs[117] === 1'b1) assign_ival('d`apbi_pIRQ_1_ );
     if (idargs[98] === 1'b1) assign_ival('d`apbi_pIRQ_20_ );
     if (idargs[97] === 1'b1) assign_ival('d`apbi_pIRQ_21_ );
     if (idargs[96] === 1'b1) assign_ival('d`apbi_pIRQ_22_ );
     if (idargs[95] === 1'b1) assign_ival('d`apbi_pIRQ_23_ );
     if (idargs[94] === 1'b1) assign_ival('d`apbi_pIRQ_24_ );
     if (idargs[93] === 1'b1) assign_ival('d`apbi_pIRQ_25_ );
     if (idargs[92] === 1'b1) assign_ival('d`apbi_pIRQ_26_ );
     if (idargs[91] === 1'b1) assign_ival('d`apbi_pIRQ_27_ );
     if (idargs[90] === 1'b1) assign_ival('d`apbi_pIRQ_28_ );
     if (idargs[89] === 1'b1) assign_ival('d`apbi_pIRQ_29_ );
     if (idargs[116] === 1'b1) assign_ival('d`apbi_pIRQ_2_ );
     if (idargs[88] === 1'b1) assign_ival('d`apbi_pIRQ_30_ );
     if (idargs[87] === 1'b1) assign_ival('d`apbi_pIRQ_31_ );
     if (idargs[115] === 1'b1) assign_ival('d`apbi_pIRQ_3_ );
     if (idargs[114] === 1'b1) assign_ival('d`apbi_pIRQ_4_ );
     if (idargs[113] === 1'b1) assign_ival('d`apbi_pIRQ_5_ );
     if (idargs[112] === 1'b1) assign_ival('d`apbi_pIRQ_6_ );
     if (idargs[111] === 1'b1) assign_ival('d`apbi_pIRQ_7_ );
     if (idargs[110] === 1'b1) assign_ival('d`apbi_pIRQ_8_ );
     if (idargs[109] === 1'b1) assign_ival('d`apbi_pIRQ_9_ );
     if (idargs[5] === 1'b1) assign_ival('d`apbi_pSEL_0_ );
     if (idargs[15] === 1'b1) assign_ival('d`apbi_pSEL_10_ );
     if (idargs[16] === 1'b1) assign_ival('d`apbi_pSEL_11_ );
     if (idargs[17] === 1'b1) assign_ival('d`apbi_pSEL_12_ );
     if (idargs[18] === 1'b1) assign_ival('d`apbi_pSEL_13_ );
     if (idargs[19] === 1'b1) assign_ival('d`apbi_pSEL_14_ );
     if (idargs[20] === 1'b1) assign_ival('d`apbi_pSEL_15_ );
     if (idargs[6] === 1'b1) assign_ival('d`apbi_pSEL_1_ );
     if (idargs[7] === 1'b1) assign_ival('d`apbi_pSEL_2_ );
     if (idargs[8] === 1'b1) assign_ival('d`apbi_pSEL_3_ );
     if (idargs[9] === 1'b1) assign_ival('d`apbi_pSEL_4_ );
     if (idargs[10] === 1'b1) assign_ival('d`apbi_pSEL_5_ );
     if (idargs[11] === 1'b1) assign_ival('d`apbi_pSEL_6_ );
     if (idargs[12] === 1'b1) assign_ival('d`apbi_pSEL_7_ );
     if (idargs[13] === 1'b1) assign_ival('d`apbi_pSEL_8_ );
     if (idargs[14] === 1'b1) assign_ival('d`apbi_pSEL_9_ );
     if (idargs[86] === 1'b1) assign_ival('d`apbi_pWDATA_0_ );
     if (idargs[76] === 1'b1) assign_ival('d`apbi_pWDATA_10_ );
     if (idargs[75] === 1'b1) assign_ival('d`apbi_pWDATA_11_ );
     if (idargs[74] === 1'b1) assign_ival('d`apbi_pWDATA_12_ );
     if (idargs[73] === 1'b1) assign_ival('d`apbi_pWDATA_13_ );
     if (idargs[72] === 1'b1) assign_ival('d`apbi_pWDATA_14_ );
     if (idargs[71] === 1'b1) assign_ival('d`apbi_pWDATA_15_ );
     if (idargs[70] === 1'b1) assign_ival('d`apbi_pWDATA_16_ );
     if (idargs[69] === 1'b1) assign_ival('d`apbi_pWDATA_17_ );
     if (idargs[68] === 1'b1) assign_ival('d`apbi_pWDATA_18_ );
     if (idargs[67] === 1'b1) assign_ival('d`apbi_pWDATA_19_ );
     if (idargs[85] === 1'b1) assign_ival('d`apbi_pWDATA_1_ );
     if (idargs[66] === 1'b1) assign_ival('d`apbi_pWDATA_20_ );
     if (idargs[65] === 1'b1) assign_ival('d`apbi_pWDATA_21_ );
     if (idargs[64] === 1'b1) assign_ival('d`apbi_pWDATA_22_ );
     if (idargs[63] === 1'b1) assign_ival('d`apbi_pWDATA_23_ );
     if (idargs[62] === 1'b1) assign_ival('d`apbi_pWDATA_24_ );
     if (idargs[61] === 1'b1) assign_ival('d`apbi_pWDATA_25_ );
     if (idargs[60] === 1'b1) assign_ival('d`apbi_pWDATA_26_ );
     if (idargs[59] === 1'b1) assign_ival('d`apbi_pWDATA_27_ );
     if (idargs[58] === 1'b1) assign_ival('d`apbi_pWDATA_28_ );
     if (idargs[57] === 1'b1) assign_ival('d`apbi_pWDATA_29_ );
     if (idargs[84] === 1'b1) assign_ival('d`apbi_pWDATA_2_ );
     if (idargs[56] === 1'b1) assign_ival('d`apbi_pWDATA_30_ );
     if (idargs[55] === 1'b1) assign_ival('d`apbi_pWDATA_31_ );
     if (idargs[83] === 1'b1) assign_ival('d`apbi_pWDATA_3_ );
     if (idargs[82] === 1'b1) assign_ival('d`apbi_pWDATA_4_ );
     if (idargs[81] === 1'b1) assign_ival('d`apbi_pWDATA_5_ );
     if (idargs[80] === 1'b1) assign_ival('d`apbi_pWDATA_6_ );
     if (idargs[79] === 1'b1) assign_ival('d`apbi_pWDATA_7_ );
     if (idargs[78] === 1'b1) assign_ival('d`apbi_pWDATA_8_ );
     if (idargs[77] === 1'b1) assign_ival('d`apbi_pWDATA_9_ );
     if (idargs[54] === 1'b1) assign_ival('d`apbi_pWRITE );
     if (idargs[121] === 1'b1) assign_ival('d`apbi_sCANEN );
     if (idargs[119] === 1'b1) assign_ival('d`apbi_tESTEN );
     if (idargs[126] === 1'b1) assign_ival('d`apbi_tESTIN_0_ );
     if (idargs[125] === 1'b1) assign_ival('d`apbi_tESTIN_1_ );
     if (idargs[124] === 1'b1) assign_ival('d`apbi_tESTIN_2_ );
     if (idargs[123] === 1'b1) assign_ival('d`apbi_tESTIN_3_ );
     if (idargs[122] === 1'b1) assign_ival('d`apbi_tESTOEN );
     if (idargs[120] === 1'b1) assign_ival('d`apbi_tESTRST );
     if (idargs[1] === 1'b1) assign_ival('d`clk );
     if (idargs[0] === 1'b1) assign_ival('d`rst );
     if (idargs[2] === 1'b1) assign_ival('d`testen );
     if (idargs[4] === 1'b1) assign_ival('d`testin );
     if (idargs[3] === 1'b1) assign_ival('d`testrst );
     if (idargs[128] === 1'b1) assign_ival('d`uarti_cTSN );
     if (idargs[129] === 1'b1) assign_ival('d`uarti_eXTCLK );
     if (idargs[127] === 1'b1) assign_ival('d`uarti_rXD );
     if (idargs[302] === 1'b1) assign_ival('d`_po );
     if (idargs[225] === 1'b1) assign_ival('d`\apbo[36]  );
     if (idargs[215] === 1'b1) assign_ival('d`\apbo[46]  );
     if (idargs[214] === 1'b1) assign_ival('d`\apbo[47]  );
     if (idargs[213] === 1'b1) assign_ival('d`\apbo[48]  );
     if (idargs[212] === 1'b1) assign_ival('d`\apbo[49]  );
     if (idargs[211] === 1'b1) assign_ival('d`\apbo[50]  );
     if (idargs[210] === 1'b1) assign_ival('d`\apbo[51]  );
     if (idargs[209] === 1'b1) assign_ival('d`\apbo[52]  );
     if (idargs[208] === 1'b1) assign_ival('d`\apbo[53]  );
     if (idargs[207] === 1'b1) assign_ival('d`\apbo[54]  );
     if (idargs[206] === 1'b1) assign_ival('d`\apbo[55]  );
     if (idargs[224] === 1'b1) assign_ival('d`\apbo[37]  );
     if (idargs[205] === 1'b1) assign_ival('d`\apbo[56]  );
     if (idargs[204] === 1'b1) assign_ival('d`\apbo[57]  );
     if (idargs[203] === 1'b1) assign_ival('d`\apbo[58]  );
     if (idargs[202] === 1'b1) assign_ival('d`\apbo[59]  );
     if (idargs[201] === 1'b1) assign_ival('d`\apbo[60]  );
     if (idargs[200] === 1'b1) assign_ival('d`\apbo[61]  );
     if (idargs[199] === 1'b1) assign_ival('d`\apbo[62]  );
     if (idargs[198] === 1'b1) assign_ival('d`\apbo[63]  );
     if (idargs[197] === 1'b1) assign_ival('d`\apbo[64]  );
     if (idargs[196] === 1'b1) assign_ival('d`\apbo[65]  );
     if (idargs[223] === 1'b1) assign_ival('d`\apbo[38]  );
     if (idargs[195] === 1'b1) assign_ival('d`\apbo[66]  );
     if (idargs[194] === 1'b1) assign_ival('d`\apbo[67]  );
     if (idargs[222] === 1'b1) assign_ival('d`\apbo[39]  );
     if (idargs[221] === 1'b1) assign_ival('d`\apbo[40]  );
     if (idargs[220] === 1'b1) assign_ival('d`\apbo[41]  );
     if (idargs[219] === 1'b1) assign_ival('d`\apbo[42]  );
     if (idargs[218] === 1'b1) assign_ival('d`\apbo[43]  );
     if (idargs[217] === 1'b1) assign_ival('d`\apbo[44]  );
     if (idargs[216] === 1'b1) assign_ival('d`\apbo[45]  );
     if (idargs[257] === 1'b1) assign_ival('d`\apbo[4]  );
     if (idargs[247] === 1'b1) assign_ival('d`\apbo[14]  );
     if (idargs[246] === 1'b1) assign_ival('d`\apbo[15]  );
     if (idargs[245] === 1'b1) assign_ival('d`\apbo[16]  );
     if (idargs[244] === 1'b1) assign_ival('d`\apbo[17]  );
     if (idargs[243] === 1'b1) assign_ival('d`\apbo[18]  );
     if (idargs[242] === 1'b1) assign_ival('d`\apbo[19]  );
     if (idargs[241] === 1'b1) assign_ival('d`\apbo[20]  );
     if (idargs[240] === 1'b1) assign_ival('d`\apbo[21]  );
     if (idargs[239] === 1'b1) assign_ival('d`\apbo[22]  );
     if (idargs[238] === 1'b1) assign_ival('d`\apbo[23]  );
     if (idargs[256] === 1'b1) assign_ival('d`\apbo[5]  );
     if (idargs[237] === 1'b1) assign_ival('d`\apbo[24]  );
     if (idargs[236] === 1'b1) assign_ival('d`\apbo[25]  );
     if (idargs[235] === 1'b1) assign_ival('d`\apbo[26]  );
     if (idargs[234] === 1'b1) assign_ival('d`\apbo[27]  );
     if (idargs[233] === 1'b1) assign_ival('d`\apbo[28]  );
     if (idargs[232] === 1'b1) assign_ival('d`\apbo[29]  );
     if (idargs[231] === 1'b1) assign_ival('d`\apbo[30]  );
     if (idargs[230] === 1'b1) assign_ival('d`\apbo[31]  );
     if (idargs[229] === 1'b1) assign_ival('d`\apbo[32]  );
     if (idargs[228] === 1'b1) assign_ival('d`\apbo[33]  );
     if (idargs[255] === 1'b1) assign_ival('d`\apbo[6]  );
     if (idargs[227] === 1'b1) assign_ival('d`\apbo[34]  );
     if (idargs[226] === 1'b1) assign_ival('d`\apbo[35]  );
     if (idargs[254] === 1'b1) assign_ival('d`\apbo[7]  );
     if (idargs[253] === 1'b1) assign_ival('d`\apbo[8]  );
     if (idargs[252] === 1'b1) assign_ival('d`\apbo[9]  );
     if (idargs[251] === 1'b1) assign_ival('d`\apbo[10]  );
     if (idargs[250] === 1'b1) assign_ival('d`\apbo[11]  );
     if (idargs[249] === 1'b1) assign_ival('d`\apbo[12]  );
     if (idargs[248] === 1'b1) assign_ival('d`\apbo[13]  );
     if (idargs[261] === 1'b1) assign_ival('d`\apbo[0]  );
     if (idargs[260] === 1'b1) assign_ival('d`\apbo[1]  );
     if (idargs[259] === 1'b1) assign_ival('d`\apbo[2]  );
     if (idargs[258] === 1'b1) assign_ival('d`\apbo[3]  );
     if (idargs[193] === 1'b1) assign_ival('d`\apbo[68]  );
     if (idargs[183] === 1'b1) assign_ival('d`\apbo[78]  );
     if (idargs[182] === 1'b1) assign_ival('d`\apbo[79]  );
     if (idargs[181] === 1'b1) assign_ival('d`\apbo[80]  );
     if (idargs[180] === 1'b1) assign_ival('d`\apbo[81]  );
     if (idargs[179] === 1'b1) assign_ival('d`\apbo[82]  );
     if (idargs[178] === 1'b1) assign_ival('d`\apbo[83]  );
     if (idargs[177] === 1'b1) assign_ival('d`\apbo[84]  );
     if (idargs[176] === 1'b1) assign_ival('d`\apbo[85]  );
     if (idargs[175] === 1'b1) assign_ival('d`\apbo[86]  );
     if (idargs[174] === 1'b1) assign_ival('d`\apbo[87]  );
     if (idargs[192] === 1'b1) assign_ival('d`\apbo[69]  );
     if (idargs[173] === 1'b1) assign_ival('d`\apbo[88]  );
     if (idargs[172] === 1'b1) assign_ival('d`\apbo[89]  );
     if (idargs[171] === 1'b1) assign_ival('d`\apbo[90]  );
     if (idargs[170] === 1'b1) assign_ival('d`\apbo[91]  );
     if (idargs[169] === 1'b1) assign_ival('d`\apbo[92]  );
     if (idargs[168] === 1'b1) assign_ival('d`\apbo[93]  );
     if (idargs[167] === 1'b1) assign_ival('d`\apbo[94]  );
     if (idargs[166] === 1'b1) assign_ival('d`\apbo[95]  );
     if (idargs[165] === 1'b1) assign_ival('d`\apbo[96]  );
     if (idargs[164] === 1'b1) assign_ival('d`\apbo[97]  );
     if (idargs[191] === 1'b1) assign_ival('d`\apbo[70]  );
     if (idargs[163] === 1'b1) assign_ival('d`\apbo[98]  );
     if (idargs[162] === 1'b1) assign_ival('d`\apbo[99]  );
     if (idargs[190] === 1'b1) assign_ival('d`\apbo[71]  );
     if (idargs[189] === 1'b1) assign_ival('d`\apbo[72]  );
     if (idargs[188] === 1'b1) assign_ival('d`\apbo[73]  );
     if (idargs[187] === 1'b1) assign_ival('d`\apbo[74]  );
     if (idargs[186] === 1'b1) assign_ival('d`\apbo[75]  );
     if (idargs[185] === 1'b1) assign_ival('d`\apbo[76]  );
     if (idargs[184] === 1'b1) assign_ival('d`\apbo[77]  );
     if (idargs[161] === 1'b1) assign_ival('d`\apbo[100]  );
     if (idargs[151] === 1'b1) assign_ival('d`\apbo[110]  );
     if (idargs[150] === 1'b1) assign_ival('d`\apbo[111]  );
     if (idargs[149] === 1'b1) assign_ival('d`\apbo[112]  );
     if (idargs[148] === 1'b1) assign_ival('d`\apbo[113]  );
     if (idargs[147] === 1'b1) assign_ival('d`\apbo[114]  );
     if (idargs[146] === 1'b1) assign_ival('d`\apbo[115]  );
     if (idargs[145] === 1'b1) assign_ival('d`\apbo[116]  );
     if (idargs[144] === 1'b1) assign_ival('d`\apbo[117]  );
     if (idargs[143] === 1'b1) assign_ival('d`\apbo[118]  );
     if (idargs[142] === 1'b1) assign_ival('d`\apbo[119]  );
     if (idargs[160] === 1'b1) assign_ival('d`\apbo[101]  );
     if (idargs[141] === 1'b1) assign_ival('d`\apbo[120]  );
     if (idargs[140] === 1'b1) assign_ival('d`\apbo[121]  );
     if (idargs[139] === 1'b1) assign_ival('d`\apbo[122]  );
     if (idargs[138] === 1'b1) assign_ival('d`\apbo[123]  );
     if (idargs[137] === 1'b1) assign_ival('d`\apbo[124]  );
     if (idargs[136] === 1'b1) assign_ival('d`\apbo[125]  );
     if (idargs[135] === 1'b1) assign_ival('d`\apbo[126]  );
     if (idargs[134] === 1'b1) assign_ival('d`\apbo[127]  );
     if (idargs[133] === 1'b1) assign_ival('d`\apbo[128]  );
     if (idargs[132] === 1'b1) assign_ival('d`\apbo[129]  );
     if (idargs[159] === 1'b1) assign_ival('d`\apbo[102]  );
     if (idargs[131] === 1'b1) assign_ival('d`\apbo[130]  );
     if (idargs[130] === 1'b1) assign_ival('d`\apbo[131]  );
     if (idargs[158] === 1'b1) assign_ival('d`\apbo[103]  );
     if (idargs[157] === 1'b1) assign_ival('d`\apbo[104]  );
     if (idargs[156] === 1'b1) assign_ival('d`\apbo[105]  );
     if (idargs[155] === 1'b1) assign_ival('d`\apbo[106]  );
     if (idargs[154] === 1'b1) assign_ival('d`\apbo[107]  );
     if (idargs[153] === 1'b1) assign_ival('d`\apbo[108]  );
     if (idargs[152] === 1'b1) assign_ival('d`\apbo[109]  );
     if (idargs[262] === 1'b1) assign_ival('d`testout );
     if (idargs[298] === 1'b1) assign_ival('d`uarto_fLOW );
     if (idargs[263] === 1'b1) assign_ival('d`uarto_rTSN );
     if (idargs[299] === 1'b1) assign_ival('d`uarto_rXEN );
     if (idargs[296] === 1'b1) assign_ival('d`uarto_sCALER_0_ );
     if (idargs[286] === 1'b1) assign_ival('d`uarto_sCALER_10_ );
     if (idargs[285] === 1'b1) assign_ival('d`uarto_sCALER_11_ );
     if (idargs[284] === 1'b1) assign_ival('d`uarto_sCALER_12_ );
     if (idargs[283] === 1'b1) assign_ival('d`uarto_sCALER_13_ );
     if (idargs[282] === 1'b1) assign_ival('d`uarto_sCALER_14_ );
     if (idargs[281] === 1'b1) assign_ival('d`uarto_sCALER_15_ );
     if (idargs[280] === 1'b1) assign_ival('d`uarto_sCALER_16_ );
     if (idargs[279] === 1'b1) assign_ival('d`uarto_sCALER_17_ );
     if (idargs[278] === 1'b1) assign_ival('d`uarto_sCALER_18_ );
     if (idargs[277] === 1'b1) assign_ival('d`uarto_sCALER_19_ );
     if (idargs[295] === 1'b1) assign_ival('d`uarto_sCALER_1_ );
     if (idargs[276] === 1'b1) assign_ival('d`uarto_sCALER_20_ );
     if (idargs[275] === 1'b1) assign_ival('d`uarto_sCALER_21_ );
     if (idargs[274] === 1'b1) assign_ival('d`uarto_sCALER_22_ );
     if (idargs[273] === 1'b1) assign_ival('d`uarto_sCALER_23_ );
     if (idargs[272] === 1'b1) assign_ival('d`uarto_sCALER_24_ );
     if (idargs[271] === 1'b1) assign_ival('d`uarto_sCALER_25_ );
     if (idargs[270] === 1'b1) assign_ival('d`uarto_sCALER_26_ );
     if (idargs[269] === 1'b1) assign_ival('d`uarto_sCALER_27_ );
     if (idargs[268] === 1'b1) assign_ival('d`uarto_sCALER_28_ );
     if (idargs[267] === 1'b1) assign_ival('d`uarto_sCALER_29_ );
     if (idargs[294] === 1'b1) assign_ival('d`uarto_sCALER_2_ );
     if (idargs[266] === 1'b1) assign_ival('d`uarto_sCALER_30_ );
     if (idargs[265] === 1'b1) assign_ival('d`uarto_sCALER_31_ );
     if (idargs[293] === 1'b1) assign_ival('d`uarto_sCALER_3_ );
     if (idargs[292] === 1'b1) assign_ival('d`uarto_sCALER_4_ );
     if (idargs[291] === 1'b1) assign_ival('d`uarto_sCALER_5_ );
     if (idargs[290] === 1'b1) assign_ival('d`uarto_sCALER_6_ );
     if (idargs[289] === 1'b1) assign_ival('d`uarto_sCALER_7_ );
     if (idargs[288] === 1'b1) assign_ival('d`uarto_sCALER_8_ );
     if (idargs[287] === 1'b1) assign_ival('d`uarto_sCALER_9_ );
     if (idargs[264] === 1'b1) assign_ival('d`uarto_tXD );
     if (idargs[297] === 1'b1) assign_ival('d`uarto_tXEN );
     assign_stmt(the_wft_id);

     restore_context;
   end 
   endtask


   always @(start_part) begin: _burst__pattern__proc_unit

     integer nbpats, i;
     reg [8:0] nargs, na;
     reg [8:0] args;

     integer tdf;
     nbpats = 0; cur_pat = -1;
     end_pat = 0; v_count = 0; v_count_per_pat = 0;
     nbfails = 0;
     prev_pat = -2; prev_error = -2; first_pat = 0;
     diagf = 0;
     read_data;
     data_i = 1; 
     popcode = 'd0;

     if (diagm > 0) begin
       if (diagm > 2) begin
         $display("XTB Warning: wrong diagnosis mode (%0d), using default mode 1 (pattern based)", diagm);
         diagm = 1 ; 
       end  
       `ifdef tmax_diag_file 
         diag_file = `tmax_diag_file;
       `else 
         diag_file = "apbuart_test.diag"; 
       `endif
       diagf = $fopen(diag_file);
       if (diagf == 0) begin
         $display("XTB Error: Unable to open diagnosis file %s (for writing). Exiting...", diag_file);
         $finish; 
       end
       if (verbose >= 1) $display("XTB: User requesting TetraMAX compliant diagnosis file: %0s", diag_file);
       $fdisplay(diagf, "// Serial scan error:       <pat#> \t<pin_name> \t<shift_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// USF Parallel scan error: <pat#> \t<pin_name> \t<shift_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// DSF Parallel scan error: <pat#> \t<chain_name> \t<cell_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// Capture error:           <pat#> \t<pin_name> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// Cycle based error:          C \t<pin_name> \t<vect_nbr> \t(<expected_value> <simulated_value>)\n\n");

     end 

     memel = memall[data_i]; 
     total_pats = memel[31:0];
     data_i=data_i+1;

     last_pat = -1;

     if (total_pats < 0 || |(total_pats) === 1'bx) begin
       $display("XTB Error: Inconsistent total number of patterns (%d). Exiting...",  total_pats);
       $finish;
     end

     if (verbose >= 1) $display("XTB: Total number of patterns  %0d",  total_pats); 
     if (last_pat == -1) last_pat = total_pats - 1;

     `ifdef tmax_n_pattern_sim
     last_pat=`tmax_n_pattern_sim;
     `endif

     `ifdef tmax_test_setup_only_once
     test_setup_only_once = 1;
     `endif

     xtb_sim_mode = 1;
     SSHIFTS = DFSHIFTS;

     ser_pats = 0;
     csim_op = -1;

     `ifdef tmax_serial
       if (~(`tmax_serial & 1'b1) == 1'b0) 
         ser_pats = last_pat + 1;
       else 
         ser_pats = `tmax_serial + 0;
       if (ser_pats > 0)
       csim_op = 0;
       `ifdef tmax_parallel 
         SSHIFTS = `tmax_parallel + 0; 
         if (ser_pats  >= last_pat + 1) begin	 
           csim_op = 2; 
         end 
         else if (ser_pats == 0)
           csim_op = 1;
       `endif
     `else 
       `ifdef tmax_parallel
         csim_op = 1;
         SSHIFTS = `tmax_parallel + 0; 
       `endif 
     `endif
     if (SSHIFTS < 0) begin
       $display("XTB Error: Passing negative value (%0d) of serial shifts in parallel mode. Exiting...",  SSHIFTS);
       $finish; 
     end

     process_rtops;
     `ifdef tmax_serial_timing 
       sertmg = 1;
       if (xtb_sim_mode == 1) $display("XTB: Parallel simulation (timing and vector) extended to match serial simulation");
     `else 
       sertmg = 0; 
     `endif


     $display("XTB: Starting %0s simulation of %0d pattern%s", xtb_sim_mode == 0 ? "serial" : "parallel", xtb_sim_mode == 0 ? ((ser_pats>last_pat || ser_pats==0)?(last_pat+1):ser_pats): last_pat + 1, (xtb_sim_mode!=0 || ser_pats>1)?"s":"");
     if (xtb_sim_mode) $display("XTB: Using %0d serial shifts", SSHIFTS);

     if (SSHIFTS >= MAXCHLEN)  begin 
       $display("XTB Warning: serial shifts (%0d) equals or exceeds max chain length (%0d). Performing full serial scan... ", SSHIFTS, MAXCHLEN); 
       xtb_sim_mode = 0;	
     end 

     if (diagm==2 && xtb_sim_mode==1)  begin 
       $display("XTB Warning: cannot display cycle-based diagnostic messages in parallel load mode simulation. Simulation will display pattern-based diagnostic messages."); 
       diagm = 1;	
     end 

     while (cur_pat <= last_pat && end_pat != 1) begin
       memel = memall[data_i];
       opcode = memel[3:0];
       cur_stmt = -1;
       args = 'b0;
       case (opcode)
         'd`EndPat:  begin
                       cur_stmt = `EndPat;
                       end_pat = 1;
                     end
         'd`IncPat:  begin
                       cur_stmt = `IncPat;
                       cur_pat = cur_pat + 1;
                       v_count_per_pat = 0;
                       nbpats = nbpats+1;
                     end
         'd`SetPat:  begin
                       cur_stmt = `SetPat;
                       if (cur_pat==-1) begin first_pat = memel[27:4]; cur_pat = first_pat; end
                       else cur_pat = memel[27:4];
                       v_count_per_pat = 0;
                       last_pat = last_pat + cur_pat; 
                       nbpats = nbpats+1;  
                     end
         'd`WFTStmt: begin
                       cur_stmt = `WFTStmt;
                       resolve_wft(memel[5:4]);
                     end 
         'd`ConditionStmt, 'd`FixedStmt, 'd`VectorStmt: begin
           if (opcode == 'd`ConditionStmt) cur_stmt = 'd`ConditionStmt;
           else 	cur_stmt='d`VectorStmt;
           nargs = memel[12:4];
           na = 0;
           while (na<nargs) begin
             data_i = data_i + 1;
             memel = memall[data_i];
             assign_val(memel[SIG_IDS_W-1:0], memel[2*MAX_WIDTH+SIG_IDS_W-1:SIG_IDS_W]);
             na = na + 1;
           end
           if (opcode == `VectorStmt) assign_stmt(the_wft_id);
          end 
         'd`test_setupStmt: begin: test_setup_BLOCK
           cur_stmt = `test_setupStmt;
           set_args(memel[12:4]);
           test_setup(sid_args, sval_args);
         end 
         'd`load_unloadStmt: begin: load_unload_BLOCK
           cur_stmt = `load_unloadStmt;
            na = 0; nargs = 'b0; sid_args = 'b0; sval_args = 'b0;
            nargs = memel[12:4];
            while (na < nargs) begin
              data_i = data_i + 1;
              memel = memall[data_i];
              if (memel[SIG_IDS_W-1:0] > SIG_IDS-1) begin
                $display("\nXTB Error: Passing wrong signal ID (%b), valid range is 1..%d. Exiting...", memel[SIG_IDS_W-1:0], SIG_IDS-1);
                $finish;
              end
              sid_args[memel[SIG_IDS_W-1:0]] = 1'b1;
              case (memel[SIG_IDS_W-1:0])
               'd`_si , 'd`testin: begin LOAD[0] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`_so , 'd`testout: begin UNLOAD[0] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               default: begin  
                 $display("\nXTB Error: Wrong signal argument (%s) passed to load_unload procedure. Exiting...", SignalIDName[memel[SIG_IDS_W-1:0]]);
                 $finish; 
               end 
             endcase 
             na = na+1;
           end
           load_unload(sid_args, sval_args);
         end 
         'd`multiclock_captureStmt: begin: multiclock_capture_BLOCK
           cur_stmt = `multiclock_captureStmt;
           set_args(memel[12:4]);
           multiclock_capture(sid_args, sval_args);
         end 
         default: begin $display("\nXTB Error: Unrecognized code %0h, @ inst %0d", opcode, data_i); $finish; end 
       endcase 
       data_i = data_i + 1;
       popcode = opcode;
       if (verbose >= 3) display_stmt(cur_stmt);
     end 
     $display("XTB: Simulation of %0d pattern%s completed with %0d error%s (time: %0t, cycles: %0d)\n", nbpats+end_pat-1, (nbpats==1)?"":"s", nbfails, (nbfails==1)?"":"s", $time, v_count); 

     if (diagf) $fclose(diagf);
     ->end_part;
   end 


   task init_rtops;
     integer i;
   begin
     for (i=0; i<`NBRTOPS; i=i+1)
       rt_ops[i] = -1;
     RT_OPS [0] = "tmax_n_pattern_sim"; RT_OPS [1] = "tmax_serial"; RT_OPS [2] = "tmax_parallel"; RT_OPS [3] = "tmax_msg"; RT_OPS [4] = "tmax_rpt"; RT_OPS [5] = "tmax_test_setup_only_once";
   end 
   endtask

   task process_rtops;
     integer sim_op, p_mode;
     integer i;
   begin
     sim_op = -1;
     init_rtops;
     for (i=0; i<`NBRTOPS; i=i+1)
       $value$plusargs ({RT_OPS[i], "=%d"}, rt_ops[i]);
     if ((rt_ops[0] > -1))   last_pat =  rt_ops[0];
     if (last_pat != total_pats-1) begin
       display_ops ((rt_ops[0] > 0), last_pat, RT_OPS[0]);
       $display("XTB: User requesting simulating patterns 0 to %0d",last_pat);
     end 
     if (last_pat >= total_pats && total_pats > 1) begin
       $display("XTB Error: Simulation patterns (%0d) exceeds total pattern count (%0d). Exiting...",  last_pat+1,total_pats);
       $finish;
     end 
     else if (last_pat < 0)  begin 
       $display("XTB Error: User requesting simulating wrong number of patterns (%0d). Exiting... ",last_pat+1);
       $finish;
     end
     if (rt_ops[5] != 0 && ($test$plusargs ("tmax_test_setup_only_once"))) begin
       test_setup_only_once = 1;
       rt_ops[5] = 1;
     end
     if ((rt_ops[1] > 0)) begin
       if (rt_ops[1]==0) ser_pats = last_pat + 1;
       else ser_pats = rt_ops[1];
       sim_op = 0;
     end 
     else if (rt_ops[1] != 0 &&  ($test$plusargs ("tmax_serial"))) begin
       ser_pats = last_pat + 1;
       rt_ops[1] = ser_pats;
       sim_op = 0;
     end
     if ((rt_ops[1]>0) || (csim_op==0 || csim_op==2)) display_ops ((rt_ops[1]>0), ser_pats, RT_OPS[1]);
     p_mode = ((rt_ops[2] > -1) || ($test$plusargs ("tmax_parallel")))?1:0;
     if (p_mode) begin
       SSHIFTS = (rt_ops[2] > -1)?rt_ops[2]:0;
       if (sim_op == -1)
         sim_op = 1;
       else  if (ser_pats  < last_pat + 1)
         sim_op = 0;
       else 
         sim_op = 2;
     end 
     if (p_mode || (csim_op==1 || csim_op==2)) display_ops (p_mode, SSHIFTS, RT_OPS[2]);
     if (sim_op > -1)
       set_sim_ops (sim_op);
     else if (csim_op > -1)
       set_sim_ops (csim_op);
     if (rt_ops[3] > -1) begin
       verbose = rt_ops[3];
     end
     if (verbose != 0) 
       display_ops ((rt_ops[3]>-1), verbose, RT_OPS[3]);
     if (rt_ops[4] > -1) begin
       rep_pat =  rt_ops[4];
     end
     if (rep_pat != 5) 
       display_ops ((rt_ops[4]>-1), rep_pat, RT_OPS[4]);
      if (test_setup_only_once > 0) begin
        display_ops ((rt_ops[5]>-1), test_setup_only_once, RT_OPS[5]);
      end
   end 
   endtask

   task display_ops;
     input reg rt;
     input integer val;
     input reg [32*8:1] opname;
   begin
     $display("XTB: Setting %0s option \"%0s\" to %0d.", (rt==1)?"runtime":"compile-time",  opname, val);
   end 
   endtask

   task display_help;
   integer op;
   begin
     init_rtops;
     $display("\n\n\t\t----------------------- Runtime Help ------------------------------\n");
     $display("XTB: Usage is: <sim_exec> +opt1=val1 +opt2=val2...");
     $display("     where  <sim_exec> is the simulation exec name, and opt1 opt2 are available options and val1, val2 their corresponding values.");
     $display("     Available runtime options are:");
     op = 0;
     while (op < `NBRTOPS) begin
       $display("        +%0s", RT_OPS[op]);
       op = op + 1;
     end
     $display("\n      E.g.: simv +tmax_serial=2 +tmax_msg=2, runs first 2 patterns in serial and remaining in parallel, and set the verbose msg level to 2.");
     $display("\n Note: Runtime options override corresponding compile-time options.");
     $display("\n       Please refer to the User's Guide for details regarding each option.");
     $display("\n\t\t-------------------------------------------------------------------\n");
   end 
   endtask

   task set_sim_ops;
     input integer smode;
   begin
     if (smode==0) begin 
       xtb_sim_mode = 0;
       $write("XTB: Enabling serial simulation for");
       if (ser_pats < last_pat + 1) begin
         if (ser_pats==1) $write(" the first pattern.\n");
         else $write(" first %0d patterns.\n", ser_pats);
       end else 
         $write(" all patterns.\n");
     end
     else if (smode==1) begin 
       $write("XTB: Enabling parallel simulation with %0d serial shift(s).\n", SSHIFTS);
       xtb_sim_mode = 1;
     end 
     else  if (smode==2) begin
       $display("XTB Warning: requesting full serial simulation and full parallel simulation in the same time. Performing default parallel simulation mode...");
       xtb_sim_mode = 1;
     end 
   end 
   endtask


   initial begin: _burst__pattern__init_unit


     for (n=0; n<SIG_IDS; n=n+1) SignalIDWidth[n] = 0;
     SignalIDName[0] = "rst";
     SignalIDType[0] = 0; //rst
     SignalIDWidth[0] = 1; //rst
     SignalIDName[1] = "clk";
     SignalIDType[1] = 0; //clk
     SignalIDWidth[1] = 1; //clk
     SignalIDName[2] = "testen";
     SignalIDType[2] = 0; //testen
     SignalIDWidth[2] = 1; //testen
     SignalIDName[3] = "testrst";
     SignalIDType[3] = 0; //testrst
     SignalIDWidth[3] = 1; //testrst
     SignalIDName[4] = "testin";
     SignalIDType[4] = 0; //testin
     SignalIDWidth[4] = 1; //testin
     SignalIDName[5] = "apbi_pSEL_0_";
     SignalIDType[5] = 0; //apbi_pSEL_0_
     SignalIDWidth[5] = 1; //apbi_pSEL_0_
     SignalIDName[6] = "apbi_pSEL_1_";
     SignalIDType[6] = 0; //apbi_pSEL_1_
     SignalIDWidth[6] = 1; //apbi_pSEL_1_
     SignalIDName[7] = "apbi_pSEL_2_";
     SignalIDType[7] = 0; //apbi_pSEL_2_
     SignalIDWidth[7] = 1; //apbi_pSEL_2_
     SignalIDName[8] = "apbi_pSEL_3_";
     SignalIDType[8] = 0; //apbi_pSEL_3_
     SignalIDWidth[8] = 1; //apbi_pSEL_3_
     SignalIDName[9] = "apbi_pSEL_4_";
     SignalIDType[9] = 0; //apbi_pSEL_4_
     SignalIDWidth[9] = 1; //apbi_pSEL_4_
     SignalIDName[10] = "apbi_pSEL_5_";
     SignalIDType[10] = 0; //apbi_pSEL_5_
     SignalIDWidth[10] = 1; //apbi_pSEL_5_
     SignalIDName[11] = "apbi_pSEL_6_";
     SignalIDType[11] = 0; //apbi_pSEL_6_
     SignalIDWidth[11] = 1; //apbi_pSEL_6_
     SignalIDName[12] = "apbi_pSEL_7_";
     SignalIDType[12] = 0; //apbi_pSEL_7_
     SignalIDWidth[12] = 1; //apbi_pSEL_7_
     SignalIDName[13] = "apbi_pSEL_8_";
     SignalIDType[13] = 0; //apbi_pSEL_8_
     SignalIDWidth[13] = 1; //apbi_pSEL_8_
     SignalIDName[14] = "apbi_pSEL_9_";
     SignalIDType[14] = 0; //apbi_pSEL_9_
     SignalIDWidth[14] = 1; //apbi_pSEL_9_
     SignalIDName[15] = "apbi_pSEL_10_";
     SignalIDType[15] = 0; //apbi_pSEL_10_
     SignalIDWidth[15] = 1; //apbi_pSEL_10_
     SignalIDName[16] = "apbi_pSEL_11_";
     SignalIDType[16] = 0; //apbi_pSEL_11_
     SignalIDWidth[16] = 1; //apbi_pSEL_11_
     SignalIDName[17] = "apbi_pSEL_12_";
     SignalIDType[17] = 0; //apbi_pSEL_12_
     SignalIDWidth[17] = 1; //apbi_pSEL_12_
     SignalIDName[18] = "apbi_pSEL_13_";
     SignalIDType[18] = 0; //apbi_pSEL_13_
     SignalIDWidth[18] = 1; //apbi_pSEL_13_
     SignalIDName[19] = "apbi_pSEL_14_";
     SignalIDType[19] = 0; //apbi_pSEL_14_
     SignalIDWidth[19] = 1; //apbi_pSEL_14_
     SignalIDName[20] = "apbi_pSEL_15_";
     SignalIDType[20] = 0; //apbi_pSEL_15_
     SignalIDWidth[20] = 1; //apbi_pSEL_15_
     SignalIDName[21] = "apbi_pENABLE";
     SignalIDType[21] = 0; //apbi_pENABLE
     SignalIDWidth[21] = 1; //apbi_pENABLE
     SignalIDName[22] = "apbi_pADDR_31_";
     SignalIDType[22] = 0; //apbi_pADDR_31_
     SignalIDWidth[22] = 1; //apbi_pADDR_31_
     SignalIDName[23] = "apbi_pADDR_30_";
     SignalIDType[23] = 0; //apbi_pADDR_30_
     SignalIDWidth[23] = 1; //apbi_pADDR_30_
     SignalIDName[24] = "apbi_pADDR_29_";
     SignalIDType[24] = 0; //apbi_pADDR_29_
     SignalIDWidth[24] = 1; //apbi_pADDR_29_
     SignalIDName[25] = "apbi_pADDR_28_";
     SignalIDType[25] = 0; //apbi_pADDR_28_
     SignalIDWidth[25] = 1; //apbi_pADDR_28_
     SignalIDName[26] = "apbi_pADDR_27_";
     SignalIDType[26] = 0; //apbi_pADDR_27_
     SignalIDWidth[26] = 1; //apbi_pADDR_27_
     SignalIDName[27] = "apbi_pADDR_26_";
     SignalIDType[27] = 0; //apbi_pADDR_26_
     SignalIDWidth[27] = 1; //apbi_pADDR_26_
     SignalIDName[28] = "apbi_pADDR_25_";
     SignalIDType[28] = 0; //apbi_pADDR_25_
     SignalIDWidth[28] = 1; //apbi_pADDR_25_
     SignalIDName[29] = "apbi_pADDR_24_";
     SignalIDType[29] = 0; //apbi_pADDR_24_
     SignalIDWidth[29] = 1; //apbi_pADDR_24_
     SignalIDName[30] = "apbi_pADDR_23_";
     SignalIDType[30] = 0; //apbi_pADDR_23_
     SignalIDWidth[30] = 1; //apbi_pADDR_23_
     SignalIDName[31] = "apbi_pADDR_22_";
     SignalIDType[31] = 0; //apbi_pADDR_22_
     SignalIDWidth[31] = 1; //apbi_pADDR_22_
     SignalIDName[32] = "apbi_pADDR_21_";
     SignalIDType[32] = 0; //apbi_pADDR_21_
     SignalIDWidth[32] = 1; //apbi_pADDR_21_
     SignalIDName[33] = "apbi_pADDR_20_";
     SignalIDType[33] = 0; //apbi_pADDR_20_
     SignalIDWidth[33] = 1; //apbi_pADDR_20_
     SignalIDName[34] = "apbi_pADDR_19_";
     SignalIDType[34] = 0; //apbi_pADDR_19_
     SignalIDWidth[34] = 1; //apbi_pADDR_19_
     SignalIDName[35] = "apbi_pADDR_18_";
     SignalIDType[35] = 0; //apbi_pADDR_18_
     SignalIDWidth[35] = 1; //apbi_pADDR_18_
     SignalIDName[36] = "apbi_pADDR_17_";
     SignalIDType[36] = 0; //apbi_pADDR_17_
     SignalIDWidth[36] = 1; //apbi_pADDR_17_
     SignalIDName[37] = "apbi_pADDR_16_";
     SignalIDType[37] = 0; //apbi_pADDR_16_
     SignalIDWidth[37] = 1; //apbi_pADDR_16_
     SignalIDName[38] = "apbi_pADDR_15_";
     SignalIDType[38] = 0; //apbi_pADDR_15_
     SignalIDWidth[38] = 1; //apbi_pADDR_15_
     SignalIDName[39] = "apbi_pADDR_14_";
     SignalIDType[39] = 0; //apbi_pADDR_14_
     SignalIDWidth[39] = 1; //apbi_pADDR_14_
     SignalIDName[40] = "apbi_pADDR_13_";
     SignalIDType[40] = 0; //apbi_pADDR_13_
     SignalIDWidth[40] = 1; //apbi_pADDR_13_
     SignalIDName[41] = "apbi_pADDR_12_";
     SignalIDType[41] = 0; //apbi_pADDR_12_
     SignalIDWidth[41] = 1; //apbi_pADDR_12_
     SignalIDName[42] = "apbi_pADDR_11_";
     SignalIDType[42] = 0; //apbi_pADDR_11_
     SignalIDWidth[42] = 1; //apbi_pADDR_11_
     SignalIDName[43] = "apbi_pADDR_10_";
     SignalIDType[43] = 0; //apbi_pADDR_10_
     SignalIDWidth[43] = 1; //apbi_pADDR_10_
     SignalIDName[44] = "apbi_pADDR_9_";
     SignalIDType[44] = 0; //apbi_pADDR_9_
     SignalIDWidth[44] = 1; //apbi_pADDR_9_
     SignalIDName[45] = "apbi_pADDR_8_";
     SignalIDType[45] = 0; //apbi_pADDR_8_
     SignalIDWidth[45] = 1; //apbi_pADDR_8_
     SignalIDName[46] = "apbi_pADDR_7_";
     SignalIDType[46] = 0; //apbi_pADDR_7_
     SignalIDWidth[46] = 1; //apbi_pADDR_7_
     SignalIDName[47] = "apbi_pADDR_6_";
     SignalIDType[47] = 0; //apbi_pADDR_6_
     SignalIDWidth[47] = 1; //apbi_pADDR_6_
     SignalIDName[48] = "apbi_pADDR_5_";
     SignalIDType[48] = 0; //apbi_pADDR_5_
     SignalIDWidth[48] = 1; //apbi_pADDR_5_
     SignalIDName[49] = "apbi_pADDR_4_";
     SignalIDType[49] = 0; //apbi_pADDR_4_
     SignalIDWidth[49] = 1; //apbi_pADDR_4_
     SignalIDName[50] = "apbi_pADDR_3_";
     SignalIDType[50] = 0; //apbi_pADDR_3_
     SignalIDWidth[50] = 1; //apbi_pADDR_3_
     SignalIDName[51] = "apbi_pADDR_2_";
     SignalIDType[51] = 0; //apbi_pADDR_2_
     SignalIDWidth[51] = 1; //apbi_pADDR_2_
     SignalIDName[52] = "apbi_pADDR_1_";
     SignalIDType[52] = 0; //apbi_pADDR_1_
     SignalIDWidth[52] = 1; //apbi_pADDR_1_
     SignalIDName[53] = "apbi_pADDR_0_";
     SignalIDType[53] = 0; //apbi_pADDR_0_
     SignalIDWidth[53] = 1; //apbi_pADDR_0_
     SignalIDName[54] = "apbi_pWRITE";
     SignalIDType[54] = 0; //apbi_pWRITE
     SignalIDWidth[54] = 1; //apbi_pWRITE
     SignalIDName[55] = "apbi_pWDATA_31_";
     SignalIDType[55] = 0; //apbi_pWDATA_31_
     SignalIDWidth[55] = 1; //apbi_pWDATA_31_
     SignalIDName[56] = "apbi_pWDATA_30_";
     SignalIDType[56] = 0; //apbi_pWDATA_30_
     SignalIDWidth[56] = 1; //apbi_pWDATA_30_
     SignalIDName[57] = "apbi_pWDATA_29_";
     SignalIDType[57] = 0; //apbi_pWDATA_29_
     SignalIDWidth[57] = 1; //apbi_pWDATA_29_
     SignalIDName[58] = "apbi_pWDATA_28_";
     SignalIDType[58] = 0; //apbi_pWDATA_28_
     SignalIDWidth[58] = 1; //apbi_pWDATA_28_
     SignalIDName[59] = "apbi_pWDATA_27_";
     SignalIDType[59] = 0; //apbi_pWDATA_27_
     SignalIDWidth[59] = 1; //apbi_pWDATA_27_
     SignalIDName[60] = "apbi_pWDATA_26_";
     SignalIDType[60] = 0; //apbi_pWDATA_26_
     SignalIDWidth[60] = 1; //apbi_pWDATA_26_
     SignalIDName[61] = "apbi_pWDATA_25_";
     SignalIDType[61] = 0; //apbi_pWDATA_25_
     SignalIDWidth[61] = 1; //apbi_pWDATA_25_
     SignalIDName[62] = "apbi_pWDATA_24_";
     SignalIDType[62] = 0; //apbi_pWDATA_24_
     SignalIDWidth[62] = 1; //apbi_pWDATA_24_
     SignalIDName[63] = "apbi_pWDATA_23_";
     SignalIDType[63] = 0; //apbi_pWDATA_23_
     SignalIDWidth[63] = 1; //apbi_pWDATA_23_
     SignalIDName[64] = "apbi_pWDATA_22_";
     SignalIDType[64] = 0; //apbi_pWDATA_22_
     SignalIDWidth[64] = 1; //apbi_pWDATA_22_
     SignalIDName[65] = "apbi_pWDATA_21_";
     SignalIDType[65] = 0; //apbi_pWDATA_21_
     SignalIDWidth[65] = 1; //apbi_pWDATA_21_
     SignalIDName[66] = "apbi_pWDATA_20_";
     SignalIDType[66] = 0; //apbi_pWDATA_20_
     SignalIDWidth[66] = 1; //apbi_pWDATA_20_
     SignalIDName[67] = "apbi_pWDATA_19_";
     SignalIDType[67] = 0; //apbi_pWDATA_19_
     SignalIDWidth[67] = 1; //apbi_pWDATA_19_
     SignalIDName[68] = "apbi_pWDATA_18_";
     SignalIDType[68] = 0; //apbi_pWDATA_18_
     SignalIDWidth[68] = 1; //apbi_pWDATA_18_
     SignalIDName[69] = "apbi_pWDATA_17_";
     SignalIDType[69] = 0; //apbi_pWDATA_17_
     SignalIDWidth[69] = 1; //apbi_pWDATA_17_
     SignalIDName[70] = "apbi_pWDATA_16_";
     SignalIDType[70] = 0; //apbi_pWDATA_16_
     SignalIDWidth[70] = 1; //apbi_pWDATA_16_
     SignalIDName[71] = "apbi_pWDATA_15_";
     SignalIDType[71] = 0; //apbi_pWDATA_15_
     SignalIDWidth[71] = 1; //apbi_pWDATA_15_
     SignalIDName[72] = "apbi_pWDATA_14_";
     SignalIDType[72] = 0; //apbi_pWDATA_14_
     SignalIDWidth[72] = 1; //apbi_pWDATA_14_
     SignalIDName[73] = "apbi_pWDATA_13_";
     SignalIDType[73] = 0; //apbi_pWDATA_13_
     SignalIDWidth[73] = 1; //apbi_pWDATA_13_
     SignalIDName[74] = "apbi_pWDATA_12_";
     SignalIDType[74] = 0; //apbi_pWDATA_12_
     SignalIDWidth[74] = 1; //apbi_pWDATA_12_
     SignalIDName[75] = "apbi_pWDATA_11_";
     SignalIDType[75] = 0; //apbi_pWDATA_11_
     SignalIDWidth[75] = 1; //apbi_pWDATA_11_
     SignalIDName[76] = "apbi_pWDATA_10_";
     SignalIDType[76] = 0; //apbi_pWDATA_10_
     SignalIDWidth[76] = 1; //apbi_pWDATA_10_
     SignalIDName[77] = "apbi_pWDATA_9_";
     SignalIDType[77] = 0; //apbi_pWDATA_9_
     SignalIDWidth[77] = 1; //apbi_pWDATA_9_
     SignalIDName[78] = "apbi_pWDATA_8_";
     SignalIDType[78] = 0; //apbi_pWDATA_8_
     SignalIDWidth[78] = 1; //apbi_pWDATA_8_
     SignalIDName[79] = "apbi_pWDATA_7_";
     SignalIDType[79] = 0; //apbi_pWDATA_7_
     SignalIDWidth[79] = 1; //apbi_pWDATA_7_
     SignalIDName[80] = "apbi_pWDATA_6_";
     SignalIDType[80] = 0; //apbi_pWDATA_6_
     SignalIDWidth[80] = 1; //apbi_pWDATA_6_
     SignalIDName[81] = "apbi_pWDATA_5_";
     SignalIDType[81] = 0; //apbi_pWDATA_5_
     SignalIDWidth[81] = 1; //apbi_pWDATA_5_
     SignalIDName[82] = "apbi_pWDATA_4_";
     SignalIDType[82] = 0; //apbi_pWDATA_4_
     SignalIDWidth[82] = 1; //apbi_pWDATA_4_
     SignalIDName[83] = "apbi_pWDATA_3_";
     SignalIDType[83] = 0; //apbi_pWDATA_3_
     SignalIDWidth[83] = 1; //apbi_pWDATA_3_
     SignalIDName[84] = "apbi_pWDATA_2_";
     SignalIDType[84] = 0; //apbi_pWDATA_2_
     SignalIDWidth[84] = 1; //apbi_pWDATA_2_
     SignalIDName[85] = "apbi_pWDATA_1_";
     SignalIDType[85] = 0; //apbi_pWDATA_1_
     SignalIDWidth[85] = 1; //apbi_pWDATA_1_
     SignalIDName[86] = "apbi_pWDATA_0_";
     SignalIDType[86] = 0; //apbi_pWDATA_0_
     SignalIDWidth[86] = 1; //apbi_pWDATA_0_
     SignalIDName[87] = "apbi_pIRQ_31_";
     SignalIDType[87] = 0; //apbi_pIRQ_31_
     SignalIDWidth[87] = 1; //apbi_pIRQ_31_
     SignalIDName[88] = "apbi_pIRQ_30_";
     SignalIDType[88] = 0; //apbi_pIRQ_30_
     SignalIDWidth[88] = 1; //apbi_pIRQ_30_
     SignalIDName[89] = "apbi_pIRQ_29_";
     SignalIDType[89] = 0; //apbi_pIRQ_29_
     SignalIDWidth[89] = 1; //apbi_pIRQ_29_
     SignalIDName[90] = "apbi_pIRQ_28_";
     SignalIDType[90] = 0; //apbi_pIRQ_28_
     SignalIDWidth[90] = 1; //apbi_pIRQ_28_
     SignalIDName[91] = "apbi_pIRQ_27_";
     SignalIDType[91] = 0; //apbi_pIRQ_27_
     SignalIDWidth[91] = 1; //apbi_pIRQ_27_
     SignalIDName[92] = "apbi_pIRQ_26_";
     SignalIDType[92] = 0; //apbi_pIRQ_26_
     SignalIDWidth[92] = 1; //apbi_pIRQ_26_
     SignalIDName[93] = "apbi_pIRQ_25_";
     SignalIDType[93] = 0; //apbi_pIRQ_25_
     SignalIDWidth[93] = 1; //apbi_pIRQ_25_
     SignalIDName[94] = "apbi_pIRQ_24_";
     SignalIDType[94] = 0; //apbi_pIRQ_24_
     SignalIDWidth[94] = 1; //apbi_pIRQ_24_
     SignalIDName[95] = "apbi_pIRQ_23_";
     SignalIDType[95] = 0; //apbi_pIRQ_23_
     SignalIDWidth[95] = 1; //apbi_pIRQ_23_
     SignalIDName[96] = "apbi_pIRQ_22_";
     SignalIDType[96] = 0; //apbi_pIRQ_22_
     SignalIDWidth[96] = 1; //apbi_pIRQ_22_
     SignalIDName[97] = "apbi_pIRQ_21_";
     SignalIDType[97] = 0; //apbi_pIRQ_21_
     SignalIDWidth[97] = 1; //apbi_pIRQ_21_
     SignalIDName[98] = "apbi_pIRQ_20_";
     SignalIDType[98] = 0; //apbi_pIRQ_20_
     SignalIDWidth[98] = 1; //apbi_pIRQ_20_
     SignalIDName[99] = "apbi_pIRQ_19_";
     SignalIDType[99] = 0; //apbi_pIRQ_19_
     SignalIDWidth[99] = 1; //apbi_pIRQ_19_
     SignalIDName[100] = "apbi_pIRQ_18_";
     SignalIDType[100] = 0; //apbi_pIRQ_18_
     SignalIDWidth[100] = 1; //apbi_pIRQ_18_
     SignalIDName[101] = "apbi_pIRQ_17_";
     SignalIDType[101] = 0; //apbi_pIRQ_17_
     SignalIDWidth[101] = 1; //apbi_pIRQ_17_
     SignalIDName[102] = "apbi_pIRQ_16_";
     SignalIDType[102] = 0; //apbi_pIRQ_16_
     SignalIDWidth[102] = 1; //apbi_pIRQ_16_
     SignalIDName[103] = "apbi_pIRQ_15_";
     SignalIDType[103] = 0; //apbi_pIRQ_15_
     SignalIDWidth[103] = 1; //apbi_pIRQ_15_
     SignalIDName[104] = "apbi_pIRQ_14_";
     SignalIDType[104] = 0; //apbi_pIRQ_14_
     SignalIDWidth[104] = 1; //apbi_pIRQ_14_
     SignalIDName[105] = "apbi_pIRQ_13_";
     SignalIDType[105] = 0; //apbi_pIRQ_13_
     SignalIDWidth[105] = 1; //apbi_pIRQ_13_
     SignalIDName[106] = "apbi_pIRQ_12_";
     SignalIDType[106] = 0; //apbi_pIRQ_12_
     SignalIDWidth[106] = 1; //apbi_pIRQ_12_
     SignalIDName[107] = "apbi_pIRQ_11_";
     SignalIDType[107] = 0; //apbi_pIRQ_11_
     SignalIDWidth[107] = 1; //apbi_pIRQ_11_
     SignalIDName[108] = "apbi_pIRQ_10_";
     SignalIDType[108] = 0; //apbi_pIRQ_10_
     SignalIDWidth[108] = 1; //apbi_pIRQ_10_
     SignalIDName[109] = "apbi_pIRQ_9_";
     SignalIDType[109] = 0; //apbi_pIRQ_9_
     SignalIDWidth[109] = 1; //apbi_pIRQ_9_
     SignalIDName[110] = "apbi_pIRQ_8_";
     SignalIDType[110] = 0; //apbi_pIRQ_8_
     SignalIDWidth[110] = 1; //apbi_pIRQ_8_
     SignalIDName[111] = "apbi_pIRQ_7_";
     SignalIDType[111] = 0; //apbi_pIRQ_7_
     SignalIDWidth[111] = 1; //apbi_pIRQ_7_
     SignalIDName[112] = "apbi_pIRQ_6_";
     SignalIDType[112] = 0; //apbi_pIRQ_6_
     SignalIDWidth[112] = 1; //apbi_pIRQ_6_
     SignalIDName[113] = "apbi_pIRQ_5_";
     SignalIDType[113] = 0; //apbi_pIRQ_5_
     SignalIDWidth[113] = 1; //apbi_pIRQ_5_
     SignalIDName[114] = "apbi_pIRQ_4_";
     SignalIDType[114] = 0; //apbi_pIRQ_4_
     SignalIDWidth[114] = 1; //apbi_pIRQ_4_
     SignalIDName[115] = "apbi_pIRQ_3_";
     SignalIDType[115] = 0; //apbi_pIRQ_3_
     SignalIDWidth[115] = 1; //apbi_pIRQ_3_
     SignalIDName[116] = "apbi_pIRQ_2_";
     SignalIDType[116] = 0; //apbi_pIRQ_2_
     SignalIDWidth[116] = 1; //apbi_pIRQ_2_
     SignalIDName[117] = "apbi_pIRQ_1_";
     SignalIDType[117] = 0; //apbi_pIRQ_1_
     SignalIDWidth[117] = 1; //apbi_pIRQ_1_
     SignalIDName[118] = "apbi_pIRQ_0_";
     SignalIDType[118] = 0; //apbi_pIRQ_0_
     SignalIDWidth[118] = 1; //apbi_pIRQ_0_
     SignalIDName[119] = "apbi_tESTEN";
     SignalIDType[119] = 0; //apbi_tESTEN
     SignalIDWidth[119] = 1; //apbi_tESTEN
     SignalIDName[120] = "apbi_tESTRST";
     SignalIDType[120] = 0; //apbi_tESTRST
     SignalIDWidth[120] = 1; //apbi_tESTRST
     SignalIDName[121] = "apbi_sCANEN";
     SignalIDType[121] = 0; //apbi_sCANEN
     SignalIDWidth[121] = 1; //apbi_sCANEN
     SignalIDName[122] = "apbi_tESTOEN";
     SignalIDType[122] = 0; //apbi_tESTOEN
     SignalIDWidth[122] = 1; //apbi_tESTOEN
     SignalIDName[123] = "apbi_tESTIN_3_";
     SignalIDType[123] = 0; //apbi_tESTIN_3_
     SignalIDWidth[123] = 1; //apbi_tESTIN_3_
     SignalIDName[124] = "apbi_tESTIN_2_";
     SignalIDType[124] = 0; //apbi_tESTIN_2_
     SignalIDWidth[124] = 1; //apbi_tESTIN_2_
     SignalIDName[125] = "apbi_tESTIN_1_";
     SignalIDType[125] = 0; //apbi_tESTIN_1_
     SignalIDWidth[125] = 1; //apbi_tESTIN_1_
     SignalIDName[126] = "apbi_tESTIN_0_";
     SignalIDType[126] = 0; //apbi_tESTIN_0_
     SignalIDWidth[126] = 1; //apbi_tESTIN_0_
     SignalIDName[127] = "uarti_rXD";
     SignalIDType[127] = 0; //uarti_rXD
     SignalIDWidth[127] = 1; //uarti_rXD
     SignalIDName[128] = "uarti_cTSN";
     SignalIDType[128] = 0; //uarti_cTSN
     SignalIDWidth[128] = 1; //uarti_cTSN
     SignalIDName[129] = "uarti_eXTCLK";
     SignalIDType[129] = 0; //uarti_eXTCLK
     SignalIDWidth[129] = 1; //uarti_eXTCLK
     SignalIDName[130] = "\apbo[131] ";
     SignalIDType[130] = 1; //\apbo[131] 
     SignalIDWidth[130] = 1; //\apbo[131] 
     SignalIDName[131] = "\apbo[130] ";
     SignalIDType[131] = 1; //\apbo[130] 
     SignalIDWidth[131] = 1; //\apbo[130] 
     SignalIDName[132] = "\apbo[129] ";
     SignalIDType[132] = 1; //\apbo[129] 
     SignalIDWidth[132] = 1; //\apbo[129] 
     SignalIDName[133] = "\apbo[128] ";
     SignalIDType[133] = 1; //\apbo[128] 
     SignalIDWidth[133] = 1; //\apbo[128] 
     SignalIDName[134] = "\apbo[127] ";
     SignalIDType[134] = 1; //\apbo[127] 
     SignalIDWidth[134] = 1; //\apbo[127] 
     SignalIDName[135] = "\apbo[126] ";
     SignalIDType[135] = 1; //\apbo[126] 
     SignalIDWidth[135] = 1; //\apbo[126] 
     SignalIDName[136] = "\apbo[125] ";
     SignalIDType[136] = 1; //\apbo[125] 
     SignalIDWidth[136] = 1; //\apbo[125] 
     SignalIDName[137] = "\apbo[124] ";
     SignalIDType[137] = 1; //\apbo[124] 
     SignalIDWidth[137] = 1; //\apbo[124] 
     SignalIDName[138] = "\apbo[123] ";
     SignalIDType[138] = 1; //\apbo[123] 
     SignalIDWidth[138] = 1; //\apbo[123] 
     SignalIDName[139] = "\apbo[122] ";
     SignalIDType[139] = 1; //\apbo[122] 
     SignalIDWidth[139] = 1; //\apbo[122] 
     SignalIDName[140] = "\apbo[121] ";
     SignalIDType[140] = 1; //\apbo[121] 
     SignalIDWidth[140] = 1; //\apbo[121] 
     SignalIDName[141] = "\apbo[120] ";
     SignalIDType[141] = 1; //\apbo[120] 
     SignalIDWidth[141] = 1; //\apbo[120] 
     SignalIDName[142] = "\apbo[119] ";
     SignalIDType[142] = 1; //\apbo[119] 
     SignalIDWidth[142] = 1; //\apbo[119] 
     SignalIDName[143] = "\apbo[118] ";
     SignalIDType[143] = 1; //\apbo[118] 
     SignalIDWidth[143] = 1; //\apbo[118] 
     SignalIDName[144] = "\apbo[117] ";
     SignalIDType[144] = 1; //\apbo[117] 
     SignalIDWidth[144] = 1; //\apbo[117] 
     SignalIDName[145] = "\apbo[116] ";
     SignalIDType[145] = 1; //\apbo[116] 
     SignalIDWidth[145] = 1; //\apbo[116] 
     SignalIDName[146] = "\apbo[115] ";
     SignalIDType[146] = 1; //\apbo[115] 
     SignalIDWidth[146] = 1; //\apbo[115] 
     SignalIDName[147] = "\apbo[114] ";
     SignalIDType[147] = 1; //\apbo[114] 
     SignalIDWidth[147] = 1; //\apbo[114] 
     SignalIDName[148] = "\apbo[113] ";
     SignalIDType[148] = 1; //\apbo[113] 
     SignalIDWidth[148] = 1; //\apbo[113] 
     SignalIDName[149] = "\apbo[112] ";
     SignalIDType[149] = 1; //\apbo[112] 
     SignalIDWidth[149] = 1; //\apbo[112] 
     SignalIDName[150] = "\apbo[111] ";
     SignalIDType[150] = 1; //\apbo[111] 
     SignalIDWidth[150] = 1; //\apbo[111] 
     SignalIDName[151] = "\apbo[110] ";
     SignalIDType[151] = 1; //\apbo[110] 
     SignalIDWidth[151] = 1; //\apbo[110] 
     SignalIDName[152] = "\apbo[109] ";
     SignalIDType[152] = 1; //\apbo[109] 
     SignalIDWidth[152] = 1; //\apbo[109] 
     SignalIDName[153] = "\apbo[108] ";
     SignalIDType[153] = 1; //\apbo[108] 
     SignalIDWidth[153] = 1; //\apbo[108] 
     SignalIDName[154] = "\apbo[107] ";
     SignalIDType[154] = 1; //\apbo[107] 
     SignalIDWidth[154] = 1; //\apbo[107] 
     SignalIDName[155] = "\apbo[106] ";
     SignalIDType[155] = 1; //\apbo[106] 
     SignalIDWidth[155] = 1; //\apbo[106] 
     SignalIDName[156] = "\apbo[105] ";
     SignalIDType[156] = 1; //\apbo[105] 
     SignalIDWidth[156] = 1; //\apbo[105] 
     SignalIDName[157] = "\apbo[104] ";
     SignalIDType[157] = 1; //\apbo[104] 
     SignalIDWidth[157] = 1; //\apbo[104] 
     SignalIDName[158] = "\apbo[103] ";
     SignalIDType[158] = 1; //\apbo[103] 
     SignalIDWidth[158] = 1; //\apbo[103] 
     SignalIDName[159] = "\apbo[102] ";
     SignalIDType[159] = 1; //\apbo[102] 
     SignalIDWidth[159] = 1; //\apbo[102] 
     SignalIDName[160] = "\apbo[101] ";
     SignalIDType[160] = 1; //\apbo[101] 
     SignalIDWidth[160] = 1; //\apbo[101] 
     SignalIDName[161] = "\apbo[100] ";
     SignalIDType[161] = 1; //\apbo[100] 
     SignalIDWidth[161] = 1; //\apbo[100] 
     SignalIDName[162] = "\apbo[99] ";
     SignalIDType[162] = 1; //\apbo[99] 
     SignalIDWidth[162] = 1; //\apbo[99] 
     SignalIDName[163] = "\apbo[98] ";
     SignalIDType[163] = 1; //\apbo[98] 
     SignalIDWidth[163] = 1; //\apbo[98] 
     SignalIDName[164] = "\apbo[97] ";
     SignalIDType[164] = 1; //\apbo[97] 
     SignalIDWidth[164] = 1; //\apbo[97] 
     SignalIDName[165] = "\apbo[96] ";
     SignalIDType[165] = 1; //\apbo[96] 
     SignalIDWidth[165] = 1; //\apbo[96] 
     SignalIDName[166] = "\apbo[95] ";
     SignalIDType[166] = 1; //\apbo[95] 
     SignalIDWidth[166] = 1; //\apbo[95] 
     SignalIDName[167] = "\apbo[94] ";
     SignalIDType[167] = 1; //\apbo[94] 
     SignalIDWidth[167] = 1; //\apbo[94] 
     SignalIDName[168] = "\apbo[93] ";
     SignalIDType[168] = 1; //\apbo[93] 
     SignalIDWidth[168] = 1; //\apbo[93] 
     SignalIDName[169] = "\apbo[92] ";
     SignalIDType[169] = 1; //\apbo[92] 
     SignalIDWidth[169] = 1; //\apbo[92] 
     SignalIDName[170] = "\apbo[91] ";
     SignalIDType[170] = 1; //\apbo[91] 
     SignalIDWidth[170] = 1; //\apbo[91] 
     SignalIDName[171] = "\apbo[90] ";
     SignalIDType[171] = 1; //\apbo[90] 
     SignalIDWidth[171] = 1; //\apbo[90] 
     SignalIDName[172] = "\apbo[89] ";
     SignalIDType[172] = 1; //\apbo[89] 
     SignalIDWidth[172] = 1; //\apbo[89] 
     SignalIDName[173] = "\apbo[88] ";
     SignalIDType[173] = 1; //\apbo[88] 
     SignalIDWidth[173] = 1; //\apbo[88] 
     SignalIDName[174] = "\apbo[87] ";
     SignalIDType[174] = 1; //\apbo[87] 
     SignalIDWidth[174] = 1; //\apbo[87] 
     SignalIDName[175] = "\apbo[86] ";
     SignalIDType[175] = 1; //\apbo[86] 
     SignalIDWidth[175] = 1; //\apbo[86] 
     SignalIDName[176] = "\apbo[85] ";
     SignalIDType[176] = 1; //\apbo[85] 
     SignalIDWidth[176] = 1; //\apbo[85] 
     SignalIDName[177] = "\apbo[84] ";
     SignalIDType[177] = 1; //\apbo[84] 
     SignalIDWidth[177] = 1; //\apbo[84] 
     SignalIDName[178] = "\apbo[83] ";
     SignalIDType[178] = 1; //\apbo[83] 
     SignalIDWidth[178] = 1; //\apbo[83] 
     SignalIDName[179] = "\apbo[82] ";
     SignalIDType[179] = 1; //\apbo[82] 
     SignalIDWidth[179] = 1; //\apbo[82] 
     SignalIDName[180] = "\apbo[81] ";
     SignalIDType[180] = 1; //\apbo[81] 
     SignalIDWidth[180] = 1; //\apbo[81] 
     SignalIDName[181] = "\apbo[80] ";
     SignalIDType[181] = 1; //\apbo[80] 
     SignalIDWidth[181] = 1; //\apbo[80] 
     SignalIDName[182] = "\apbo[79] ";
     SignalIDType[182] = 1; //\apbo[79] 
     SignalIDWidth[182] = 1; //\apbo[79] 
     SignalIDName[183] = "\apbo[78] ";
     SignalIDType[183] = 1; //\apbo[78] 
     SignalIDWidth[183] = 1; //\apbo[78] 
     SignalIDName[184] = "\apbo[77] ";
     SignalIDType[184] = 1; //\apbo[77] 
     SignalIDWidth[184] = 1; //\apbo[77] 
     SignalIDName[185] = "\apbo[76] ";
     SignalIDType[185] = 1; //\apbo[76] 
     SignalIDWidth[185] = 1; //\apbo[76] 
     SignalIDName[186] = "\apbo[75] ";
     SignalIDType[186] = 1; //\apbo[75] 
     SignalIDWidth[186] = 1; //\apbo[75] 
     SignalIDName[187] = "\apbo[74] ";
     SignalIDType[187] = 1; //\apbo[74] 
     SignalIDWidth[187] = 1; //\apbo[74] 
     SignalIDName[188] = "\apbo[73] ";
     SignalIDType[188] = 1; //\apbo[73] 
     SignalIDWidth[188] = 1; //\apbo[73] 
     SignalIDName[189] = "\apbo[72] ";
     SignalIDType[189] = 1; //\apbo[72] 
     SignalIDWidth[189] = 1; //\apbo[72] 
     SignalIDName[190] = "\apbo[71] ";
     SignalIDType[190] = 1; //\apbo[71] 
     SignalIDWidth[190] = 1; //\apbo[71] 
     SignalIDName[191] = "\apbo[70] ";
     SignalIDType[191] = 1; //\apbo[70] 
     SignalIDWidth[191] = 1; //\apbo[70] 
     SignalIDName[192] = "\apbo[69] ";
     SignalIDType[192] = 1; //\apbo[69] 
     SignalIDWidth[192] = 1; //\apbo[69] 
     SignalIDName[193] = "\apbo[68] ";
     SignalIDType[193] = 1; //\apbo[68] 
     SignalIDWidth[193] = 1; //\apbo[68] 
     SignalIDName[194] = "\apbo[67] ";
     SignalIDType[194] = 1; //\apbo[67] 
     SignalIDWidth[194] = 1; //\apbo[67] 
     SignalIDName[195] = "\apbo[66] ";
     SignalIDType[195] = 1; //\apbo[66] 
     SignalIDWidth[195] = 1; //\apbo[66] 
     SignalIDName[196] = "\apbo[65] ";
     SignalIDType[196] = 1; //\apbo[65] 
     SignalIDWidth[196] = 1; //\apbo[65] 
     SignalIDName[197] = "\apbo[64] ";
     SignalIDType[197] = 1; //\apbo[64] 
     SignalIDWidth[197] = 1; //\apbo[64] 
     SignalIDName[198] = "\apbo[63] ";
     SignalIDType[198] = 1; //\apbo[63] 
     SignalIDWidth[198] = 1; //\apbo[63] 
     SignalIDName[199] = "\apbo[62] ";
     SignalIDType[199] = 1; //\apbo[62] 
     SignalIDWidth[199] = 1; //\apbo[62] 
     SignalIDName[200] = "\apbo[61] ";
     SignalIDType[200] = 1; //\apbo[61] 
     SignalIDWidth[200] = 1; //\apbo[61] 
     SignalIDName[201] = "\apbo[60] ";
     SignalIDType[201] = 1; //\apbo[60] 
     SignalIDWidth[201] = 1; //\apbo[60] 
     SignalIDName[202] = "\apbo[59] ";
     SignalIDType[202] = 1; //\apbo[59] 
     SignalIDWidth[202] = 1; //\apbo[59] 
     SignalIDName[203] = "\apbo[58] ";
     SignalIDType[203] = 1; //\apbo[58] 
     SignalIDWidth[203] = 1; //\apbo[58] 
     SignalIDName[204] = "\apbo[57] ";
     SignalIDType[204] = 1; //\apbo[57] 
     SignalIDWidth[204] = 1; //\apbo[57] 
     SignalIDName[205] = "\apbo[56] ";
     SignalIDType[205] = 1; //\apbo[56] 
     SignalIDWidth[205] = 1; //\apbo[56] 
     SignalIDName[206] = "\apbo[55] ";
     SignalIDType[206] = 1; //\apbo[55] 
     SignalIDWidth[206] = 1; //\apbo[55] 
     SignalIDName[207] = "\apbo[54] ";
     SignalIDType[207] = 1; //\apbo[54] 
     SignalIDWidth[207] = 1; //\apbo[54] 
     SignalIDName[208] = "\apbo[53] ";
     SignalIDType[208] = 1; //\apbo[53] 
     SignalIDWidth[208] = 1; //\apbo[53] 
     SignalIDName[209] = "\apbo[52] ";
     SignalIDType[209] = 1; //\apbo[52] 
     SignalIDWidth[209] = 1; //\apbo[52] 
     SignalIDName[210] = "\apbo[51] ";
     SignalIDType[210] = 1; //\apbo[51] 
     SignalIDWidth[210] = 1; //\apbo[51] 
     SignalIDName[211] = "\apbo[50] ";
     SignalIDType[211] = 1; //\apbo[50] 
     SignalIDWidth[211] = 1; //\apbo[50] 
     SignalIDName[212] = "\apbo[49] ";
     SignalIDType[212] = 1; //\apbo[49] 
     SignalIDWidth[212] = 1; //\apbo[49] 
     SignalIDName[213] = "\apbo[48] ";
     SignalIDType[213] = 1; //\apbo[48] 
     SignalIDWidth[213] = 1; //\apbo[48] 
     SignalIDName[214] = "\apbo[47] ";
     SignalIDType[214] = 1; //\apbo[47] 
     SignalIDWidth[214] = 1; //\apbo[47] 
     SignalIDName[215] = "\apbo[46] ";
     SignalIDType[215] = 1; //\apbo[46] 
     SignalIDWidth[215] = 1; //\apbo[46] 
     SignalIDName[216] = "\apbo[45] ";
     SignalIDType[216] = 1; //\apbo[45] 
     SignalIDWidth[216] = 1; //\apbo[45] 
     SignalIDName[217] = "\apbo[44] ";
     SignalIDType[217] = 1; //\apbo[44] 
     SignalIDWidth[217] = 1; //\apbo[44] 
     SignalIDName[218] = "\apbo[43] ";
     SignalIDType[218] = 1; //\apbo[43] 
     SignalIDWidth[218] = 1; //\apbo[43] 
     SignalIDName[219] = "\apbo[42] ";
     SignalIDType[219] = 1; //\apbo[42] 
     SignalIDWidth[219] = 1; //\apbo[42] 
     SignalIDName[220] = "\apbo[41] ";
     SignalIDType[220] = 1; //\apbo[41] 
     SignalIDWidth[220] = 1; //\apbo[41] 
     SignalIDName[221] = "\apbo[40] ";
     SignalIDType[221] = 1; //\apbo[40] 
     SignalIDWidth[221] = 1; //\apbo[40] 
     SignalIDName[222] = "\apbo[39] ";
     SignalIDType[222] = 1; //\apbo[39] 
     SignalIDWidth[222] = 1; //\apbo[39] 
     SignalIDName[223] = "\apbo[38] ";
     SignalIDType[223] = 1; //\apbo[38] 
     SignalIDWidth[223] = 1; //\apbo[38] 
     SignalIDName[224] = "\apbo[37] ";
     SignalIDType[224] = 1; //\apbo[37] 
     SignalIDWidth[224] = 1; //\apbo[37] 
     SignalIDName[225] = "\apbo[36] ";
     SignalIDType[225] = 1; //\apbo[36] 
     SignalIDWidth[225] = 1; //\apbo[36] 
     SignalIDName[226] = "\apbo[35] ";
     SignalIDType[226] = 1; //\apbo[35] 
     SignalIDWidth[226] = 1; //\apbo[35] 
     SignalIDName[227] = "\apbo[34] ";
     SignalIDType[227] = 1; //\apbo[34] 
     SignalIDWidth[227] = 1; //\apbo[34] 
     SignalIDName[228] = "\apbo[33] ";
     SignalIDType[228] = 1; //\apbo[33] 
     SignalIDWidth[228] = 1; //\apbo[33] 
     SignalIDName[229] = "\apbo[32] ";
     SignalIDType[229] = 1; //\apbo[32] 
     SignalIDWidth[229] = 1; //\apbo[32] 
     SignalIDName[230] = "\apbo[31] ";
     SignalIDType[230] = 1; //\apbo[31] 
     SignalIDWidth[230] = 1; //\apbo[31] 
     SignalIDName[231] = "\apbo[30] ";
     SignalIDType[231] = 1; //\apbo[30] 
     SignalIDWidth[231] = 1; //\apbo[30] 
     SignalIDName[232] = "\apbo[29] ";
     SignalIDType[232] = 1; //\apbo[29] 
     SignalIDWidth[232] = 1; //\apbo[29] 
     SignalIDName[233] = "\apbo[28] ";
     SignalIDType[233] = 1; //\apbo[28] 
     SignalIDWidth[233] = 1; //\apbo[28] 
     SignalIDName[234] = "\apbo[27] ";
     SignalIDType[234] = 1; //\apbo[27] 
     SignalIDWidth[234] = 1; //\apbo[27] 
     SignalIDName[235] = "\apbo[26] ";
     SignalIDType[235] = 1; //\apbo[26] 
     SignalIDWidth[235] = 1; //\apbo[26] 
     SignalIDName[236] = "\apbo[25] ";
     SignalIDType[236] = 1; //\apbo[25] 
     SignalIDWidth[236] = 1; //\apbo[25] 
     SignalIDName[237] = "\apbo[24] ";
     SignalIDType[237] = 1; //\apbo[24] 
     SignalIDWidth[237] = 1; //\apbo[24] 
     SignalIDName[238] = "\apbo[23] ";
     SignalIDType[238] = 1; //\apbo[23] 
     SignalIDWidth[238] = 1; //\apbo[23] 
     SignalIDName[239] = "\apbo[22] ";
     SignalIDType[239] = 1; //\apbo[22] 
     SignalIDWidth[239] = 1; //\apbo[22] 
     SignalIDName[240] = "\apbo[21] ";
     SignalIDType[240] = 1; //\apbo[21] 
     SignalIDWidth[240] = 1; //\apbo[21] 
     SignalIDName[241] = "\apbo[20] ";
     SignalIDType[241] = 1; //\apbo[20] 
     SignalIDWidth[241] = 1; //\apbo[20] 
     SignalIDName[242] = "\apbo[19] ";
     SignalIDType[242] = 1; //\apbo[19] 
     SignalIDWidth[242] = 1; //\apbo[19] 
     SignalIDName[243] = "\apbo[18] ";
     SignalIDType[243] = 1; //\apbo[18] 
     SignalIDWidth[243] = 1; //\apbo[18] 
     SignalIDName[244] = "\apbo[17] ";
     SignalIDType[244] = 1; //\apbo[17] 
     SignalIDWidth[244] = 1; //\apbo[17] 
     SignalIDName[245] = "\apbo[16] ";
     SignalIDType[245] = 1; //\apbo[16] 
     SignalIDWidth[245] = 1; //\apbo[16] 
     SignalIDName[246] = "\apbo[15] ";
     SignalIDType[246] = 1; //\apbo[15] 
     SignalIDWidth[246] = 1; //\apbo[15] 
     SignalIDName[247] = "\apbo[14] ";
     SignalIDType[247] = 1; //\apbo[14] 
     SignalIDWidth[247] = 1; //\apbo[14] 
     SignalIDName[248] = "\apbo[13] ";
     SignalIDType[248] = 1; //\apbo[13] 
     SignalIDWidth[248] = 1; //\apbo[13] 
     SignalIDName[249] = "\apbo[12] ";
     SignalIDType[249] = 1; //\apbo[12] 
     SignalIDWidth[249] = 1; //\apbo[12] 
     SignalIDName[250] = "\apbo[11] ";
     SignalIDType[250] = 1; //\apbo[11] 
     SignalIDWidth[250] = 1; //\apbo[11] 
     SignalIDName[251] = "\apbo[10] ";
     SignalIDType[251] = 1; //\apbo[10] 
     SignalIDWidth[251] = 1; //\apbo[10] 
     SignalIDName[252] = "\apbo[9] ";
     SignalIDType[252] = 1; //\apbo[9] 
     SignalIDWidth[252] = 1; //\apbo[9] 
     SignalIDName[253] = "\apbo[8] ";
     SignalIDType[253] = 1; //\apbo[8] 
     SignalIDWidth[253] = 1; //\apbo[8] 
     SignalIDName[254] = "\apbo[7] ";
     SignalIDType[254] = 1; //\apbo[7] 
     SignalIDWidth[254] = 1; //\apbo[7] 
     SignalIDName[255] = "\apbo[6] ";
     SignalIDType[255] = 1; //\apbo[6] 
     SignalIDWidth[255] = 1; //\apbo[6] 
     SignalIDName[256] = "\apbo[5] ";
     SignalIDType[256] = 1; //\apbo[5] 
     SignalIDWidth[256] = 1; //\apbo[5] 
     SignalIDName[257] = "\apbo[4] ";
     SignalIDType[257] = 1; //\apbo[4] 
     SignalIDWidth[257] = 1; //\apbo[4] 
     SignalIDName[258] = "\apbo[3] ";
     SignalIDType[258] = 1; //\apbo[3] 
     SignalIDWidth[258] = 1; //\apbo[3] 
     SignalIDName[259] = "\apbo[2] ";
     SignalIDType[259] = 1; //\apbo[2] 
     SignalIDWidth[259] = 1; //\apbo[2] 
     SignalIDName[260] = "\apbo[1] ";
     SignalIDType[260] = 1; //\apbo[1] 
     SignalIDWidth[260] = 1; //\apbo[1] 
     SignalIDName[261] = "\apbo[0] ";
     SignalIDType[261] = 1; //\apbo[0] 
     SignalIDWidth[261] = 1; //\apbo[0] 
     SignalIDName[262] = "testout";
     SignalIDType[262] = 1; //testout
     SignalIDWidth[262] = 1; //testout
     SignalIDName[263] = "uarto_rTSN";
     SignalIDType[263] = 1; //uarto_rTSN
     SignalIDWidth[263] = 1; //uarto_rTSN
     SignalIDName[264] = "uarto_tXD";
     SignalIDType[264] = 1; //uarto_tXD
     SignalIDWidth[264] = 1; //uarto_tXD
     SignalIDName[265] = "uarto_sCALER_31_";
     SignalIDType[265] = 1; //uarto_sCALER_31_
     SignalIDWidth[265] = 1; //uarto_sCALER_31_
     SignalIDName[266] = "uarto_sCALER_30_";
     SignalIDType[266] = 1; //uarto_sCALER_30_
     SignalIDWidth[266] = 1; //uarto_sCALER_30_
     SignalIDName[267] = "uarto_sCALER_29_";
     SignalIDType[267] = 1; //uarto_sCALER_29_
     SignalIDWidth[267] = 1; //uarto_sCALER_29_
     SignalIDName[268] = "uarto_sCALER_28_";
     SignalIDType[268] = 1; //uarto_sCALER_28_
     SignalIDWidth[268] = 1; //uarto_sCALER_28_
     SignalIDName[269] = "uarto_sCALER_27_";
     SignalIDType[269] = 1; //uarto_sCALER_27_
     SignalIDWidth[269] = 1; //uarto_sCALER_27_
     SignalIDName[270] = "uarto_sCALER_26_";
     SignalIDType[270] = 1; //uarto_sCALER_26_
     SignalIDWidth[270] = 1; //uarto_sCALER_26_
     SignalIDName[271] = "uarto_sCALER_25_";
     SignalIDType[271] = 1; //uarto_sCALER_25_
     SignalIDWidth[271] = 1; //uarto_sCALER_25_
     SignalIDName[272] = "uarto_sCALER_24_";
     SignalIDType[272] = 1; //uarto_sCALER_24_
     SignalIDWidth[272] = 1; //uarto_sCALER_24_
     SignalIDName[273] = "uarto_sCALER_23_";
     SignalIDType[273] = 1; //uarto_sCALER_23_
     SignalIDWidth[273] = 1; //uarto_sCALER_23_
     SignalIDName[274] = "uarto_sCALER_22_";
     SignalIDType[274] = 1; //uarto_sCALER_22_
     SignalIDWidth[274] = 1; //uarto_sCALER_22_
     SignalIDName[275] = "uarto_sCALER_21_";
     SignalIDType[275] = 1; //uarto_sCALER_21_
     SignalIDWidth[275] = 1; //uarto_sCALER_21_
     SignalIDName[276] = "uarto_sCALER_20_";
     SignalIDType[276] = 1; //uarto_sCALER_20_
     SignalIDWidth[276] = 1; //uarto_sCALER_20_
     SignalIDName[277] = "uarto_sCALER_19_";
     SignalIDType[277] = 1; //uarto_sCALER_19_
     SignalIDWidth[277] = 1; //uarto_sCALER_19_
     SignalIDName[278] = "uarto_sCALER_18_";
     SignalIDType[278] = 1; //uarto_sCALER_18_
     SignalIDWidth[278] = 1; //uarto_sCALER_18_
     SignalIDName[279] = "uarto_sCALER_17_";
     SignalIDType[279] = 1; //uarto_sCALER_17_
     SignalIDWidth[279] = 1; //uarto_sCALER_17_
     SignalIDName[280] = "uarto_sCALER_16_";
     SignalIDType[280] = 1; //uarto_sCALER_16_
     SignalIDWidth[280] = 1; //uarto_sCALER_16_
     SignalIDName[281] = "uarto_sCALER_15_";
     SignalIDType[281] = 1; //uarto_sCALER_15_
     SignalIDWidth[281] = 1; //uarto_sCALER_15_
     SignalIDName[282] = "uarto_sCALER_14_";
     SignalIDType[282] = 1; //uarto_sCALER_14_
     SignalIDWidth[282] = 1; //uarto_sCALER_14_
     SignalIDName[283] = "uarto_sCALER_13_";
     SignalIDType[283] = 1; //uarto_sCALER_13_
     SignalIDWidth[283] = 1; //uarto_sCALER_13_
     SignalIDName[284] = "uarto_sCALER_12_";
     SignalIDType[284] = 1; //uarto_sCALER_12_
     SignalIDWidth[284] = 1; //uarto_sCALER_12_
     SignalIDName[285] = "uarto_sCALER_11_";
     SignalIDType[285] = 1; //uarto_sCALER_11_
     SignalIDWidth[285] = 1; //uarto_sCALER_11_
     SignalIDName[286] = "uarto_sCALER_10_";
     SignalIDType[286] = 1; //uarto_sCALER_10_
     SignalIDWidth[286] = 1; //uarto_sCALER_10_
     SignalIDName[287] = "uarto_sCALER_9_";
     SignalIDType[287] = 1; //uarto_sCALER_9_
     SignalIDWidth[287] = 1; //uarto_sCALER_9_
     SignalIDName[288] = "uarto_sCALER_8_";
     SignalIDType[288] = 1; //uarto_sCALER_8_
     SignalIDWidth[288] = 1; //uarto_sCALER_8_
     SignalIDName[289] = "uarto_sCALER_7_";
     SignalIDType[289] = 1; //uarto_sCALER_7_
     SignalIDWidth[289] = 1; //uarto_sCALER_7_
     SignalIDName[290] = "uarto_sCALER_6_";
     SignalIDType[290] = 1; //uarto_sCALER_6_
     SignalIDWidth[290] = 1; //uarto_sCALER_6_
     SignalIDName[291] = "uarto_sCALER_5_";
     SignalIDType[291] = 1; //uarto_sCALER_5_
     SignalIDWidth[291] = 1; //uarto_sCALER_5_
     SignalIDName[292] = "uarto_sCALER_4_";
     SignalIDType[292] = 1; //uarto_sCALER_4_
     SignalIDWidth[292] = 1; //uarto_sCALER_4_
     SignalIDName[293] = "uarto_sCALER_3_";
     SignalIDType[293] = 1; //uarto_sCALER_3_
     SignalIDWidth[293] = 1; //uarto_sCALER_3_
     SignalIDName[294] = "uarto_sCALER_2_";
     SignalIDType[294] = 1; //uarto_sCALER_2_
     SignalIDWidth[294] = 1; //uarto_sCALER_2_
     SignalIDName[295] = "uarto_sCALER_1_";
     SignalIDType[295] = 1; //uarto_sCALER_1_
     SignalIDWidth[295] = 1; //uarto_sCALER_1_
     SignalIDName[296] = "uarto_sCALER_0_";
     SignalIDType[296] = 1; //uarto_sCALER_0_
     SignalIDWidth[296] = 1; //uarto_sCALER_0_
     SignalIDName[297] = "uarto_tXEN";
     SignalIDType[297] = 1; //uarto_tXEN
     SignalIDWidth[297] = 1; //uarto_tXEN
     SignalIDName[298] = "uarto_fLOW";
     SignalIDType[298] = 1; //uarto_fLOW
     SignalIDWidth[298] = 1; //uarto_fLOW
     SignalIDName[299] = "uarto_rXEN";
     SignalIDType[299] = 1; //uarto_rXEN
     SignalIDWidth[299] = 1; //uarto_rXEN
     SignalIDName[300] = "_pi";
     SignalIDType[300] = 3; //_pi
     SignalIDWidth[300] = 130; //_pi
     SignalIDName[301] = "all_inputs";
     SignalIDType[301] = 3; //all_inputs
     SignalIDWidth[301] = 130; //all_inputs
     SignalIDName[302] = "_po";
     SignalIDType[302] = 3; //_po
     SignalIDWidth[302] = 170; //_po
     SignalIDName[303] = "_si";
     SignalIDType[303] = 3; //_si
     SignalIDWidth[303] = 1; //_si
     SignalIDName[304] = "all_outputs";
     SignalIDType[304] = 3; //all_outputs
     SignalIDWidth[304] = 170; //all_outputs
     SignalIDName[305] = "_clk";
     SignalIDType[305] = 3; //_clk
     SignalIDWidth[305] = 1; //_clk
     SignalIDName[306] = "_so";
     SignalIDType[306] = 3; //_so
     SignalIDWidth[306] = 1; //_so
     WFTIDName[0] = "_multiclock_capture_WFT_";
     WFTIDName[1] = "_default_WFT_";
     StmtNames[0] = "EndPat";
     StmtNames[1] = "IncPat";
     StmtNames[2] = "SetPat";
     StmtNames[3] = "WFTStmt";
     StmtNames[4] = "ConditionStmt";
     StmtNames[5] = "VectorStmt";
     StmtNames[6] = "FixedStmt";
     StmtNames[7] = "test_setupStmt";
     StmtNames[8] = "load_unloadStmt";
     StmtNames[9] = "multiclock_captureStmt";

     $display("%s",`MAXTB_H_S);
     $display("%s",`MAXTB_HEADER);
     $display("%s\n",`MAXTB_H_S);

     if ( $test$plusargs ("tmax_help") ) begin
       display_help;
       $finish(0);
     end
     $timeformat(-9,2," ns",19);

     `ifdef tmax_test_data_file 
       tdfm = 1;
       TDATA_FILE = `tmax_test_data_file ;
     `else
       tdfm = 0;
       TDATA_FILE = `TDATA_FILE ;
     `endif


     `ifdef tmax_vcde
       $display("XTB: Dumping Extended VCD information in file \"apbuart_test.vcd\"");
       $dumpports( dut, "apbuart_test.vcd");
     `endif

     `ifdef tmax_msg
       verbose = `tmax_msg ;
     `else
       verbose = 0 ;
     `endif

     `ifdef tmax_rpt
     rep_pat = `tmax_rpt ;
     `else
     rep_pat = 5 ;
     `endif

     test_setup_runs = 0;

     CH_NAMES[0] = "c_sys";
     CH_PINS[0] = "testout";
     CH_OUTINV[0] = 116'b00101010101010101110101111111111001011010010101101011100000000001010101010000001010101011100010110101010101000000000;
     CH_INPINV[0] = 116'b01010101010101011101011111111110010110100101011010111000000000010101010100000010101010111000101101010101010000000000;

     diagm = 0;
     diag_file = "";

     `ifdef tmax_diag 
       diagm = `tmax_diag;
     `endif

     -> start_part;
     @(end_part) #0;
     $finish(0);

   end

 endmodule
